{
  "_from": "@storybook/addon-actions@^5.3.17",
  "_id": "@storybook/addon-actions@5.3.17",
  "_inBundle": false,
  "_integrity": "sha512-06HQSBqWFyXcqV418Uv3oMHomNy9g3uCt0FHrqY3BAc7PldY1X0tW65oy//uBueaRaYKdhtRrrjfXRaPQWmDbA==",
  "_location": "/@storybook/addon-actions",
  "_phantomChildren": {
    "loose-envify": "1.4.0",
    "object-assign": "4.1.1",
    "prop-types": "15.7.2"
  },
  "_requested": {
    "escapedName": "@storybook%2faddon-actions",
    "fetchSpec": "^5.3.17",
    "name": "@storybook/addon-actions",
    "raw": "@storybook/addon-actions@^5.3.17",
    "rawSpec": "^5.3.17",
    "registry": true,
    "saveSpec": null,
    "scope": "@storybook",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/@storybook/addon-actions/-/addon-actions-5.3.17.tgz",
  "_shasum": "ec7ae8fa25ef211c2a3302b6ac1d271a6247f767",
  "_shrinkwrap": null,
  "_spec": "@storybook/addon-actions@^5.3.17",
  "_where": "/home/aleksandr/Documents/HwProj-2.0.1/hwproj.courseworks.front",
  "bugs": {
    "url": "https://github.com/storybookjs/storybook/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@storybook/addons": "5.3.17",
    "@storybook/api": "5.3.17",
    "@storybook/client-api": "5.3.17",
    "@storybook/components": "5.3.17",
    "@storybook/core-events": "5.3.17",
    "@storybook/theming": "5.3.17",
    "core-js": "^3.0.1",
    "fast-deep-equal": "^2.0.1",
    "global": "^4.3.2",
    "polished": "^3.3.1",
    "prop-types": "^15.7.2",
    "react": "^16.8.3",
    "react-inspector": "^4.0.0",
    "uuid": "^3.3.2"
  },
  "deprecated": false,
  "description": "Action Logger addon for storybook",
  "devDependencies": {
    "@types/lodash": "^4.14.149",
    "@types/uuid": "^3.4.4",
    "@types/webpack-env": "^1.15.0"
  },
  "files": [
    "*.d.ts",
    "*.js",
    "README.md",
    "dist/**/*",
    "ts3.5/**/*"
  ],
  "gitHead": "44e01ff253bb6c7de588d49659392f7bbdf4ad95",
  "homepage": "https://github.com/storybookjs/storybook/tree/master/addons/actions",
  "keywords": [
    "storybook"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@storybook/addon-actions",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# Storybook Addon Actions\n\nStorybook Addon Actions can be used to display data received by event handlers in [Storybook](https://storybook.js.org).\n\n[Framework Support](https://github.com/storybookjs/storybook/blob/master/ADDONS_SUPPORT.md)\n\n![Screenshot](https://raw.githubusercontent.com/storybookjs/storybook/HEAD/addons/actions/docs/screenshot.png)\n\n## Getting Started\n\nInstall:\n\n```sh\nnpm i -D @storybook/addon-actions\n```\n\nThen, add following content to `.storybook/main.js`\n\n```js\nmodule.exports = {\n  addons: ['@storybook/addon-actions/register']\n}\n```\n\nImport the `action` function and use it to create actions handlers. When creating action handlers, provide a **name** to make it easier to identify.\n\n> _Note: Make sure NOT to use reserved words as function names. [issues#29](https://github.com/storybookjs/storybook-addon-actions/issues/29#issuecomment-288274794)_\n\n```js\nimport { action } from '@storybook/addon-actions';\nimport Button from './button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const defaultView = () => (\n  <Button onClick={action('button-click')}>Hello World!</Button>\n);\n```\n\n## Multiple actions\n\nIf your story requires multiple actions, it may be convenient to use `actions` to create many at once:\n\n```js\nimport { actions } from '@storybook/addon-actions';\nimport Button from './button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\n// This will lead to { onClick: action('onClick'), ... }\nconst eventsFromNames = actions('onClick', 'onMouseOver');\n\n// This will lead to { onClick: action('clicked'), ... }\nconst eventsFromObject = actions({ onClick: 'clicked', onMouseOver: 'hovered' });\n\nexport const first = () => (\n  <Button {...eventsFromNames}>Hello World!</Button>\n);\n\nexport const second = () => (\n  <Button {...eventsFromObject}>Hello World!</Button>\n);\n```\n\n## Action Decorators\n\nIf you wish to process action data before sending them over to the logger, you can do it with action decorators.\n\n`decorate` takes an array of decorator functions. Each decorator function is passed an array of arguments, and should return a new arguments array to use. `decorate` returns a object with two functions: `action` and `actions`, that act like the above, except they log the modified arguments instead of the original arguments.\n\n```js\nimport { decorate } from '@storybook/addon-actions';\nimport Button from './button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nconst firstArg = decorate([args => args.slice(0, 1)]);\n\nexport const first = () => (\n  <Button onClick={firstArg.action('button-click')}>Hello World!</Button>\n);\n```\n\n## Configuration\n\nArguments which are passed to the action call will have to be serialized while be \"transferred\"\nover the channel.\n\nThis is not very optimal and can cause lag when large objects are being logged, for this reason it is possible \nto configure a maximum depth.\n\nThe action logger, by default, will log all actions fired during the lifetime of the story. After a while\nthis can make the storybook laggy. As a workaround, you can configure an upper limit to how many actions should \nbe logged.\n\nTo apply the configuration globally use the `configureActions` function in your `preview.js` file.\n\n```js\nimport { configureActions } from '@storybook/addon-actions';\n\nconfigureActions({\n  depth: 100,\n  // Limit the number of items logged into the actions panel\n  limit: 20,\n});\n```\n\nTo apply the configuration per action use:\n```js\naction('my-action', {\n  depth: 5,\n});\n```\n\n### Available Options\n\n|Name|Type|Description|Default|\n|---|---|---|---|\n|`depth`|Number|Configures the transferred depth of any logged objects.|`10`|\n|`clearOnStoryChange`|Boolean|Flag whether to clear the action logger when switching away from the current story.|`true`|\n|`limit`|Number|Limits the number of items logged in the action logger|`50`|\n\n## withActions decorator\n\nYou can define action handles in a declarative way using `withActions` decorators. It accepts the same arguments as [`actions`](#multiple-actions)\nKeys have `'<eventName> <selector>'` format, e.g. `'click .btn'`. Selector is optional. This can be used with any framework but is especially useful for `@storybook/html`.\n\n```js\nimport { withActions } from '@storybook/addon-actions';\nimport Button from './button';\n\nexport default {\n  title: 'Button',\n  decorators: [withActions('mouseover', 'click .btn')]\n};\n\nexport const first = () => (\n  <Button className=\"btn\">Hello World!</Button>\n);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "directory": "addons/actions",
    "type": "git",
    "url": "git+https://github.com/storybookjs/storybook.git"
  },
  "scripts": {
    "prepare": "node ../../scripts/prepare.js"
  },
  "types": "dist/index.d.ts",
  "typesVersions": {
    "<=3.5": {
      "*": [
        "ts3.5/*"
      ]
    }
  },
  "version": "5.3.17"
}
