import * as React from 'react';
import * as PropTypes from 'prop-types';
import '../ensureOldIEClassName';
import { Nullable, Override } from '../../typings/utility-types';
export interface SyntheticRadioEvent<T> {
    target: {
        id: Nullable<string>;
        name: Nullable<string>;
        checked: Nullable<boolean>;
        disabled: Nullable<boolean>;
        value: T;
    };
}
export declare type RadioProps<T> = Override<React.InputHTMLAttributes<HTMLInputElement>, {
    /** Состояние ошибки */
    error?: boolean;
    /** Состояние Предупреждения */
    warning?: boolean;
    /** Состояние фокуса */
    focused?: boolean;
    /** Состояние нажатия */
    pressed?: boolean;
    /** Состояние hover */
    hovered?: boolean;
    /** Состояние active */
    active?: boolean;
    /** onChange */
    onChange?: (event: SyntheticRadioEvent<T>, value: T) => void;
    /** onChange */
    onMouseEnter?: (event: SyntheticRadioEvent<T>) => void;
    /** onChange */
    onMouseLeave?: (event: SyntheticRadioEvent<T>) => void;
    /** onChange */
    onMouseOver?: (event: SyntheticRadioEvent<T>) => void;
    /** Значение */
    value: T;
}>;
/**
 * Радиокнопка.
 *
 * Если находится внутри компонента **RadioGroup**, то наследует
 * параметры `checked`, `name` и `onChange`. Также наследует состояния
 * `disabled`, `error` и `warning`
 *
 * ```js
 * type SyntheticRadioEvent<T> = {
 * target: {
 *    id: ?string,
 *    name: ?string,
 *    checked: ?boolean,
 *    disabled: ?boolean,
 *    value: T
 *  }
 * };
 * ```
 */
declare class Radio<T> extends React.Component<RadioProps<T>> {
    static __KONTUR_REACT_UI__: string;
    static contextTypes: {
        activeItem: PropTypes.Requireable<any>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        name: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        warning: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        focused: boolean;
    };
    private theme;
    private node;
    render(): JSX.Element;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    private renderMain;
    private _isInRadioGroup;
    private renderLabel;
    private _ref;
    private _handleChange;
    private _handleMouseOver;
    private _handleMouseEnter;
    private _handleMouseLeave;
}
export default Radio;
