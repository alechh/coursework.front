"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
require("../ensureOldIEClassName");
var Radio_module_less_1 = tslib_1.__importDefault(require("./Radio.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Radio_styles_1 = tslib_1.__importDefault(require("./Radio.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
/**
                                                    * Радиокнопка.
                                                    *
                                                    * Если находится внутри компонента **RadioGroup**, то наследует
                                                    * параметры `checked`, `name` и `onChange`. Также наследует состояния
                                                    * `disabled`, `error` и `warning`
                                                    *
                                                    * ```js
                                                    * type SyntheticRadioEvent<T> = {
                                                    * target: {
                                                    *    id: ?string,
                                                    *    name: ?string,
                                                    *    checked: ?boolean,
                                                    *    disabled: ?boolean,
                                                    *    value: T
                                                    *  }
                                                    * };
                                                    * ```
                                                    */
var Radio = /** @class */function (_super) {
  tslib_1.__extends(Radio, _super);
  function Radio() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.node = null;
    _this._isInRadioGroup = function () {return Boolean(_this.context.name);};
    _this._ref = function (element) {
      _this.node = element;
    };
    _this._handleChange = function () {
      var event = createSyntheticEvent(_this.props);
      if (_this.props.onChange) {
        _this.props.onChange(event, event.target.value);
      }
      if (_this._isInRadioGroup()) {
        _this.context.onSelect(event, event.target.value);
      }
    };
    _this._handleMouseOver = function () {
      var event = createSyntheticEvent(_this.props);
      if (_this.props.onMouseOver) {
        _this.props.onMouseOver(event);
      }
    };
    _this._handleMouseEnter = function () {
      var event = createSyntheticEvent(_this.props);
      if (_this.props.onMouseEnter) {
        _this.props.onMouseEnter(event);
      }
    };
    _this._handleMouseLeave = function () {
      var event = createSyntheticEvent(_this.props);
      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(event);
      }
    };
    return _this;
  }
  Radio.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  /**
      * @public
      */
  Radio.prototype.focus = function () {
    if (this.node) {
      this.node.focus();
    }
  };
  /**
      * @public
      */
  Radio.prototype.blur = function () {
    if (this.node) {
      this.node.blur();
    }
  };
  Radio.prototype.renderMain = function () {
    var _this = this;
    var _a;
    var _b = this.props,active = _b.active,children = _b.children,_c = _b.disabled,disabled = _c === void 0 ? this.context.disabled : _c,_d = _b.warning,warning = _d === void 0 ? this.context.warning : _d,_e = _b.error,error = _e === void 0 ? this.context.error : _e,focused = _b.focused,pressed = _b.pressed,hovered = _b.hovered,onMouseOver = _b.onMouseOver,onMouseEnter = _b.onMouseEnter,onMouseLeave = _b.onMouseLeave,onChange = _b.onChange,className = _b.className,style = _b.style,rest = tslib_1.__rest(_b, ["active", "children", "disabled", "warning", "error", "focused", "pressed", "hovered", "onMouseOver", "onMouseEnter", "onMouseLeave", "onChange", "className", "style"]);
    var radioClassNames = Emotion_1.cx((_a = {},
    _a[Radio_module_less_1["default"].radio] = true,
    _a[Radio_styles_1["default"].radio(this.theme)] = true,
    _a[Radio_module_less_1["default"].checked] = this.props.checked,
    _a[Radio_styles_1["default"].checked(this.theme)] = this.props.checked,
    _a[Radio_module_less_1["default"].focus] = this.props.focused,
    _a[Radio_styles_1["default"].focus(this.theme)] = this.props.focused,
    _a[Radio_module_less_1["default"].error] = error,
    _a[Radio_styles_1["default"].error(this.theme)] = error,
    _a[Radio_module_less_1["default"].warning] = warning,
    _a[Radio_styles_1["default"].warning(this.theme)] = warning,
    _a[Radio_module_less_1["default"].disabled] = disabled,
    _a[Radio_styles_1["default"].disabled(this.theme)] = disabled,
    _a));
    var value;
    if (typeof this.props.value === 'string' || typeof this.props.value === 'number') {
      value = this.props.value;
    }
    var inputProps = tslib_1.__assign({}, rest, { type: 'radio', className: Radio_module_less_1["default"].input, disabled: disabled, tabIndex: this.props.tabIndex, value: value, ref: this._ref, onChange: this._handleChange, onMouseOver: function onMouseOver() {
        if (_this.props.onMouseOver) {
          _this.props.onMouseOver(createSyntheticEvent(_this.props));
        }
      }, onMouseEnter: function onMouseEnter() {
        if (_this.props.onMouseEnter) {
          _this.props.onMouseEnter(createSyntheticEvent(_this.props));
        }
      }, onMouseLeave: function onMouseLeave() {
        if (_this.props.onMouseLeave) {
          _this.props.onMouseLeave(createSyntheticEvent(_this.props));
        }
      } });
    var labelProps = {
      className: Radio_module_less_1["default"].root,
      onMouseOver: this._handleMouseOver,
      onMouseEnter: this._handleMouseEnter,
      onMouseLeave: this._handleMouseLeave };

    if (this._isInRadioGroup()) {
      var checked = this.props.value === this.context.activeItem;
      inputProps.checked = checked;
      inputProps.name = this.context.name;
      radioClassNames = Emotion_1.cx(radioClassNames, checked && Emotion_1.cx(Radio_module_less_1["default"].checked, Radio_styles_1["default"].checked(this.theme)));
    }
    return React.createElement("label", tslib_1.__assign({}, labelProps),
    React.createElement("input", tslib_1.__assign({}, inputProps)),
    React.createElement("span", { className: radioClassNames },
    React.createElement("span", { className: Radio_module_less_1["default"].placeholder })),
    this.props.children && this.renderLabel());
  };
  Radio.prototype.renderLabel = function () {
    var _a;
    var labelClassNames = Emotion_1.cx((_a = {},
    _a[Radio_module_less_1["default"].label] = true,
    _a[Radio_styles_1["default"].label(this.theme)] = true,
    _a[Radio_module_less_1["default"].labelDisabled] = !!(this.props.disabled || this.context.disabled),
    _a));
    return React.createElement("div", { className: labelClassNames }, this.props.children);
  };
  Radio.__KONTUR_REACT_UI__ = 'Radio';
  Radio.contextTypes = {
    activeItem: PropTypes.any,
    onSelect: PropTypes.func,
    name: PropTypes.string,
    disabled: PropTypes.bool,
    error: PropTypes.bool,
    warning: PropTypes.bool };

  Radio.defaultProps = {
    focused: false };

  return Radio;
}(React.Component);
function createSyntheticEvent(_a) {
  var value = _a.value,id = _a.id,name = _a.name,checked = _a.checked,disabled = _a.disabled;
  var target = {
    value: value,
    id: id,
    name: name,
    checked: checked,
    disabled: disabled };

  var syntheticEvent = {
    target: target };

  return syntheticEvent;
}
exports["default"] = Radio;