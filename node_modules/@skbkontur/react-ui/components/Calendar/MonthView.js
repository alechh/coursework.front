"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var CDS = tslib_1.__importStar(require("./CalendarDateShape"));
var config_1 = tslib_1.__importDefault(require("./config"));
var MonthView_module_less_1 = tslib_1.__importDefault(require("./MonthView.module.css"));
var DateSelect_1 = tslib_1.__importDefault(require("../DateSelect"));
var Emotion_1 = require("../../lib/theming/Emotion");
var MonthView_styles_1 = tslib_1.__importDefault(require("./MonthView.styles"));
var ThemeConsumer_1 = tslib_1.__importDefault(require("../ThemeConsumer"));
var ColorFunctions_1 = tslib_1.__importDefault(require("../../lib/styles/ColorFunctions"));
var MonthView = /** @class */function (_super) {
  tslib_1.__extends(MonthView, _super);
  function MonthView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MonthView.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1["default"], null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  MonthView.prototype.renderMain = function () {
    var _a;
    var _b = this.props,children = _b.children,height = _b.height,isFirstInYear = _b.isFirstInYear,isLastInYear = _b.isLastInYear,maxDate = _b.maxDate,minDate = _b.minDate,month = _b.month,top = _b.top,year = _b.year,onMonthSelect = _b.onMonthSelect,onYearSelect = _b.onYearSelect,monthSelectRef = _b.monthSelectRef,yearSelectRef = _b.yearSelectRef;
    var isTopNegative = top <= 0;
    var isHeaderSticky = isTopNegative && height >= -top;
    var headerTop = isHeaderSticky ? Math.min(-top, height - config_1["default"].MONTH_TITLE_HEIGHT) : 0;
    var alpha = isHeaderSticky ? (height + top - config_1["default"].MONTH_TITLE_HEIGHT) / 10 : 1;
    var borderBottomColor = ColorFunctions_1["default"].fade(this.theme.calendarMonthTitleBorderBottomColor, alpha);
    var isYearVisible = isFirstInYear || isHeaderSticky;
    var yearTop = isHeaderSticky && !isLastInYear ? -headerTop - top : 0;
    var monthSelectDisabled = top > 40 || headerTop < 0 || headerTop >= height - config_1["default"].MONTH_TITLE_HEIGHT;
    var yearSelectDisabled = top > 40 || isLastInYear && top < -height + config_1["default"].MONTH_TITLE_HEIGHT;
    var getMinMonth = function getMinMonth(value) {
      var min = 0;
      for (var i = 0; i < 12; ++i) {
        if (minDate && CDS.isGreaterOrEqual({ date: 31, month: i, year: value }, minDate)) {
          min = i;
          break;
        }
      }
      return min;
    };
    var getMaxMonth = function getMaxMonth(value) {
      var max = 11;
      for (var i = 11; i >= 0; --i) {
        if (maxDate && CDS.isLessOrEqual({ date: 1, month: i, year: value }, maxDate)) {
          max = i;
          break;
        }
      }
      return max;
    };
    return React.createElement("div", { className: MonthView_module_less_1["default"].month, style: { top: top }, key: month + '-' + year },
    React.createElement("div", { style: { lineHeight: config_1["default"].MONTH_TITLE_HEIGHT + "px", top: headerTop, borderBottomColor: borderBottomColor }, className: Emotion_1.cx((_a = {},
      _a[MonthView_module_less_1["default"].monthTitle] = true,
      _a[MonthView_styles_1["default"].monthTitle(this.theme)] = true,
      _a[MonthView_module_less_1["default"].headerSticky] = isHeaderSticky,
      _a[MonthView_styles_1["default"].headerSticky(this.theme)] = isHeaderSticky,
      _a)) },
    React.createElement("div", { className: MonthView_module_less_1["default"].headerMonth },
    React.createElement(DateSelect_1["default"], { disabled: monthSelectDisabled, width: 85, type: "month", value: month, onChange: onMonthSelect, ref: !monthSelectDisabled ? monthSelectRef : undefined, minValue: getMinMonth(year), maxValue: getMaxMonth(year) })),
    isYearVisible && React.createElement("div", { className: MonthView_module_less_1["default"].headerYear, style: { top: yearTop } },
    React.createElement(DateSelect_1["default"], { disabled: yearSelectDisabled, width: 50, type: "year", value: year, minValue: minDate ? minDate.year : undefined, maxValue: maxDate ? maxDate.year : undefined, onChange: onYearSelect, ref: !yearSelectDisabled ? yearSelectRef : undefined }))),
    children);
  };
  return MonthView;
}(React.Component);
exports.MonthView = MonthView;