import * as React from 'react';
import * as CDS from './CalendarDateShape';
import { MonthViewModel } from './MonthViewModel';
import { Nullable } from '../../typings/utility-types';
export declare type CalendarDateShape = CDS.CalendarDateShape;
export interface CalendarProps {
    initialMonth?: number;
    initialYear?: number;
    onSelect?: (date: CalendarDateShape) => void;
    value?: Nullable<CalendarDateShape>;
    maxDate?: CalendarDateShape;
    minDate?: CalendarDateShape;
    isHoliday?: (day: CalendarDateShape & {
        isWeekend: boolean;
    }) => boolean;
}
export interface CalendarState {
    scrollPosition: number;
    months: MonthViewModel[];
    today: CalendarDateShape;
    scrollDirection: number;
    scrollTarget: number;
}
declare class Calendar extends React.Component<CalendarProps, CalendarState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        holidays: never[];
        minDate: {
            year: number;
            month: number;
            date: number;
        };
        maxDate: {
            year: number;
            month: number;
            date: number;
        };
    };
    private theme;
    private wheelEndTimeout;
    private root;
    private animation;
    constructor(props: CalendarProps);
    componentWillUnmount(): void;
    render(): JSX.Element;
    /**
     * Scrolls calendar to given date
     * @public
     */
    scrollToMonth: (month: number, year: number) => Promise<void>;
    private renderMain;
    private refRoot;
    private renderMonth;
    private getMonthPositions;
    private handleMonthYearChange;
    private handleWheel;
    private handleWheelEnd;
    private scrollToNearestWeek;
    private scrollTo;
    private scrollAmount;
}
export default Calendar;
