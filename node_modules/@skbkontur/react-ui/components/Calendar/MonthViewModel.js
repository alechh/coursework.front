"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var config_1 = tslib_1.__importDefault(require("./config"));
var DayCellViewModel_1 = require("./DayCellViewModel");
var utils_1 = require("./utils");
var MonthViewModel = /** @class */function () {
  function MonthViewModel(month, year) {
    if (month < 0) {
      year -= Math.ceil(-month / 12);
      month = 12 + month % 12;
    }
    if (month > 11) {
      year += Math.floor(month / 12);
      month %= 12;
    }
    var daysCount = getMonthsDays(month, year);
    var offset = getMonthOffset(month, year);
    this.daysCount = daysCount;
    this.offset = offset;
    this.month = month;
    this.year = year;
    this.height = getMonthHeight(daysCount, offset);
    this.isLastInYear = month === 11;
    this.isFirstInYear = month === 0;
    this.days = Array.from({ length: daysCount }, function (_, i) {
      var isWeekend = (i + getMonthOffset(month, year)) % 7 >= 5;
      return DayCellViewModel_1.DayCellViewModel.create(i + 1, month, year, isWeekend);
    });
  }
  MonthViewModel.create = utils_1.memo(function (month, year) {return new MonthViewModel(month, year);});
  return MonthViewModel;
}();
exports.MonthViewModel = MonthViewModel;
var getMonthHeight = utils_1.memo(function (daysCount, offset) {
  return Math.ceil((daysCount + offset) / 7) * config_1["default"].DAY_HEIGHT +
  config_1["default"].MONTH_TITLE_OFFSET_HEIGHT +
  config_1["default"].MONTH_BOTTOM_MARGIN;
});
var getMonthsDays = utils_1.memo(function (month, year) {return new Date(year, month + 1, 0).getDate();});
var getMonthOffset = utils_1.memo(function (month, year) {
  var day = new Date(year, month, 1).getDay() - 1;
  if (day === -1) {
    return 6;
  }
  return day;
});