"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var CDS = tslib_1.__importStar(require("./CalendarDateShape"));
var config_1 = tslib_1.__importDefault(require("./config"));
var DayCellView_module_less_1 = tslib_1.__importDefault(require("./DayCellView.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var DayCellView_styles_1 = tslib_1.__importDefault(require("./DayCellView.styles"));
var ThemeConsumer_1 = tslib_1.__importDefault(require("../ThemeConsumer"));
var size = config_1["default"].DAY_HEIGHT;
var cellStyle = {
  width: size,
  height: size,
  lineHeight: size - 2 + 'px',
  borderRadius: size / 2 };

var DayCellView = /** @class */function (_super) {
  tslib_1.__extends(DayCellView, _super);
  function DayCellView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.handleClick = function () {
      var onDateClick = _this.props.onDateClick;
      if (!onDateClick) {
        return;
      }
      var _a = _this.props.date,date = _a.date,month = _a.month,year = _a.year;
      onDateClick({ date: date, month: month, year: year });
    };
    return _this;
  }
  DayCellView.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1["default"], null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  DayCellView.prototype.renderMain = function () {
    var _a;
    var _b = this.props,date = _b.date,minDate = _b.minDate,maxDate = _b.maxDate,today = _b.today,value = _b.value,isWeekend = _b.isWeekend;
    return React.createElement("button", { style: cellStyle, tabIndex: -1, disabled: !CDS.isBetween(date, minDate, maxDate), className: Emotion_1.cx((_a = {},
      _a[DayCellView_module_less_1["default"].cell] = true,
      _a[DayCellView_styles_1["default"].cell(this.theme)] = true,
      _a[DayCellView_styles_1["default"].today(this.theme)] = !!today && !!CDS.isEqual(date, today),
      _a[DayCellView_styles_1["default"].selected(this.theme)] = !!value && !!CDS.isEqual(date, value),
      _a[DayCellView_styles_1["default"].weekend(this.theme)] = !!isWeekend,
      _a)), onClick: this.handleClick }, date.date);
  };
  return DayCellView;
}(React.PureComponent);
exports.DayCellView = DayCellView;