"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var config_1 = tslib_1.__importDefault(require("./config"));
var CDS = tslib_1.__importStar(require("./CalendarDateShape"));
var MonthView_1 = require("./MonthView");
var DayCellView_1 = require("./DayCellView");
var CalendarScrollEvents_1 = tslib_1.__importDefault(require("./CalendarScrollEvents"));
var Month = /** @class */function (_super) {
  tslib_1.__extends(Month, _super);
  function Month() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.monthSelect = null;
    _this.yearSelect = null;
    _this.closeSelects = function () {
      if (_this.monthSelect) {
        _this.monthSelect.close();
      }
      if (_this.yearSelect) {
        _this.yearSelect.close();
      }
    };
    _this.monthRef = function (monthSelect) {
      _this.monthSelect = monthSelect;
    };
    _this.yearRef = function (yearSelect) {
      _this.yearSelect = yearSelect;
    };
    _this.handleMonthSelect = function (month) {
      _this.props.onMonthYearChange(month, _this.props.month.year);
    };
    _this.handleYearSelect = function (year) {
      _this.props.onMonthYearChange(_this.props.month.month, year);
    };
    return _this;
  }
  Month.prototype.shouldComponentUpdate = function (nextProps) {
    if (this.props.top !== nextProps.top) {
      return true;
    }
    if (!CDS.isEqual(nextProps.value, this.props.value)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.today, this.props.today)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {
      return true;
    }
    return this.props.month !== nextProps.month;
  };
  Month.prototype.componentDidMount = function () {
    CalendarScrollEvents_1["default"].addListener(this.closeSelects);
  };
  Month.prototype.render = function () {
    var _a = this.props,month = _a.month,maxDate = _a.maxDate,minDate = _a.minDate,top = _a.top;
    return React.createElement(MonthView_1.MonthView, { firstDayOffset: month.offset, height: month.height, isFirstInYear: month.isFirstInYear, isLastInYear: month.isLastInYear, maxDate: maxDate, minDate: minDate, month: month.month, top: top, year: month.year, onMonthSelect: this.handleMonthSelect, onYearSelect: this.handleYearSelect, monthSelectRef: this.monthRef, yearSelectRef: this.yearRef }, this.renderCells());
  };
  Month.prototype.renderCells = function () {
    return React.createElement(MonthDayGrid, { days: this.props.month.days, offset: this.props.month.offset, minDate: this.props.minDate, maxDate: this.props.maxDate, today: this.props.today, value: this.props.value, onDateClick: this.props.onDateClick, isHoliday: this.props.isHoliday });
  };
  return Month;
}(React.Component);
exports.Month = Month;
var MonthDayGrid = /** @class */function (_super) {
  tslib_1.__extends(MonthDayGrid, _super);
  function MonthDayGrid() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MonthDayGrid.prototype.shouldComponentUpdate = function (nextProps) {
    if (!CDS.isEqual(nextProps.value, this.props.value)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.today, this.props.today)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {
      return true;
    }
    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {
      return true;
    }
    return this.props.days !== nextProps.days;
  };
  MonthDayGrid.prototype.render = function () {
    var _this = this;
    return React.createElement("div", null,
    React.createElement("div", { style: {
        width: this.props.offset * config_1["default"].DAY_HEIGHT,
        display: 'inline-block' } }),

    this.props.days.map(function (day) {
      var isWeekend = _this.props.isHoliday(day);
      return React.createElement(DayCellView_1.DayCellView, { date: day, key: day.date + "." + day.month + "." + day.year, minDate: _this.props.minDate, maxDate: _this.props.maxDate, today: _this.props.today, value: _this.props.value, isWeekend: isWeekend, onDateClick: _this.props.onDateClick });
    }));
  };
  MonthDayGrid.defaultProps = {
    isHoliday: function isHoliday(day) {return day.isWeekend;} };

  return MonthDayGrid;
}(React.Component);