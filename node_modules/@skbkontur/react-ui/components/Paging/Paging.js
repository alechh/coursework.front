"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var prop_types_1 = require("prop-types");
var ArrowChevronRight_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowChevronRight"));
var identifiers_1 = require("../../lib/events/keyboard/identifiers");
var ensureOldIEClassName_1 = require("../ensureOldIEClassName");
var decorators_1 = require("../LocaleProvider/decorators");
var locale_1 = require("./locale");
var PagingHelper_1 = tslib_1.__importDefault(require("./PagingHelper"));
var NavigationHelper_1 = tslib_1.__importDefault(require("./NavigationHelper"));
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var utils_1 = require("../../lib/utils");
var Paging_module_less_1 = tslib_1.__importDefault(require("./Paging.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Paging_styles_1 = tslib_1.__importDefault(require("./Paging.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var warning_1 = tslib_1.__importDefault(require("warning"));
var IGNORE_EVENT_TAGS = ['input', 'textarea'];
var Paging = /** @class */function (_super) {
  tslib_1.__extends(Paging, _super);
  function Paging() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      focusedByTab: false,
      focusedItem: null,
      keyboardControl: _this.props.useGlobalListener };

    _this.addedGlobalListener = false;
    _this.container = null;
    _this.renderItem = function (item, index) {
      var focused = _this.getFocusedItem() === item;
      switch (item) {
        case '.':
          var key = "dots" + (index < 5 ? 'Left' : 'Right');
          return _this.renderDots(key);
        case 'forward':
          var disabled = _this.isItemDisabled(item);
          return _this.renderForwardLink(disabled, focused);
        default:
          var active = _this.props.activePage === item;
          return _this.renderPageLink(item, active, focused);}

    };
    _this.renderDots = function (key) {
      return React.createElement("span", { key: key, className: Emotion_1.cx(Paging_module_less_1["default"].dots, Paging_styles_1["default"].dots(_this.theme)) }, '...');
    };
    _this.renderForwardLink = function (disabled, focused) {
      var _a;
      var classes = Emotion_1.cx((_a = {},
      _a[Paging_module_less_1["default"].forwardLink] = true,
      _a[Paging_styles_1["default"].forwardLink(_this.theme)] = true,
      _a[Paging_module_less_1["default"].focused] = focused,
      _a[Paging_styles_1["default"].focused(_this.theme)] = focused,
      _a[Paging_module_less_1["default"].disabled] = disabled,
      _a[Paging_styles_1["default"].disabled(_this.theme)] = disabled,
      _a));
      var _b = _this.props,Component = _b.component,_c = _b.strings,_d = (_c === void 0 ? {} : _c).forward,forward = _d === void 0 ? _this.locale.forward : _d,caption = _b.caption;
      return React.createElement(Component, { key: 'forward', active: false, className: classes, onClick: disabled ? utils_1.emptyHandler : _this.goForward, tabIndex: -1, pageNumber: 'forward' },
      caption || forward,
      React.createElement("span", { className: Paging_module_less_1["default"].forwardIcon },
      React.createElement(ArrowChevronRight_1["default"], { size: "18px" })));
    };
    _this.renderPageLink = function (pageNumber, active, focused) {
      var _a;
      var classes = Emotion_1.cx((_a = {},
      _a[Paging_module_less_1["default"].pageLink] = true,
      _a[Paging_styles_1["default"].pageLink(_this.theme)] = true,
      _a[Paging_module_less_1["default"].focused] = focused,
      _a[Paging_styles_1["default"].focused(_this.theme)] = focused,
      _a[Paging_module_less_1["default"].active] = active,
      _a[Paging_styles_1["default"].active(_this.theme)] = active,
      _a));
      var Component = _this.props.component;
      var handleClick = function handleClick() {return _this.goToPage(pageNumber);};
      return React.createElement("span", { key: pageNumber, className: Paging_module_less_1["default"].pageLinkWrapper, onMouseDown: _this.handleMouseDownPageLink },
      React.createElement(Component, { active: active, className: classes, onClick: handleClick, tabIndex: -1, pageNumber: pageNumber }, pageNumber),
      active && _this.renderNavigationHint());
    };
    _this.renderNavigationHint = function () {
      if (_this.props.withoutNavigationHint) {
        return null;
      }
      var keyboardControl = _this.state.keyboardControl;
      var canGoBackward = _this.canGoBackward();
      var canGoForward = _this.canGoForward();
      if (keyboardControl && (canGoBackward || canGoForward)) {
        return React.createElement("span", { className: Emotion_1.cx(Paging_module_less_1["default"].pageLinkHint, Paging_styles_1["default"].pageLinkHint(_this.theme)) },
        React.createElement("span", { className: canGoBackward ? '' : Paging_module_less_1["default"].transparent }, '←'),
        React.createElement("span", null, NavigationHelper_1["default"].getKeyName()),
        React.createElement("span", { className: canGoForward ? '' : Paging_module_less_1["default"].transparent }, '→'));
      }
      return React.createElement("div", { className: Paging_module_less_1["default"].pageLinkHintPlaceHolder });
    };
    _this.handleMouseDown = function () {
      _this.setState({ focusedByTab: false, focusedItem: null });
    };
    _this.handleMouseDownPageLink = function () {
      if (ensureOldIEClassName_1.isIE) {
        // Клик по span внутри контейнера с tabindex="0" переносит фокус именно на этот span.
        // Поэтому горячие клавиши работают пока span существует на странице.
        setTimeout(function () {return _this.container && _this.container.focus();}, 0);
      }
    };
    _this.handleKeyDown = function (e) {
      if (e.shiftKey) {
        return;
      }
      var target = e.target;
      var isArrowLeft = identifiers_1.isKeyArrowLeft(e);
      var isArrowRight = identifiers_1.isKeyArrowRight(e);
      if (target instanceof Element && (
      IGNORE_EVENT_TAGS.includes(target.tagName.toLowerCase()) || target.isContentEditable)) {
        return;
      }
      if (NavigationHelper_1["default"].checkKeyPressed(e) && isArrowLeft) {
        _this.setState({ focusedItem: null }, _this.goBackward);
        return;
      }
      if (NavigationHelper_1["default"].checkKeyPressed(e) && isArrowRight) {
        _this.setState({ focusedItem: null }, _this.goForward);
        return;
      }
      if (_this.container && _this.container === e.target) {
        if (isArrowLeft) {
          _this.setState({ focusedByTab: true }, _this.moveFocusLeft);
          return;
        }
        if (isArrowRight) {
          _this.setState({ focusedByTab: true }, _this.moveFocusRight);
          return;
        }
        if (identifiers_1.isKeyEnter(e)) {
          _this.executeItemAction(_this.getFocusedItem());
          return;
        }
      }
    };
    _this.handleFocus = function (e) {
      if (_this.props.disabled) {
        return;
      }
      _this.setState({ keyboardControl: true });
      // focus event fires before keyDown eventlistener
      // so we should check tabPressed in async way
      process.nextTick(function () {
        if (tabListener_1["default"].isTabPressed) {
          _this.setState({ focusedByTab: true });
        }
      });
    };
    _this.handleBlur = function () {
      _this.setState({
        focusedByTab: false,
        keyboardControl: _this.props.useGlobalListener || false });

    };
    _this.getItems = function () {
      return PagingHelper_1["default"].getItems(_this.props.activePage, _this.props.pagesCount).concat('forward');
    };
    _this.getFocusedItem = function () {
      if (!_this.state.focusedByTab) {
        return null;
      }
      var focusedItem = _this.state.focusedItem;
      if (focusedItem && _this.getItems().indexOf(focusedItem) !== -1 && _this.isItemFocusable(focusedItem)) {
        return focusedItem;
      }
      return _this.props.activePage;
    };
    _this.isItemFocusable = function (item) {
      return !_this.isItemDisabled(item);
    };
    _this.isItemDisabled = function (item) {
      switch (item) {
        case '.':
          return true;
        case 'forward':
          return !_this.canGoForward();
        default:
          return false;}

    };
    _this.executeItemAction = function (item) {
      if (item === 'forward') {
        _this.goForward();
      }
      if (typeof item === 'number') {
        _this.goToPage(item);
      }
    };
    _this.moveFocusLeft = function () {
      _this.moveFocus(-1);
    };
    _this.moveFocusRight = function () {
      _this.moveFocus(1);
    };
    _this.moveFocus = function (step) {
      var focusedItem = _this.getFocusedItem();
      var items = _this.getItems();
      var index = items.findIndex(function (x) {return x === focusedItem;});
      do {
        index = (index + step + items.length) % items.length;
      } while (!_this.isItemFocusable(items[index]));
      _this.setState({ focusedItem: items[index] });
    };
    _this.canGoBackward = function () {
      return _this.props.activePage > 1;
    };
    _this.canGoForward = function () {
      return _this.props.activePage < _this.props.pagesCount;
    };
    _this.goBackward = function () {
      _this.goToPage(_this.props.activePage - 1);
    };
    _this.goForward = function () {
      _this.goToPage(_this.props.activePage + 1);
    };
    _this.goToPage = function (pageNumber) {
      if (1 <= pageNumber && pageNumber !== _this.props.activePage && pageNumber <= _this.props.pagesCount) {
        _this.props.onPageChange(pageNumber);
      }
    };
    _this.addGlobalListener = function () {
      if (_this.addedGlobalListener) {
        return;
      }
      document.addEventListener('keydown', _this.handleKeyDown);
      _this.addedGlobalListener = true;
    };
    _this.removeGlobalListener = function () {
      if (_this.addedGlobalListener) {
        document.removeEventListener('keydown', _this.handleKeyDown);
        _this.addedGlobalListener = false;
      }
    };
    _this.refContainer = function (element) {
      _this.container = element;
    };
    return _this;
  }
  Paging.isForward = function (pageNumber) {
    return pageNumber === 'forward';
  };
  Paging.prototype.componentDidMount = function () {
    var _a = this.props,useGlobalListener = _a.useGlobalListener,strings = _a.strings;
    if (useGlobalListener) {
      this.addGlobalListener();
    }
    warning_1["default"](strings === undefined, '[Paging]: `strings` prop is deprecated, please use `caption` or `LocaleProvider` instead');
  };
  Paging.prototype.componentWillReceiveProps = function (nextProps) {
    if (this.props.useGlobalListener !== nextProps.useGlobalListener) {
      this.setState({
        keyboardControl: nextProps.useGlobalListener });

    }
  };
  Paging.prototype.componentDidUpdate = function (prevProps) {
    if (!prevProps.useGlobalListener && this.props.useGlobalListener) {
      this.addGlobalListener();
    }
    if (prevProps.useGlobalListener && !this.props.useGlobalListener) {
      this.removeGlobalListener();
    }
  };
  Paging.prototype.componentWillUnmount = function () {
    this.removeGlobalListener();
  };
  Paging.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Paging.prototype.renderMain = function () {
    return React.createElement("span", { tabIndex: 0, className: Paging_module_less_1["default"].paging, onKeyDown: this.props.useGlobalListener ? undefined : this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, onMouseDown: this.handleMouseDown, ref: this.refContainer }, this.getItems().map(this.renderItem));
  };
  Paging.__KONTUR_REACT_UI__ = 'Paging';
  Paging.defaultProps = {
    component: function component(_a) {
      var className = _a.className,onClick = _a.onClick,children = _a.children;
      return React.createElement("span", { className: className, onClick: onClick, children: children });
    },
    useGlobalListener: false };

  Paging.propTypes = {};
  Paging = tslib_1.__decorate([
  decorators_1.locale('Paging', locale_1.PagingLocaleHelper)],
  Paging);
  return Paging;
}(React.Component);
exports["default"] = Paging;
Paging.propTypes = {
  /**
                      * Current active page
                      */
  activePage: prop_types_1.number.isRequired,
  /**
                                               * React component that would be used for rendering items
                                               *
                                               * Usefull for router integration
                                               */
  component: prop_types_1.func,
  /**
                                 * Total page count
                                 */
  pagesCount: prop_types_1.number.isRequired,
  /**
                                               * Calls when page has been changed
                                               */
  onPageChange: prop_types_1.func.isRequired };