import * as React from 'react';
import { Nullable } from '../../typings/utility-types';
interface ItemComponentProps {
    active: boolean;
    children?: React.ReactNode;
    className: string;
    onClick: () => void;
    pageNumber: number | 'forward';
    tabIndex: number;
}
export interface PagingProps {
    activePage: number;
    /**
     * Компонент обертки по умолчанию
     * @default <span />
     */
    component: React.ComponentType<ItemComponentProps>;
    onPageChange: (pageNumber: number) => void;
    pagesCount: number;
    disabled?: boolean;
    /**
     * @deprecated используйте проп `caption` или `LocaleProvider`
     */
    strings?: {
        forward: string;
    };
    /**
     * Отключает навигационные подсказки.
     * По-умолчанию подсказки появляются, когда доступно управление с клавиатуры
     * (либо элемент в фокусе, либо globalListeners === true)
     */
    withoutNavigationHint?: boolean;
    caption?: string;
    /**
     * Глобальный слушатель **keyDown**, для навигации клавишами без фокуса на компоненте.
     * Если на странице используется несколько элементов
     * **Paging** с useGlobalListener === true, то обработчик keyDown будет вызываться
     * на каждом из них. Такие случаи лучше обрабатывать отдельно.
     */
    useGlobalListener: boolean;
}
export interface PagingState {
    focusedByTab: boolean;
    focusedItem: Nullable<ItemType>;
    keyboardControl: boolean;
}
export declare type ItemType = number | '.' | 'forward';
export default class Paging extends React.Component<PagingProps, PagingState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        component: ({ className, onClick, children }: any) => JSX.Element;
        useGlobalListener: boolean;
    };
    static propTypes: {};
    static isForward(pageNumber: number | 'forward'): boolean;
    state: PagingState;
    private theme;
    private readonly locale;
    private addedGlobalListener;
    private container;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: PagingProps): void;
    componentDidUpdate(prevProps: PagingProps): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private renderItem;
    private renderDots;
    private renderForwardLink;
    private renderPageLink;
    private renderNavigationHint;
    private handleMouseDown;
    private handleMouseDownPageLink;
    private handleKeyDown;
    private handleFocus;
    private handleBlur;
    private getItems;
    private getFocusedItem;
    private isItemFocusable;
    private isItemDisabled;
    private executeItemAction;
    private moveFocusLeft;
    private moveFocusRight;
    private moveFocus;
    private canGoBackward;
    private canGoForward;
    private goBackward;
    private goForward;
    private goToPage;
    private addGlobalListener;
    private removeGlobalListener;
    private refContainer;
}
export {};
