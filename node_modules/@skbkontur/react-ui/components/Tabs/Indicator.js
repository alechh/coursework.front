"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = require("react-dom");
var LayoutEvents_1 = tslib_1.__importDefault(require("../../lib/LayoutEvents"));
var lodash_throttle_1 = tslib_1.__importDefault(require("lodash.throttle"));
var Indicator_module_less_1 = tslib_1.__importDefault(require("./Indicator.module.css"));
var utils_1 = require("../../lib/utils");
var TabsContext_1 = require("./TabsContext");
var Emotion_1 = require("../../lib/theming/Emotion");
var Indicator_styles_1 = tslib_1.__importDefault(require("./Indicator.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var Indicator = /** @class */function (_super) {
  tslib_1.__extends(Indicator, _super);
  function Indicator() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      styles: {} };

    _this.eventListener = null;
    _this.removeTabUpdatesListener = null;
    _this.reflow = function () {
      var context = _this.props.context;
      var node = context ? context.getTab(context.activeTab) : null;
      var nodeStyles = _this.getStyles(node);
      var stylesUpdated = ['left', 'top', 'width', 'height'].some(function (prop) {return nodeStyles[prop] !== _this.state.styles[prop];});
      if (stylesUpdated) {
        _this.setState({ styles: nodeStyles });
      }
    };
    // tslint:disable-next-line:member-ordering
    _this.throttledReflow = lodash_throttle_1["default"](_this.reflow, 100);
    return _this;
  }
  Indicator.prototype.componentDidMount = function () {
    this.eventListener = LayoutEvents_1["default"].addListener(this.throttledReflow);
    this.removeTabUpdatesListener = this.props.tabUpdates.on(this.reflow);
    this.reflow();
  };
  Indicator.prototype.componentWillUnmount = function () {
    this.throttledReflow.cancel();
    if (this.eventListener) {
      this.eventListener.remove();
    }
    if (this.removeTabUpdatesListener) {
      this.removeTabUpdatesListener();
    }
  };
  Indicator.prototype.componentDidUpdate = function (_, prevState) {
    this.reflow();
  };
  Indicator.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Indicator.prototype.renderMain = function () {
    var context = this.props.context;
    var node = context ? context.getTab(context.activeTab) : null;
    var indicators = node && node.getIndicators && node.getIndicators() || {
      error: false,
      warning: false,
      success: false,
      primary: false,
      disabled: false };

    return React.createElement("div", { className: Emotion_1.cx(Indicator_module_less_1["default"].root, Indicator_styles_1["default"].root(this.theme), indicators.primary && Indicator_styles_1["default"].primary(this.theme), indicators.success && Indicator_styles_1["default"].success(this.theme), indicators.warning && Indicator_styles_1["default"].warning(this.theme), indicators.error && Indicator_styles_1["default"].error(this.theme), this.props.className), style: this.state.styles });
  };
  Indicator.prototype.getStyles = function (node) {
    if (node instanceof React.Component) {
      node = react_dom_1.findDOMNode(node);
    }
    if (node instanceof HTMLElement) {
      var rect = node.getBoundingClientRect();
      if (this.props.vertical) {
        return {
          width: 3,
          left: node.offsetLeft,
          top: node.offsetTop,
          height: rect.bottom - rect.top };

      }
      return {
        left: node.offsetLeft,
        top: node.offsetHeight + node.offsetTop - 3,
        width: rect.right - rect.left };

    }
    return {};
  };
  return Indicator;
}(React.Component);
exports.Indicator = Indicator;
exports.IndicatorWithContext = utils_1.withContext(TabsContext_1.TabsContext.Consumer)(Indicator);
exports["default"] = exports.IndicatorWithContext;