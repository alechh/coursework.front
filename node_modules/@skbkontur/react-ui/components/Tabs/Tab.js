"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var identifiers_1 = require("../../lib/events/keyboard/identifiers");
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var utils_1 = require("../../lib/utils");
var Tab_module_less_1 = tslib_1.__importDefault(require("./Tab.module.css"));
var TabsContext_1 = require("./TabsContext");
var Emotion_1 = require("../../lib/theming/Emotion");
var Tab_styles_1 = tslib_1.__importDefault(require("./Tab.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
/**
                                                    * Tab element of Tabs component
                                                    *
                                                    * Can be used for creating custom tabs
                                                    * ```js
                                                    *
                                                    * const RouteTab = (props) => (
                                                    *   <Tab id={props.to} component={RouteLink} {...props}/>
                                                    * )
                                                    *
                                                    * const MyAwesomeTab = (props) => <Tab id={props.id}>8) {props.children}</Tab>
                                                    * ```
                                                    *
                                                    * Works only inside Tabs component, otherwise throws
                                                    */
var Tab = /** @class */function (_super) {
  tslib_1.__extends(Tab, _super);
  function Tab() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      focusedByKeyboard: false };

    _this.tabComponent = null;
    _this.isArrowKeyPressed = false;
    _this.getUnderlyingNode = function () {return _this.tabComponent;};
    _this.getId = function () {return _this.props.id || _this.props.href;};
    _this.refTabComponent = function (instance) {
      _this.tabComponent = instance;
    };
    _this.handleKeyDownGlobal = function (e) {
      _this.isArrowKeyPressed = identifiers_1.isKeyArrow(e);
    };
    _this.getTabInstance = function () {return _this;};
    _this.switchTab = function (event) {
      if (_this.props.disabled) {
        return;
      }
      var id = _this.props.id || _this.props.href;
      if (_this.props.onClick) {
        _this.props.onClick(event);
        if (event.defaultPrevented) {
          return;
        }
      }
      if (_this.props.context && typeof id === 'string') {
        _this.props.context.switchTab(id);
      }
    };
    _this.handleMouseDown = function () {return _this.isArrowKeyPressed = false;};
    _this.handleKeyDown = function (e) {
      if (_this.props.disabled) {
        return;
      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
        if (e.defaultPrevented) {
          return;
        }
      }
      var id = _this.getId();
      var context = _this.props.context;
      if (!(context && typeof id === 'string')) {
        return;
      }
      if (!identifiers_1.isKeyArrow(e)) {
        return;
      }
      e.preventDefault();
      var delta = identifiers_1.isKeyArrowLeft(e) || identifiers_1.isKeyArrowUp(e) ? -1 : 1;
      context.shiftFocus(id, delta);
    };
    _this.handleFocus = function () {
      if (_this.props.disabled) {
        return;
      }
      // focus event fires before keyDown eventlistener
      // so we should check focusKeyPressed in async way
      process.nextTick(function () {
        if (tabListener_1["default"].isTabPressed || _this.isArrowKeyPressed) {
          _this.setState({ focusedByKeyboard: true });
        }
      });
    };
    _this.handleBlur = function () {
      if (_this.props.disabled) {
        return;
      }
      _this.setState({ focusedByKeyboard: false });
    };
    return _this;
  }
  Tab.prototype.componentWillMount = function () {
    invariant_1["default"](this.props.context && typeof this.props.context.addTab === 'function', 'Tab should be placed inside Tabs component');
  };
  Tab.prototype.componentDidMount = function () {
    var id = this.getId();
    if (this.props.context && typeof id === 'string') {
      this.props.context.addTab(id, this.getTabInstance);
    }
    window.addEventListener('keydown', this.handleKeyDownGlobal);
  };
  Tab.prototype.componentDidUpdate = function () {
    var context = this.props.context;
    if (!context) {
      return;
    }
    if (context.activeTab === this.props.id) {
      context.notifyUpdate();
    }
  };
  Tab.prototype.componentWillUnmount = function () {
    var id = this.getId();
    if (this.props.context && typeof id === 'string') {
      this.props.context.removeTab(id);
    }
    window.removeEventListener('keydown', this.handleKeyDownGlobal);
  };
  Tab.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Tab.prototype.getIndicators = function () {
    return {
      error: Boolean(this.props.error),
      warning: Boolean(this.props.warning),
      success: Boolean(this.props.success),
      primary: Boolean(this.props.primary),
      disabled: Boolean(this.props.disabled) };

  };
  Tab.prototype.renderMain = function () {
    var _a;
    var _b = this.props,context = _b.context,children = _b.children,disabled = _b.disabled,error = _b.error,warning = _b.warning,success = _b.success,primary = _b.primary,_c = _b.component,Component = _c === void 0 ? Tab.defaultProps.component : _c,href = _b.href,style = _b.style;
    var isActive = false;
    var isVertical = false;
    var id = this.getId();
    if (context && typeof id === 'string') {
      isActive = context.activeTab === this.getId();
      isVertical = context.vertical;
    }
    return React.createElement(Component, { className: Emotion_1.cx((_a = {},
      _a[Tab_module_less_1["default"].root] = true,
      _a[Tab_styles_1["default"].root(this.theme)] = true,
      _a[Tab_module_less_1["default"].vertical] = !!isVertical,
      _a[Tab_styles_1["default"].vertical(this.theme)] = !!isVertical,
      _a[Tab_styles_1["default"].primary(this.theme)] = !!primary,
      _a[Tab_styles_1["default"].success(this.theme)] = !!success,
      _a[Tab_styles_1["default"].warning(this.theme)] = !!warning,
      _a[Tab_styles_1["default"].error(this.theme)] = !!error,
      _a[Tab_module_less_1["default"].active] = !!isActive,
      _a[Tab_module_less_1["default"].disabled] = !!disabled,
      _a[Tab_styles_1["default"].disabled(this.theme)] = !!disabled,
      _a)), onBlur: this.handleBlur, onClick: this.switchTab, onMouseDown: this.handleMouseDown, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, tabIndex: disabled ? -1 : 0, ref: utils_1.isFunctionalComponent(Component) ? null : this.refTabComponent, href: href, style: style },
    children,
    this.state.focusedByKeyboard && React.createElement("div", { className: Emotion_1.cx(Tab_module_less_1["default"].focus, Tab_styles_1["default"].focus(this.theme)) }));
  };
  Tab.__KONTUR_REACT_UI__ = 'Tab';
  Tab.propTypes = {
    children: PropTypes.node,
    component: PropTypes.any,
    disabled: PropTypes.bool,
    href: PropTypes.string.isRequired,
    id: PropTypes.string.isRequired,
    onClick: PropTypes.func,
    onKeyDown: PropTypes.func,
    context: PropTypes.shape({
      vertical: PropTypes.bool.isRequired,
      activeTab: PropTypes.string.isRequired,
      getTab: PropTypes.func.isRequired,
      addTab: PropTypes.func.isRequired,
      removeTab: PropTypes.func.isRequired,
      notifyUpdate: PropTypes.func.isRequired,
      switchTab: PropTypes.func.isRequired,
      shiftFocus: PropTypes.func.isRequired }) };


  Tab.defaultProps = {
    component: 'a',
    href: 'javascript:' };

  return Tab;
}(React.Component);
exports.Tab = Tab;
exports.TabWithContext = utils_1.withContext(TabsContext_1.TabsContext.Consumer)(Tab);
exports["default"] = exports.TabWithContext;