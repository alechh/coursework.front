import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Nullable } from '../../typings/utility-types';
import { FocusEventType, MouseEventType } from '../../typings/event-types';
export declare type PopupPosition = 'top left' | 'top center' | 'top right' | 'right top' | 'right middle' | 'right bottom' | 'bottom left' | 'bottom center' | 'bottom right' | 'left top' | 'left middle' | 'left bottom';
export declare const PopupPositions: PopupPosition[];
export interface PopupHandlerProps {
    onMouseEnter?: (event: MouseEventType) => void;
    onMouseLeave?: (event: MouseEventType) => void;
    onClick?: (event: MouseEventType) => void;
    onFocus?: (event: FocusEventType) => void;
    onBlur?: (event: FocusEventType) => void;
    onOpen?: () => void;
}
export interface PopupProps extends PopupHandlerProps {
    anchorElement: React.ReactNode | HTMLElement;
    backgroundColor?: React.CSSProperties['backgroundColor'];
    borderColor?: React.CSSProperties['borderColor'];
    children: React.ReactNode | (() => React.ReactNode);
    hasPin: boolean;
    hasShadow: boolean;
    disableAnimations: boolean;
    margin: number;
    maxWidth?: number | string;
    opened: boolean;
    pinOffset: number;
    pinSize: number;
    popupOffset: number;
    positions: PopupPosition[];
    useWrapper: boolean;
    ignoreHover: boolean;
}
interface PopupLocation {
    coordinates: {
        left: number;
        top: number;
    };
    position: PopupPosition;
}
export interface PopupState {
    location: Nullable<PopupLocation>;
}
export default class Popup extends React.Component<PopupProps, PopupState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        /**
         * Ссылка (ref) на элемент или React компонент, для которого рисуется попап
         */
        anchorElement: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        /**
         * Фон попапа и пина
         */
        backgroundColor: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        /**
         * Показывать ли пин
         */
        hasPin: PropTypes.Requireable<boolean>;
        /**
         * Применять ли box-shadow на попапе. При false отключает границу на пине
         */
        hasShadow: PropTypes.Requireable<boolean>;
        /**
         * Отступ попапа от элемента
         */
        margin: PropTypes.Requireable<number>;
        /**
         * Показан или скрыт попап
         */
        opened: PropTypes.Requireable<boolean>;
        /**
         * Смещение пина от края попапа. Край задаётся в пропе position вторым словом
         */
        pinOffset: PropTypes.Requireable<number>;
        /**
         * Сторона пина без учёта границы.
         * Пин представляет собой равносторонний треугольник, высота от попапа
         * до "носика" пина будет соответствовать формуле (size* √3)/2
         */
        pinSize: PropTypes.Requireable<number>;
        /**
         * смещение попапа относительно родительского элемента
         */
        popupOffset: PropTypes.Requireable<number>;
        /**
         * С какой стороны показывать попап и край попапа,
         * на котором будет отображаться пин
         */
        positions: PropTypes.Requireable<any[]>;
        /**
         * Игнорировать ли события hover/click
         */
        ignoreHover: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        margin: number;
        popupOffset: number;
        pinSize: number;
        pinOffset: number;
        hasPin: boolean;
        hasShadow: boolean;
        disableAnimations: boolean;
        useWrapper: boolean;
        ignoreHover: boolean;
    };
    state: PopupState;
    private theme;
    private layoutEventsToken;
    private locationUpdateId;
    private lastPopupElement;
    private anchorElement;
    private anchorInstance;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: Readonly<PopupProps>): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private refAnchorElement;
    private extractElement;
    private updateAnchorElement;
    private addEventListeners;
    private removeEventListeners;
    private handleMouseEnter;
    private handleMouseLeave;
    private handleClick;
    private handleFocus;
    private handleBlur;
    private renderContent;
    private resetLocation;
    private renderChildren;
    private refPopupElement;
    private renderPin;
    private handleLayoutEvent;
    private handleDidUpdate;
    private delayUpdateLocation;
    private cancelDelayedUpdateLocation;
    private updateLocation;
    private locationEquals;
    private getLocation;
    private getPinnedPopupOffset;
    private getCoordinates;
    private getHorizontalPosition;
    private getVerticalPosition;
}
export {};
