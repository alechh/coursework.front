{"version":3,"sources":["dateParser.js"],"names":["str","withCorrection","Date","datePartsRegExp","parts","replace","match","date","month","year","parseInt","now","isNaN","getUTCMonth","getUTCFullYear","dateObj","UTC","getUTCDate"],"mappings":";AACe,kBAASA,GAAT,EAA2CC,cAA3C,EAAkF,KAAvCA,cAAuC,cAAvCA,cAAuC,GAAb,IAAa;AAC/F,MAAID,GAAG,IAAI,IAAX,EAAiB;AACf,WAAOA,GAAP;AACD;AACD,MAAIA,GAAG,YAAYE,IAAnB,EAAyB;AACvB,WAAOF,GAAP;AACD;AACD,MAAMG,eAAe,GAAG,uCAAxB;AACA,MAAMC,KAAK,GAAGJ,GAAG,CAACK,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,EAAsBC,KAAtB,CAA4BH,eAA5B,CAAd;;AAEA,MAAIC,KAAJ,EAAW;AACFG,IAAAA,IADE,GACmBH,KADnB,IACII,KADJ,GACmBJ,KADnB,IACWK,IADX,GACmBL,KADnB;;AAGTK,IAAAA,IAAI,GAAGC,QAAQ,CAACD,IAAD,EAAO,EAAP,CAAf;AACAD,IAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAA9B;AACAD,IAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAD,EAAO,EAAP,CAAf;;AAEA,QAAIN,cAAJ,EAAoB;AAClB,UAAMU,GAAG,GAAG,IAAIT,IAAJ,EAAZ;AACA,UAAIU,KAAK,CAACJ,KAAD,CAAT,EAAkB;AAChBA,QAAAA,KAAK,GAAGG,GAAG,CAACE,WAAJ,EAAR;AACD;AACD,UAAID,KAAK,CAACH,IAAD,CAAT,EAAiB;AACfA,QAAAA,IAAI,GAAGE,GAAG,CAACG,cAAJ,EAAP;AACD;;AAED;AACA,UAAIL,IAAI,GAAG,EAAX,EAAe;AACb;AACAA,QAAAA,IAAI,IAAI,IAAR;AACD,OAHD,MAGO,IAAIA,IAAI,GAAG,GAAX,EAAgB;AACrB;AACAA,QAAAA,IAAI,IAAI,IAAR;AACD;AACF;;AAED;AACA,QAAMM,OAAO,GAAG,IAAIb,IAAJ,CAASA,IAAI,CAACc,GAAL,CAASP,IAAT,EAAeD,KAAf,EAAsBD,IAAtB,CAAT,CAAhB;AACA,QAAIQ,OAAO,CAACD,cAAR,OAA6BL,IAA7B,IAAqCM,OAAO,CAACF,WAAR,OAA0BL,KAA/D,IAAwEO,OAAO,CAACE,UAAR,OAAyBV,IAArG,EAA2G;AACzG,aAAOQ,OAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["// @flow\r\nexport default function(str: string | Date | null | void, withCorrection: boolean = true): ?Date {\r\n  if (str == null) {\r\n    return str;\r\n  }\r\n  if (str instanceof Date) {\r\n    return str;\r\n  }\r\n  const datePartsRegExp = /^(\\d{1,2})\\.?(\\d{1,2})?\\.?(\\d{1,4})?$/;\r\n  const parts = str.replace(/_/g, '').match(datePartsRegExp);\r\n\r\n  if (parts) {\r\n    let [, date, month, year] = parts;\r\n\r\n    year = parseInt(year, 10);\r\n    month = parseInt(month, 10) - 1;\r\n    date = parseInt(date, 10);\r\n\r\n    if (withCorrection) {\r\n      const now = new Date();\r\n      if (isNaN(month)) {\r\n        month = now.getUTCMonth();\r\n      }\r\n      if (isNaN(year)) {\r\n        year = now.getUTCFullYear();\r\n      }\r\n\r\n      // Handle short year version\r\n      if (year < 50) {\r\n        // 20xx\r\n        year += 2000;\r\n      } else if (year < 100) {\r\n        // 19xx\r\n        year += 1900;\r\n      }\r\n    }\r\n\r\n    // IE8 does't support `Date('yyyy-mm-dd')` constructor.\r\n    const dateObj = new Date(Date.UTC(year, month, date));\r\n    if (dateObj.getUTCFullYear() === year && dateObj.getUTCMonth() === month && dateObj.getUTCDate() === date) {\r\n      return dateObj;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n"]}