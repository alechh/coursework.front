"use strict";exports.__esModule = true;exports["default"] = void 0;var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));var _CalendarModule = _interopRequireDefault(require("./Calendar.module.css"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _inheritsLoose(subClass, superClass) {subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var DAY_WIDTH = 26;
var DAY_HEIGHT = 31;
var FIRST_CELL_OFFSET = 6;
var HOLIDAYS_OFFSET = 3;var

CalendarCell = /*#__PURE__*/function (_React$Component) {_inheritsLoose(CalendarCell, _React$Component);
  function CalendarCell(props) {var _this;
    _this = _React$Component.call(this, props) || this;_defineProperty(_assertThisInitialized(_this), "pick",



















































    function (event) {
      if (event.button !== 0) {
        return;
      }

      if (_this.props.onPick) {
        _this.props.onPick(_this.props.date);
      }
    });_this._today = new Date();return _this;}var _proto = CalendarCell.prototype;_proto.render = function render() {var _classNames;var _this$props = this.props,date = _this$props.date,weekIdx = _this$props.weekIdx,offset = _this$props.offset,value = _this$props.value;var day = getDay(date);var isHolyday = date.getUTCDay() === 0 || date.getUTCDay() === 6;var y = weekIdx * DAY_HEIGHT - offset;var x = day * DAY_WIDTH + FIRST_CELL_OFFSET;var width = DAY_WIDTH;if (day === 0) {x = 0;width += FIRST_CELL_OFFSET;}if (day === 5) {width += HOLIDAYS_OFFSET;}if (day === 6) {x += HOLIDAYS_OFFSET;}var style = { left: x, top: y, width: width, height: DAY_HEIGHT };var cellClass = (0, _classnames["default"])((_classNames = {}, _classNames[_CalendarModule["default"].cell] = true, _classNames[_CalendarModule["default"].cellToday] = this._isToday(date), _classNames[_CalendarModule["default"].cellCurrent] = isSameDate(value, date), _classNames[_CalendarModule["default"].grey] = date.getUTCMonth() % 2, _classNames[_CalendarModule["default"].cellHoly] = isHolyday, _classNames));return _react["default"].createElement("span", { className: cellClass, style: style }, _react["default"].createElement("div", { className: _CalendarModule["default"].cellInner, onMouseOver: this.activate, onMouseLeave: this.deactivate, onClick: this.pick }, date.getUTCDate()));};_proto._isToday = function _isToday(date) {return isSameDate(date, this._today);};return CalendarCell;}(_react["default"].Component);exports["default"] = CalendarCell;


function isSameDate(a, b) {
  return (
    a &&
    b &&
    a.getUTCFullYear() === b.getUTCFullYear() &&
    a.getUTCMonth() === b.getUTCMonth() &&
    a.getUTCDate() === b.getUTCDate());

}

function getDay(date) {
  var day = date.getUTCDay();
  return day ? day - 1 : 6;
}