"use strict";exports.__esModule = true;exports["default"] = void 0;

var _classnames = _interopRequireDefault(require("classnames"));
var React = _interopRequireWildcard(require("react"));var _CalendarModule = _interopRequireDefault(require("./Calendar.module.css"));



var _CalendarCell = _interopRequireDefault(require("./CalendarCell"));function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { "default": obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj["default"] = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _inheritsLoose(subClass, superClass) {subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var MONTH_NAMES = [
'Январь',
'Февраль',
'Март',
'Апрель',
'Май',
'Июнь',
'Июль',
'Август',
'Сентябрь',
'Октябрь',
'Ноябрь',
'Декабрь'];

var DAY = 24 * 60 * 60 * 1000;
var WEEK = 7 * DAY;
var FIRST_WEEK_SHIFT = (new Date(0).getUTCDay() - 1) * DAY;
var DAY_HEIGHT = 31;
var CALENDAR_HEIGHT = 220;var












Calendar = /*#__PURE__*/function (_React$Component) {_inheritsLoose(Calendar, _React$Component);


  function Calendar(props, context) {var _this;
    _this = _React$Component.call(this, props, context) || this;_defineProperty(_assertThisInitialized(_this), "refRoot",











































































    function (element) {
      if (!_this.root && element) {
        element.addEventListener('wheel', _this.handleWheel, { passive: false });
      }
      if (_this.root && !element) {
        _this.root.removeEventListener('wheel', _this.handleWheel);
      }
      _this.root = element;
    });_defineProperty(_assertThisInitialized(_this), "handleWheel",








    function (event) {
      event.preventDefault();
      var deltaY = event.deltaY;
      if (event.deltaMode === 1) {
        deltaY *= DAY_HEIGHT;
      } else if (event.deltaMode === 2) {
        deltaY *= DAY_HEIGHT * 4;
      }

      var pos = _this.state.pos + deltaY;
      _this.setState({ pos: pos });

      var date = posToDate(pos);
      date.setUTCDate(date.getUTCDate() + 6);
      _this.props.onNav(date);
    });_this.state = { pos: dateToPos(props.initialDate) };return _this;}var _proto = Calendar.prototype;_proto.render = function render() {var offset = this.state.pos % DAY_HEIGHT;if (offset < 0) {offset += DAY_HEIGHT;}var from = (this.state.pos - offset) / DAY_HEIGHT * WEEK - FIRST_WEEK_SHIFT;var week = getWeek(from);var months = [];var monthStart = new Date(from);monthStart.setUTCDate(1);for (var i = 0; i < 4; ++i) {var _classNames;var monthEnd = new Date(monthStart.getTime());monthEnd.setUTCMonth(monthEnd.getUTCMonth() + 1);var y = getDayTop(week, offset, +monthStart);var height = getDayTop(week, offset, +monthEnd) - y;var style = { top: y, height: height };var monthClass = (0, _classnames["default"])((_classNames = {}, _classNames[_CalendarModule["default"].month] = true, _classNames[_CalendarModule["default"].first] = monthStart.getUTCMonth() === 0, _classNames[_CalendarModule["default"].grey] = monthStart.getUTCMonth() % 2, _classNames));var top = Math.max(0, -y);var wrapperStyle = { position: 'relative', top: top, display: top > height ? 'none' : 'block', opacity: top > height / 3 ? 0 : 1, transition: 'opacity 0.2s ease-out' };months.push(React.createElement("div", { key: +monthStart, className: monthClass, style: style }, React.createElement("div", { style: wrapperStyle }, MONTH_NAMES[monthStart.getUTCMonth()], React.createElement("div", { className: _CalendarModule["default"].year }, monthStart.getUTCFullYear()))));monthStart = monthEnd;}var cells = [];var cellCount = Math.ceil((CALENDAR_HEIGHT + offset) / DAY_HEIGHT) * 7;for (var _i = 0; _i < cellCount; ++_i) {var cur = from + _i * DAY;var curWeek = getWeek(cur);var _date = new Date(cur);var cellProps = { date: _date, weekIdx: curWeek - week, offset: offset, value: this.props.value };cells.push(React.createElement(_CalendarCell["default"], _extends({ key: cur }, cellProps, { onPick: this.props.onPick })));}return React.createElement("div", { ref: this.refRoot, className: _CalendarModule["default"].root, tabIndex: "0" }, cells, months);};_proto.moveToDate = function moveToDate(date) {var newDate = new Date(0);newDate.setUTCFullYear(date.getUTCFullYear());newDate.setUTCMonth(date.getUTCMonth());this.setState({ pos: dateToPos(newDate) });};return Calendar;}(React.Component);exports["default"] = Calendar;_defineProperty(Calendar, "__KONTUR_REACT_UI__", 'CalendarOld');


function dateToPos(date) {
  return (Math.floor((+date - FIRST_WEEK_SHIFT - DAY) / WEEK) - 1) * DAY_HEIGHT;
}

function posToDate(pos) {
  return new Date(Math.floor(pos / DAY_HEIGHT + 2) * WEEK - FIRST_WEEK_SHIFT);
}

function getWeek(time) {
  return Math.floor((FIRST_WEEK_SHIFT + time) / WEEK);
}

function getDayTop(fromWeek, offset, time) {
  return (getWeek(time) - fromWeek) * DAY_HEIGHT - offset;
}