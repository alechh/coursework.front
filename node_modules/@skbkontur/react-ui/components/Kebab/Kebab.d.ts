import * as React from 'react';
import { Nullable } from '../../typings/utility-types';
import { PopupPosition } from '../Popup';
export interface KebabProps {
    disabled?: boolean;
    /**
     * Функция вызываемая при закрытии выпадашки
     * @default () => undefined
     */
    onClose: () => void;
    /**
     * Функция вызываемая при открытии выпадашки
     * @default () => undefined
     */
    onOpen: () => void;
    size: 'small' | 'medium' | 'large';
    /**
     * Список позиций доступных для расположения выпадашки
     * Если во всех позициях выпадашка вылезает за пределы `viewport`, будет использоваться первая из этого списка
     * @default ['bottom left', 'bottom right', 'top left', 'top right']
     */
    positions: PopupPosition[];
    menuMaxHeight?: number | string;
    /**
     * Не показывать анимацию
     */
    disableAnimations: boolean;
}
export interface KebabState {
    anchor: Nullable<HTMLElement>;
    focusedByTab: boolean;
    opened: boolean;
}
export default class Kebab extends React.Component<KebabProps, KebabState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {};
    static defaultProps: {
        onOpen: () => undefined;
        onClose: () => undefined;
        positions: string[];
        size: string;
        disableAnimations: boolean;
    };
    state: {
        opened: boolean;
        focusedByTab: boolean;
        anchor: null;
    };
    private theme;
    private listener;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private renderCaption;
    private handleCaptionKeyDown;
    private handleChangeMenuState;
    private handleFocus;
    private handleBlur;
    private renderIcon;
}
