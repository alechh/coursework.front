"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = require("react-dom");
var DropdownContainer_1 = tslib_1.__importDefault(require("../DropdownContainer/DropdownContainer"));
var Input_1 = tslib_1.__importDefault(require("../Input"));
var InputLikeText_1 = tslib_1.__importDefault(require("../internal/InputLikeText"));
var RenderLayer_1 = tslib_1.__importDefault(require("../RenderLayer"));
var Spinner_1 = tslib_1.__importDefault(require("../Spinner"));
var ArrowTriangleDown_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowTriangleDown"));
var CustomComboBox_module_less_1 = tslib_1.__importDefault(require("./CustomComboBox.module.css"));
var ComboBoxMenu_1 = tslib_1.__importDefault(require("./ComboBoxMenu"));
var CustomComboBoxTypes_1 = require("./CustomComboBoxTypes");
var ComboBoxView = /** @class */function (_super) {
  tslib_1.__extends(ComboBoxView, _super);
  function ComboBoxView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.renderAddButton = function () {
      return _this.props.renderAddButton(_this.props.textValue);
    };
    _this.handleItemSelect = function (item, event) {
      event.persist();
      if (_this.props.onChange) {
        _this.props.onChange(item, event);
      }
    };
    _this.refInput = function (input) {
      if (_this.props.refInput) {
        _this.props.refInput(input);
      }
      _this.input = input;
    };
    _this.renderSpinner = function () {return React.createElement("span", { className: CustomComboBox_module_less_1["default"].spinnerWrapper },
      React.createElement(Spinner_1["default"], { type: "mini", caption: "", dimmed: true }));};
    _this.getRightIcon = function () {
      var _a = _this.props,loading = _a.loading,items = _a.items,drawArrow = _a.drawArrow;
      if (loading && items && !!items.length) {
        return _this.renderSpinner();
      }
      if (drawArrow) {
        return React.createElement("span", { className: CustomComboBox_module_less_1["default"].arrowWrapper },
        React.createElement(ArrowTriangleDown_1["default"], null));
      }
      return null;
    };
    return _this;
  }
  ComboBoxView.prototype.componentDidMount = function () {
    if (this.props.autoFocus && this.props.onFocus) {
      this.props.onFocus();
    }
  };
  ComboBoxView.prototype.componentDidUpdate = function (prevProps) {
    var _a = this,input = _a.input,props = _a.props;
    if (props.editing && !prevProps.editing && input) {
      input.focus();
    }
  };
  ComboBoxView.prototype.render = function () {
    var _this = this;
    var _a = this.props,items = _a.items,loading = _a.loading,menuAlign = _a.menuAlign,onClickOutside = _a.onClickOutside,onFocusOutside = _a.onFocusOutside,onMouseEnter = _a.onMouseEnter,onMouseLeave = _a.onMouseLeave,onMouseOver = _a.onMouseOver,opened = _a.opened,refMenu = _a.refMenu,maxMenuHeight = _a.maxMenuHeight,renderTotalCount = _a.renderTotalCount,renderItem = _a.renderItem,renderNotFound = _a.renderNotFound,repeatRequest = _a.repeatRequest,requestStatus = _a.requestStatus,totalCount = _a.totalCount,size = _a.size,width = _a.width;
    var input = this.renderInput();
    var topOffsets = {
      spinner: 6,
      arrow: 15 };

    if (size === 'medium') {
      topOffsets.spinner += 4;
      topOffsets.arrow += 4;
    }
    if (size === 'large') {
      topOffsets.spinner += 6;
      topOffsets.arrow += 6;
    }
    return React.createElement(RenderLayer_1["default"], { onClickOutside: onClickOutside, onFocusOutside: onFocusOutside, active: opened },
    React.createElement("span", { style: { width: width }, className: CustomComboBox_module_less_1["default"].root, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseOver: onMouseOver },
    input,
    opened && React.createElement(DropdownContainer_1["default"], { align: menuAlign,
      // tslint:disable-next-line:jsx-no-lambda
      getParent: function getParent() {return react_dom_1.findDOMNode(_this);}, offsetY: 1, disablePortal: this.props.disablePortal },
    React.createElement(ComboBoxMenu_1["default"], { items: items, loading: loading, maxMenuHeight: maxMenuHeight, onChange: this.handleItemSelect, opened: opened, refMenu: refMenu, renderTotalCount: renderTotalCount, renderItem: renderItem, renderNotFound: renderNotFound, renderAddButton: this.renderAddButton, repeatRequest: repeatRequest, requestStatus: requestStatus, totalCount: totalCount }))));
  };
  ComboBoxView.prototype.renderInput = function () {
    var _a = this.props,align = _a.align,borderless = _a.borderless,disabled = _a.disabled,editing = _a.editing,error = _a.error,onFocus = _a.onFocus,onInputBlur = _a.onInputBlur,onInputChange = _a.onInputChange,onInputFocus = _a.onInputFocus,onInputClick = _a.onInputClick,onInputKeyDown = _a.onInputKeyDown,placeholder = _a.placeholder,renderValue = _a.renderValue,size = _a.size,textValue = _a.textValue,value = _a.value,warning = _a.warning,refInputLikeText = _a.refInputLikeText;
    var rightIcon = this.getRightIcon();
    if (editing) {
      return React.createElement(Input_1["default"], { align: align, borderless: borderless, disabled: disabled, error: error, maxLength: this.props.maxLength, onBlur: onInputBlur, onChange: onInputChange, onFocus: onInputFocus, onClick: onInputClick, rightIcon: rightIcon, value: textValue || '', onKeyDown: onInputKeyDown, placeholder: placeholder, width: "100%", size: size, ref: this.refInput, warning: warning });
    }
    return React.createElement(InputLikeText_1["default"], { align: align, borderless: borderless, error: error, onFocus: onFocus, rightIcon: rightIcon, disabled: disabled, warning: warning, placeholder: placeholder, size: size, width: "100%", ref: refInputLikeText }, value ? renderValue(value) : null);
  };
  ComboBoxView.__KONTUR_REACT_UI__ = 'ComboBoxView';
  ComboBoxView.defaultProps = {
    renderItem: function renderItem(item) {return item;},
    renderValue: function renderValue(item) {return item;},
    renderAddButton: function renderAddButton() {return null;},
    repeatRequest: function repeatRequest() {return undefined;},
    requestStatus: CustomComboBoxTypes_1.ComboBoxRequestStatus.Unknown,
    onClickOutside: function onClickOutside() {
      /**/
    },
    onFocusOutside: function onFocusOutside() {
      /**/
    },
    size: 'small',
    width: 250 };

  return ComboBoxView;
}(React.Component);
exports["default"] = ComboBoxView;