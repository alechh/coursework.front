"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var decorators_1 = require("../LocaleProvider/decorators");
var Menu_1 = tslib_1.__importDefault(require("../Menu/Menu"));
var MenuItem_1 = tslib_1.__importDefault(require("../MenuItem/MenuItem"));
var Spinner_1 = tslib_1.__importDefault(require("../Spinner/Spinner"));
var MenuSeparator_1 = tslib_1.__importDefault(require("../MenuSeparator/MenuSeparator"));
var CustomComboBoxTypes_1 = require("./CustomComboBoxTypes");
var locale_1 = require("./locale");
var ComboBoxMenu = /** @class */function (_super) {
  tslib_1.__extends(ComboBoxMenu, _super);
  function ComboBoxMenu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.renderItem = function (item, index) {
      // NOTE this is undesireable feature, better
      // to remove it from further versions
      var _a = _this.props,renderItem = _a.renderItem,onChange = _a.onChange;
      if (typeof item === 'function' || react_1["default"].isValidElement(item)) {
        // @ts-ignore
        var element_1 = typeof item === 'function' ? item() : item;
        var props = Object.assign({
          key: index,
          onClick: function onClick(event) {return onChange(element_1.props, event);} },
        element_1.props);
        return react_1["default"].cloneElement(element_1, props);
      }
      return (
        // tslint:disable-next-line:jsx-no-lambda
        react_1["default"].createElement(MenuItem_1["default"], { onClick: function onClick(event) {return onChange(item, event);}, key: index }, function (state) {return renderItem(item, state);}));
    };
    return _this;
  }
  ComboBoxMenu.prototype.render = function () {
    var _a = this.props,opened = _a.opened,items = _a.items,totalCount = _a.totalCount,loading = _a.loading,refMenu = _a.refMenu,_b = _a.renderNotFound,renderNotFound = _b === void 0 ? function () {return notFound;} : _b,renderTotalCount = _a.renderTotalCount,maxMenuHeight = _a.maxMenuHeight,requestStatus = _a.requestStatus;
    var _c = this.locale,notFound = _c.notFound,errorNetworkButton = _c.errorNetworkButton,errorNetworkMessage = _c.errorNetworkMessage;
    if (!opened) {
      return null;
    }
    var renderAddButton = null;
    if (this.props.renderAddButton) {
      renderAddButton = this.props.renderAddButton();
    }
    if (loading && (!items || !items.length)) {
      return react_1["default"].createElement(Menu_1["default"], { ref: refMenu },
      react_1["default"].createElement(MenuItem_1["default"], { disabled: true },
      react_1["default"].createElement(Spinner_1["default"], { type: "mini", dimmed: true })));
    }
    if (items === null && requestStatus === CustomComboBoxTypes_1.ComboBoxRequestStatus.Failed) {
      return react_1["default"].createElement(Menu_1["default"], { ref: refMenu, maxHeight: maxMenuHeight },
      react_1["default"].createElement(MenuItem_1["default"], { disabled: true, key: "message" },
      react_1["default"].createElement("div", { style: { maxWidth: 300, whiteSpace: 'normal' } }, errorNetworkMessage)),
      react_1["default"].createElement(MenuItem_1["default"], { link: true, onClick: this.props.repeatRequest, key: "retry" }, errorNetworkButton));
    }
    if ((items == null || items.length === 0) && renderNotFound) {
      return react_1["default"].createElement(Menu_1["default"], { ref: refMenu }, renderAddButton ? renderAddButton : react_1["default"].createElement(MenuItem_1["default"], { disabled: true }, renderNotFound()));
    }
    var total = null;
    if (items && renderTotalCount && totalCount && items.length < totalCount) {
      total = react_1["default"].createElement(MenuItem_1["default"], { disabled: true, key: "total" },
      react_1["default"].createElement("div", { style: { fontSize: 12 } }, renderTotalCount(items.length, totalCount)));
    }
    return react_1["default"].createElement(Menu_1["default"], { ref: refMenu, maxHeight: maxMenuHeight },
    items && items.map(this.renderItem),
    total,
    renderAddButton && [react_1["default"].createElement(MenuSeparator_1["default"], { key: "separator" }), renderAddButton]);
  };
  ComboBoxMenu.__KONTUR_REACT_UI__ = 'ComboBoxMenu';
  ComboBoxMenu.defaultProps = {
    repeatRequest: function repeatRequest() {return undefined;},
    requestStatus: CustomComboBoxTypes_1.ComboBoxRequestStatus.Unknown };

  ComboBoxMenu = tslib_1.__decorate([
  decorators_1.locale('ComboBox', locale_1.CustomComboBoxLocaleHelper)],
  ComboBoxMenu);
  return ComboBoxMenu;
}(react_1.Component);
exports["default"] = ComboBoxMenu;