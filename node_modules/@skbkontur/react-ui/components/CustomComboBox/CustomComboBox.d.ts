import * as React from 'react';
import { Nullable } from '../../typings/utility-types';
import Input from '../Input';
import Menu from '../Menu/Menu';
import InputLikeText from '../internal/InputLikeText';
import { MenuItemState } from '../MenuItem';
import { ComboBoxRequestStatus } from './CustomComboBoxTypes';
export interface CustomComboBoxProps<T> {
    align?: 'left' | 'center' | 'right';
    autoFocus?: boolean;
    borderless?: boolean;
    disablePortal?: boolean;
    disabled?: boolean;
    error?: boolean;
    maxLength?: number;
    menuAlign?: 'left' | 'right';
    drawArrow?: boolean;
    searchOnFocus?: boolean;
    onChange?: (event: {
        target: {
            value: T;
        };
    }, value: T) => void;
    onInputChange?: (textValue: string) => Nullable<string> | void;
    onUnexpectedInput?: (query: string) => void | null | T;
    onFocus?: () => void;
    onBlur?: () => void;
    onMouseEnter?: (e: React.MouseEvent) => void;
    onMouseOver?: (e: React.MouseEvent) => void;
    onMouseLeave?: (e: React.MouseEvent) => void;
    onInputKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
    placeholder?: string;
    size?: 'small' | 'medium' | 'large';
    totalCount?: number;
    value?: Nullable<T>;
    warning?: boolean;
    width?: string | number;
    maxMenuHeight?: number | string;
    renderNotFound?: () => React.ReactNode;
    renderTotalCount?: (found: number, total: number) => React.ReactNode;
    renderItem: (item: T, state?: MenuItemState) => React.ReactNode;
    renderValue: (value: T) => React.ReactNode;
    renderAddButton?: (query?: string) => React.ReactNode;
    valueToString: (value: T) => string;
    itemToValue: (item: T) => string | number;
    getItems: (query: string) => Promise<T[]>;
}
export interface CustomComboBoxState<T> {
    editing: boolean;
    loading: boolean;
    opened: boolean;
    textValue: string;
    items: Nullable<T[]>;
    inputChanged: boolean;
    focused: boolean;
    repeatRequest: () => void;
    requestStatus: ComboBoxRequestStatus;
}
export declare const DELAY_BEFORE_SHOW_LOADER = 300;
export declare const LOADER_SHOW_TIME = 1000;
export declare const DefaultState: {
    inputChanged: boolean;
    editing: boolean;
    items: null;
    loading: boolean;
    opened: boolean;
    focused: boolean;
    textValue: string;
    repeatRequest: () => undefined;
    requestStatus: ComboBoxRequestStatus;
};
declare class CustomComboBox<T> extends React.PureComponent<CustomComboBoxProps<T>, CustomComboBoxState<T>> {
    static __KONTUR_REACT_UI__: string;
    state: CustomComboBoxState<T>;
    input: Nullable<Input>;
    menu: Nullable<Menu>;
    inputLikeText: Nullable<InputLikeText>;
    requestId: number;
    loaderShowDelay: Nullable<Promise<never>>;
    private focused;
    private cancelationToken;
    private reducer;
    cancelLoaderDelay: () => void;
    /**
     * @public
     */
    focus: () => void;
    /**
     * @public
     */
    selectInputText: () => void;
    /**
     * @public
     */
    blur: () => void;
    /**
     * @public
     */
    search(query?: string): Promise<void>;
    /**
     * @public
     */
    cancelSearch(): void;
    /**
     * @public
     */
    open(): void;
    /**
     * @public
     */
    close(): void;
    render(): JSX.Element;
    componentDidMount(): void;
    componentDidUpdate(prevProps: CustomComboBoxProps<T>, prevState: CustomComboBoxState<T>): void;
    /**
     * @public
     */
    reset(): void;
    private dispatch;
    private handleEffect;
    private getProps;
    private getState;
    private handleChange;
    private handleFocus;
    private handleClickOutside;
    private handleBlur;
    private handleInputBlur;
    private handleInputClick;
}
export default CustomComboBox;
