import * as React from 'react';
import CustomComboBox, { CustomComboBoxProps, CustomComboBoxState } from './CustomComboBox';
import { Nullable } from '../../typings/utility-types';
export declare type CustomComboBoxAction<T> = {
    type: 'TextClear';
} | {
    type: 'ValueChange';
    value: T;
    keepFocus: boolean;
} | {
    type: 'TextChange';
    value: string;
} | {
    type: 'KeyPress';
    event: React.KeyboardEvent;
} | {
    type: 'DidUpdate';
    prevProps: CustomComboBoxProps<T>;
    prevState: CustomComboBoxState<T>;
} | {
    type: 'Mount';
} | {
    type: 'Focus';
} | {
    type: 'InputClick';
} | {
    type: 'Blur';
} | {
    type: 'Reset';
} | {
    type: 'Open';
} | {
    type: 'Close';
} | {
    type: 'Search';
    query: string;
} | {
    type: 'RequestItems';
} | {
    type: 'ReceiveItems';
    items: T[];
} | {
    type: 'RequestFailure';
    repeatRequest: () => void;
} | {
    type: 'CancelRequest';
};
export declare type CustomComboBoxEffect<T> = (dispatch: (action: CustomComboBoxAction<T>) => void, getState: () => CustomComboBoxState<T>, getProps: () => CustomComboBoxProps<T>, getInstance: () => CustomComboBox<T>) => void;
declare type Effect = CustomComboBoxEffect<any>;
interface EffectFactory {
    Search: (query: string) => Effect;
    DebouncedSearch: Effect & {
        cancel(): void;
        flush(): void;
    };
    CancelRequest: Effect;
    Blur: Effect;
    Focus: Effect;
    Change: (value: any) => Effect;
    UnexpectedInput: (textValue: string, items: Nullable<any[]>) => Effect;
    InputChange: Effect;
    InputFocus: Effect;
    HighlightMenuItem: Effect;
    SelectMenuItem: (event: React.KeyboardEvent<HTMLElement>) => Effect;
    InputKeyDown: (event: React.KeyboardEvent<HTMLElement>) => Effect;
    MoveMenuHighlight: (direction: 'up' | 'down') => Effect;
    ResetHighlightedMenuItem: Effect;
    Reflow: Effect;
    SelectInputText: Effect;
}
export declare const Effect: EffectFactory;
export declare function reducer<T>(state: CustomComboBoxState<T>, props: CustomComboBoxProps<T>, action: CustomComboBoxAction<T>): Pick<CustomComboBoxState<T>, never> | [Pick<CustomComboBoxState<T>, never>, Array<CustomComboBoxEffect<T>>];
export {};
