"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var Emotion_1 = require("../../../lib/theming/Emotion");
var ThemeFactory_1 = tslib_1.__importDefault(require("../../../lib/theming/ThemeFactory"));
var VariableValue_1 = require("./VariableValue");
var Gapped_1 = tslib_1.__importDefault(require("../../Gapped"));
var Loader_1 = tslib_1.__importDefault(require("../../Loader/Loader"));
var styles_module_less_1 = tslib_1.__importDefault(require("./styles.module.css"));
var constants_1 = require("./constants");
var ThemeEditor = /** @class */function (_super) {
  tslib_1.__extends(ThemeEditor, _super);
  function ThemeEditor() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      groups: [],
      isLoading: true };

    _this.renderGroups = function () {
      var _a = _this.props,editingTheme = _a.editingTheme,currentTheme = _a.currentTheme,currentErrors = _a.currentErrors,onValueChange = _a.onValueChange;
      var keys = ThemeFactory_1["default"].getKeys(editingTheme);
      return React.createElement(Gapped_1["default"], { wrap: true, verticalAlign: "middle" }, _this.state.groups.map(function (i) {return React.createElement(Group, { editingTheme: editingTheme, currentTheme: currentTheme, currentErrors: currentErrors, onValueChange: onValueChange, title: i.title, variables: keys.filter(i.isCommon ?
          isCommonVariable.bind(null, _this.state.groups.reduce(prefixesReducer, [])) :
          isGroupVariable.bind(null, i.prefix)), key: i.title });}));
    };
    return _this;
  }
  ThemeEditor.prototype.render = function () {
    return this.state.isLoading ? React.createElement("div", { className: styles_module_less_1["default"].loaderWrapper },
    React.createElement(Loader_1["default"], { type: "big", active: true, className: styles_module_less_1["default"].loader })) : this.renderGroups();
  };
  ThemeEditor.prototype.componentDidMount = function () {
    var _this = this;
    this.updateTimeout = window.setTimeout(function () {
      _this.setState({ groups: constants_1.VARIABLES_GROUPS, isLoading: false });
    }, 500);
  };
  ThemeEditor.prototype.componentWillUnmount = function () {
    clearTimeout(this.updateTimeout);
  };
  return ThemeEditor;
}(React.Component);
exports.ThemeEditor = ThemeEditor;
var Group = function Group(props) {
  var editingTheme = props.editingTheme,currentTheme = props.currentTheme,currentErrors = props.currentErrors,onValueChange = props.onValueChange,title = props.title,variables = props.variables;
  var headerClassname = Emotion_1.css(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n    color: ", ";\n  "], ["\n    color: ", ";\n  "])), currentTheme.textColorMain);
  return variables.length > 0 ? React.createElement(React.Fragment, null,
  React.createElement("h2", { className: headerClassname }, title),
  React.createElement(Gapped_1["default"], { gap: 16, wrap: true, verticalAlign: "middle" }, variables.map(function (variable) {
    var value = editingTheme[variable];
    var isError = currentErrors[variable];
    return React.createElement(VariableValue_1.VariableValue, { theme: currentTheme, onChange: onValueChange, value: value, isError: isError || false, variable: variable, key: variable, baseVariables: getBaseVariables(editingTheme, variable) });
  }))) : null;
};
var isGroupVariable = function isGroupVariable(prefix, name) {
  var splitPrefix = prefix.split(' ') || [];
  for (var _i = 0, splitPrefix_1 = splitPrefix; _i < splitPrefix_1.length; _i++) {
    var item = splitPrefix_1[_i];
    if (name.startsWith(item.trim())) {
      return true;
    }
  }
  return false;
};
var isCommonVariable = function isCommonVariable(prefixes, name) {
  for (var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++) {
    var item = prefixes_1[_i];
    if (name.startsWith(item.trim())) {
      return false;
    }
  }
  return true;
};
var prefixesReducer = function prefixesReducer(acc, current) {
  var splitPrefix = current.prefix.split(' ');
  return acc.concat(splitPrefix);
};
var getBaseVariables = function getBaseVariables(theme, variable) {
  for (; theme != null; theme = Object.getPrototypeOf(theme)) {
    if (theme.hasOwnProperty(variable)) {
      var descriptor = Object.getOwnPropertyDescriptor(theme, variable);
      if (descriptor && typeof descriptor.get !== 'undefined') {
        var getterBody = descriptor.get.toString();
        var variableNameMatchArray = getterBody.match(/this\.(\w+)\b/gm) || [];
        return (variableNameMatchArray || []).map(function (v) {return v.replace(/this\./g, '');});
      }
      break;
    }
  }
  return [];
};
var templateObject_1;