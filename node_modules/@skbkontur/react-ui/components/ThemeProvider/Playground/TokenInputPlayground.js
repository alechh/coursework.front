"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable jsx-no-lambda */
var React = tslib_1.__importStar(require("react"));
var TokenInput_1 = tslib_1.__importDefault(require("../../TokenInput"));
var Token_1 = tslib_1.__importDefault(require("../../Token"));
function getItems(query) {
  return tslib_1.__awaiter(this, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
      return [2 /*return*/, Promise.resolve(['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth'].filter(function (x) {return x.toLowerCase().includes(query.toLowerCase()) || x.toString() === query;})).then(function (res) {return new Promise(function (resolve) {return setTimeout(resolve.bind(null, res), 500);});})];
    });
  });
}
var tokenColors = {
  First: {
    idle: 'grayIdle',
    active: 'grayActive' },

  Second: {
    idle: 'blueIdle',
    active: 'blueActive' },

  Third: {
    idle: 'greenIdle',
    active: 'greenActive' },

  Fourth: {
    idle: 'yellowIdle',
    active: 'yellowActive' },

  Fifth: {
    idle: 'redIdle',
    active: 'redActive' },

  Sixth: {
    idle: 'white',
    active: 'black' },

  "default": {
    idle: 'defaultIdle',
    active: 'defaultActive' } };


var TokenInputPlayground = /** @class */function (_super) {
  tslib_1.__extends(TokenInputPlayground, _super);
  function TokenInputPlayground() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = { selectedItems: ['First', 'Second'] };
    return _this;
  }
  TokenInputPlayground.prototype.render = function () {
    var _this = this;
    return React.createElement(TokenInput_1["default"], { getItems: getItems, selectedItems: this.state.selectedItems, renderToken: function renderToken(item, _a) {
        var isActive = _a.isActive,onClick = _a.onClick,onRemove = _a.onRemove;
        return React.createElement(Token_1["default"], { key: item.toString(), colors: tokenColors[item] || tokenColors["default"], isActive: isActive, onClick: onClick, onRemove: onRemove }, item);
      }, onChange: function onChange(itemsNew) {return _this.setState({ selectedItems: itemsNew });} });
  };
  return TokenInputPlayground;
}(React.Component);
exports.TokenInputPlayground = TokenInputPlayground;