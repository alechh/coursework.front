import { ThemeType } from './constants';
import { ITheme } from '../../../lib/theming/Theme';
import * as React from 'react';
interface IState {
    editorOpened: boolean;
    editingThemeItem?: IEditingThemeItem;
    themes: IThemes;
    themesErrors: IThemesErrors;
    currentTheme: PlaygroundTheme;
    currentThemeType: ThemeType;
}
interface IThemes {
    default: ITheme;
    dark: ITheme;
    flat: ITheme;
}
interface IThemesErrors {
    default: ThemeErrorsType;
    dark: ThemeErrorsType;
    flat: ThemeErrorsType;
}
interface IEditingThemeItem {
    value: ThemeType;
    label: string;
}
interface IProps {
}
interface IThemeExtension {
    backgroundMain: string;
    textColorMain: string;
}
export declare type PlaygroundTheme = ITheme & IThemeExtension;
export declare type ThemeErrorsType = {
    [key in keyof PlaygroundTheme]?: boolean;
};
export declare class ThemeProviderPlayground extends React.Component<IProps, IState> {
    private readonly editableThemesItems;
    constructor(props: IProps);
    render(): JSX.Element;
    private renderSidePage;
    private handelGetTheme;
    private handleOpen;
    private handleClose;
    private handleThemeChange;
    private handleThemeVariableChange;
    private getEditableThemesItems;
    private handleEditingThemeSwitch;
    private changeThemeVariable;
}
export {};
