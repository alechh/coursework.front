"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var Emotion_1 = require("../../../lib/theming/Emotion");
var index_1 = tslib_1.__importDefault(require("../../Input/index"));
var styles_module_less_1 = tslib_1.__importDefault(require("./styles.module.css"));
var Gapped_1 = tslib_1.__importDefault(require("../../Gapped"));
var Link_1 = tslib_1.__importDefault(require("../../Link"));
var Edit_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/Edit"));
var Delete_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/Delete"));
var Hint_1 = tslib_1.__importDefault(require("../../Hint"));
var fbemitter_1 = require("fbemitter");
var emitter = new fbemitter_1.EventEmitter();
var VariableValue = /** @class */function (_super) {
  tslib_1.__extends(VariableValue, _super);
  function VariableValue() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      value: _this.props.value,
      editing: false };

    _this.subscription = null;
    _this.inputInstance = null;
    _this.debounceTimeout = 500;
    _this.debounceInterval = undefined;
    _this.renderBaseVariableLink = function () {
      var baseVariables = _this.props.baseVariables;
      return React.createElement("div", { className: styles_module_less_1["default"].baseVariableRoot },
      _this.colorIcon(),
      React.createElement("div", { className: styles_module_less_1["default"].baseLinkWrapper },
      React.createElement(Gapped_1["default"], null,
      React.createElement("div", { style: { textAlign: 'right' } },
      React.createElement(Gapped_1["default"], { vertical: true }, baseVariables.map(function (v) {return React.createElement(BaseVariableLink, { key: v, baseVariable: v, emitClickEvent: _this.emitClickEvent });}))),
      React.createElement(Hint_1["default"], { text: 'Изменить значение' },
      React.createElement(Link_1["default"], { icon: React.createElement(Edit_1["default"], null), onClick: _this.handleEditLinkClick })))));
    };
    _this.renderInputWrapper = function () {
      return _this.state.editing ? React.createElement(Gapped_1["default"], null,
      _this.renderInput(),
      _this.renderRollbackIcon()) : _this.renderInput();
    };
    _this.inputRef = function (instance) {
      _this.inputInstance = instance;
    };
    _this.colorIcon = function () {
      return React.createElement("div", { className: styles_module_less_1["default"].colorIcon, style: { background: _this.state.value } });
    };
    _this.handleEditLinkClick = function () {
      _this.setState({
        editing: true });

    };
    _this.rollbackToBaseVariable = function () {
      _this.setState({
        editing: false,
        value: _this.props.value });

    };
    _this.emitClickEvent = function (variable) {
      emitter.emit('clicked', variable);
    };
    _this.handleChange = function (e, value) {
      _this.setState({
        value: value });

      if (_this.debounceInterval === undefined) {
        _this.debounceInterval = window.setInterval(_this.debounceHandler, _this.debounceTimeout);
      }
    };
    _this.debounceHandler = function () {
      var _a = _this.props,variable = _a.variable,onChange = _a.onChange;
      onChange(variable, _this.state.value);
      clearInterval(_this.debounceInterval);
      _this.debounceInterval = undefined;
    };
    _this.handleBlur = function () {
      _this.setState({
        editing: false });

    };
    _this.emitterEventHandler = function (name) {
      if (name === _this.props.variable && _this.inputInstance) {
        _this.inputInstance.focus();
      }
    };
    return _this;
  }
  VariableValue.prototype.render = function () {
    var _a = this.props,variable = _a.variable,theme = _a.theme,baseVariables = _a.baseVariables;
    var wrapperClassName = Emotion_1.cx(styles_module_less_1["default"].variableName, Emotion_1.css(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n        color: ", ";\n      "], ["\n        color: ", ";\n      "])), theme.textColorMain));
    return React.createElement(Gapped_1["default"], { gap: 30 },
    React.createElement("div", { className: wrapperClassName, title: variable }, variable + ": "),
    baseVariables.length > 0 && !this.state.editing ? this.renderBaseVariableLink() : this.renderInputWrapper());
  };
  VariableValue.prototype.componentDidMount = function () {
    if (!this.subscription) {
      this.subscription = emitter.addListener('clicked', this.emitterEventHandler);
    }
  };
  VariableValue.prototype.componentDidUpdate = function (prevProps) {
    if (prevProps.value !== this.props.value) {
      this.setState({ value: this.props.value });
    }
  };
  VariableValue.prototype.componentWillUnmount = function () {
    if (this.subscription) {
      this.subscription.remove();
    }
    if (this.debounceInterval !== undefined) {
      clearInterval(this.debounceInterval);
    }
  };
  VariableValue.prototype.renderInput = function () {
    return React.createElement(index_1["default"], { leftIcon: isColor(this.state.value) && this.colorIcon(), value: this.state.value, onChange: this.handleChange, onBlur: this.handleBlur, align: 'right', width: this.state.editing ? 225 : undefined, ref: this.inputRef, error: this.props.isError });
  };
  VariableValue.prototype.renderRollbackIcon = function () {
    return React.createElement(Hint_1["default"], { text: 'Вернуться к базовой переменной', pos: 'left' },
    React.createElement("div", { className: styles_module_less_1["default"].linkRoot },
    React.createElement(Link_1["default"], { icon: React.createElement(Delete_1["default"], null), onClick: this.rollbackToBaseVariable })));
  };
  return VariableValue;
}(React.Component);
exports.VariableValue = VariableValue;
var BaseVariableLink = /** @class */function (_super) {
  tslib_1.__extends(BaseVariableLink, _super);
  function BaseVariableLink() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.emitClickEvent = function () {
      _this.props.emitClickEvent(_this.props.baseVariable);
    };
    return _this;
  }
  BaseVariableLink.prototype.render = function () {
    return React.createElement(Link_1["default"], { onClick: this.emitClickEvent }, this.props.baseVariable);
  };
  return BaseVariableLink;
}(React.Component);
function isColor(color) {
  var style = new Option().style;
  style.color = color;
  return !!color && (color.startsWith('#') || color.startsWith('rgb') || color.startsWith('hsl') || style.color === color);
}
var templateObject_1;