"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var React = tslib_1.__importStar(require("react"));
var ThemeFactory_1 = tslib_1.__importDefault(require("../../../lib/theming/ThemeFactory"));
var darkTheme_1 = tslib_1.__importDefault(require("./darkTheme"));
var FlatTheme_1 = tslib_1.__importDefault(require("../../../lib/theming/themes/FlatTheme"));
var ThemeProvider_1 = tslib_1.__importDefault(require("../ThemeProvider"));
var Playground_1 = require("./Playground");
var SidePage_1 = tslib_1.__importDefault(require("../../SidePage"));
var jsStyles_1 = tslib_1.__importDefault(require("./jsStyles"));
var Gapped_1 = tslib_1.__importDefault(require("../../Gapped"));
var ComboBox_1 = tslib_1.__importDefault(require("../../ComboBox"));
var Link_1 = tslib_1.__importDefault(require("../../Link"));
var styles_module_less_1 = tslib_1.__importDefault(require("./styles.module.css"));
var ThemeEditor_1 = require("./ThemeEditor");
var ColorFunctions_1 = tslib_1.__importDefault(require("../../../lib/styles/ColorFunctions"));
var ThemeProviderPlayground = /** @class */function (_super) {
  tslib_1.__extends(ThemeProviderPlayground, _super);
  function ThemeProviderPlayground(props) {
    var _this = _super.call(this, props) || this;
    _this.editableThemesItems = [
    { value: constants_1.ThemeType.Default, label: 'Дефолтная' },
    { value: constants_1.ThemeType.Flat, label: 'Плоская' },
    { value: constants_1.ThemeType.Dark, label: 'Темная' }];

    _this.renderSidePage = function () {
      var _a = _this.state,currentTheme = _a.currentTheme,themesErrors = _a.themesErrors,editingThemeItem = _a.editingThemeItem,themes = _a.themes;
      var themeErrors = themesErrors[editingThemeItem ? editingThemeItem.value : 'default'];
      return React.createElement(SidePage_1["default"], { disableAnimations: true, ignoreBackgroundClick: true, blockBackground: true, width: 600, onClose: _this.handleClose },
      React.createElement(SidePage_1["default"].Header, null,
      React.createElement("div", { className: jsStyles_1["default"].editorHeaderWrapper(currentTheme) },
      React.createElement(Gapped_1["default"], { wrap: true, verticalAlign: "middle" },
      React.createElement("span", null, "\u0422\u0435\u043C\u0430 \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F:"),
      React.createElement(ComboBox_1["default"], { getItems: _this.getEditableThemesItems, value: editingThemeItem, onChange: _this.handleEditingThemeSwitch }))),
      React.createElement("div", { style: { fontSize: 14, marginTop: 8 } },
      React.createElement(Link_1["default"], { onClick: _this.handelGetTheme }, "\u0412\u044B\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043C\u0443 \u0432 \u043A\u043E\u043D\u0441\u043E\u043B\u044C"))),
      React.createElement(SidePage_1["default"].Body, null,
      React.createElement("div", { className: styles_module_less_1["default"].sidePageBody },
      React.createElement(ThemeEditor_1.ThemeEditor, { editingTheme: themes[editingThemeItem.value], currentTheme: currentTheme, currentErrors: themeErrors, onValueChange: _this.handleThemeVariableChange }))));
    };
    _this.handelGetTheme = function () {
      var currentTheme = _this.state.currentTheme;
      var defaultTheme = ThemeFactory_1["default"].getDefaultTheme();
      var themeObject = {};
      ThemeFactory_1["default"].getKeys(currentTheme).forEach(function (key) {
        var descriptor = Object.getOwnPropertyDescriptor(currentTheme, key);
        if (descriptor && !descriptor.get && defaultTheme[key] && currentTheme[key] !== defaultTheme[key]) {
          themeObject[key] = currentTheme[key];
        }
      });
      // tslint:disable-next-line:no-console
      console.log(JSON.stringify(themeObject));
    };
    _this.handleOpen = function () {
      _this.setState(function (state) {return {
          editorOpened: true,
          editingThemeItem: _this.editableThemesItems.find(function (i) {return i.value === state.currentThemeType;}) };
      });
    };
    _this.handleClose = function () {
      _this.setState({
        editorOpened: false });

    };
    _this.handleThemeChange = function (ev, value) {
      var themeType = value;
      _this.setState({
        currentThemeType: themeType,
        currentTheme: _this.state.themes[themeType] });

    };
    _this.handleThemeVariableChange = function (variable, value) {
      var _a = _this.state,editingThemeItem = _a.editingThemeItem,currentTheme = _a.currentTheme,themes = _a.themes,themesErrors = _a.themesErrors;
      var editingThemeType = editingThemeItem.value;
      var theme = themes[editingThemeType];
      var currentValue = theme[variable];
      var canSetVariable = true;
      if (ColorFunctions_1["default"].isValid(currentValue)) {
        canSetVariable = ColorFunctions_1["default"].isValid(value);
        themesErrors[editingThemeType][variable] = !canSetVariable;
      }
      var nextThemeErrors = tslib_1.__assign({}, themesErrors);
      nextThemeErrors[editingThemeType][variable] = !canSetVariable;
      var stateUpdate = { themes: themes, currentTheme: currentTheme, themesErrors: nextThemeErrors };
      if (canSetVariable) {
        var result = _this.changeThemeVariable(theme, variable, value);
        stateUpdate.themes[editingThemeType] = result;
        if (_this.state.currentThemeType === editingThemeType) {
          stateUpdate.currentTheme = result;
        }
      }
      _this.setState(stateUpdate);
    };
    _this.getEditableThemesItems = function (query) {
      return Promise.resolve(_this.editableThemesItems.filter(function (i) {return i.label.toLowerCase().includes(query.toLowerCase());}));
    };
    _this.handleEditingThemeSwitch = function (_, item) {
      _this.setState({ editingThemeItem: item });
    };
    _this.changeThemeVariable = function (theme, variableName, variableValue) {
      var result = {};
      ThemeFactory_1["default"].getKeys(theme).forEach(function (key) {
        var descriptor = findPropertyDescriptor(theme, key);
        descriptor.enumerable = true;
        descriptor.configurable = true;
        if (key === variableName) {
          delete descriptor.get;
          delete descriptor.set;
          descriptor.value = variableValue;
        }
        Object.defineProperty(result, key, descriptor);
      });
      return Object.freeze(result);
    };
    _this.state = {
      currentTheme: ThemeFactory_1["default"].getDefaultTheme(),
      currentThemeType: constants_1.ThemeType.Default,
      editorOpened: false,
      themes: {
        "default": ThemeFactory_1["default"].getDefaultTheme(),
        dark: ThemeFactory_1["default"].create(darkTheme_1["default"]),
        flat: ThemeFactory_1["default"].create(FlatTheme_1["default"]) },

      themesErrors: {
        "default": {},
        dark: {},
        flat: {} } };


    return _this;
  }
  ThemeProviderPlayground.prototype.render = function () {
    var _a = this.state,currentTheme = _a.currentTheme,editorOpened = _a.editorOpened,currentThemeType = _a.currentThemeType;
    return React.createElement(ThemeProvider_1["default"], { value: currentTheme },
    editorOpened && this.renderSidePage(),
    React.createElement(Playground_1.Playground, { onThemeChange: this.handleThemeChange, currentThemeType: currentThemeType, onEditLinkClick: this.handleOpen }));
  };
  return ThemeProviderPlayground;
}(React.Component);
exports.ThemeProviderPlayground = ThemeProviderPlayground;
function findPropertyDescriptor(theme, propName) {
  for (; theme != null; theme = Object.getPrototypeOf(theme)) {
    if (theme.hasOwnProperty(propName)) {
      return Object.getOwnPropertyDescriptor(theme, propName) || {};
    }
  }
  return {};
}