"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var Ok_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/Ok"));
var Square_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/Square"));
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Checkbox_styles_1 = tslib_1.__importStar(require("./Checkbox.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var utils_1 = require("../../lib/utils");
/**
                                           * Все свойства, кроме перечисленных, `className` и `style` передаются в `input`.
                                           */
var Checkbox = /** @class */function (_super) {
  tslib_1.__extends(Checkbox, _super);
  function Checkbox() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      focusedByTab: false,
      indeterminate: _this.props.initialIndeterminate || false };

    _this.componentDidMount = function () {
      if (_this.state.indeterminate && _this.input) {
        _this.input.indeterminate = true;
      }
    };
    /**
        * Установить промежуточное значение
        * @public
        */
    _this.setIndeterminate = function () {
      _this.setState({
        indeterminate: true });

      if (_this.input) {
        _this.input.indeterminate = true;
      }
    };
    /**
        * Сбросить промежуточное значение
        * @public
        */
    _this.resetIndeterminate = function () {
      _this.setState({
        indeterminate: false });

      if (_this.input) {
        _this.input.indeterminate = false;
      }
    };
    _this.handleFocus = function (e) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (tabListener_1["default"].isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
      }
    };
    _this.handleBlur = function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
      _this.setState({ focusedByTab: false });
    };
    _this.inputRef = function (ref) {
      _this.input = ref;
    };
    _this.handleChange = function (event) {
      var checked = event.currentTarget.checked;
      if (_this.props.onChange) {
        _this.props.onChange(event, checked);
      }
      _this.resetIndeterminate();
    };
    return _this;
  }
  Checkbox.prototype.componentWillReceiveProps = function (nextProps) {
    if (nextProps.checked !== this.props.checked) {
      this.resetIndeterminate();
    }
  };
  Checkbox.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  /**
      * @public
      */
  Checkbox.prototype.focus = function () {
    tabListener_1["default"].isTabPressed = true;
    if (this.input) {
      this.input.focus();
    }
  };
  /**
      * @public
      */
  Checkbox.prototype.blur = function () {
    if (this.input) {
      this.input.blur();
    }
  };
  Checkbox.prototype.renderMain = function () {
    var _a, _b, _c;
    var props = this.props;
    var children = props.children,error = props.error,warning = props.warning,onMouseEnter = props.onMouseEnter,onMouseLeave = props.onMouseLeave,onMouseOver = props.onMouseOver,onChange = props.onChange,style = props.style,className = props.className,type = props.type,initialIndeterminate = props.initialIndeterminate,rest = tslib_1.__rest(props, ["children", "error", "warning", "onMouseEnter", "onMouseLeave", "onMouseOver", "onChange", "style", "className", "type", "initialIndeterminate"]);
    var isIndeterminate = this.state.indeterminate;
    var rootClass = Emotion_1.cx(Checkbox_styles_1.classes.root, Checkbox_styles_1["default"].root(this.theme), (_a = {},
    _a[Checkbox_styles_1.classes.disabled] = !!props.disabled,
    _a[Checkbox_styles_1["default"].disabled(this.theme)] = !!props.disabled,
    _a[Checkbox_styles_1["default"].checked(this.theme)] = !!props.checked,
    _a[Checkbox_styles_1["default"].indeterminate(this.theme)] = isIndeterminate,
    _a[Checkbox_styles_1["default"].focus(this.theme)] = this.state.focusedByTab,
    _a[Checkbox_styles_1["default"].warning(this.theme)] = !!props.warning,
    _a[Checkbox_styles_1["default"].error(this.theme)] = !!props.error,
    _a));
    var inputProps = tslib_1.__assign({}, rest, { type: 'checkbox', className: Checkbox_styles_1["default"].input(this.theme), onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, ref: this.inputRef });
    var caption = null;
    if (children) {
      var captionClass = Emotion_1.cx(Checkbox_styles_1["default"].caption(this.theme), (_b = {},
      _b[Checkbox_styles_1["default"].captionIE11()] = utils_1.isIE11 || utils_1.isEdge,
      _b));
      caption = React.createElement("span", { className: captionClass }, children);
    }
    var iconClass = Emotion_1.cx((_c = {},
    _c[Checkbox_styles_1["default"].iconUnchecked()] = !props.checked && !isIndeterminate,
    _c[Checkbox_styles_1["default"].iconFixBaseline()] = utils_1.isFirefox || utils_1.isIE11 || utils_1.isEdge,
    _c));
    var box = React.createElement("span", { className: Emotion_1.cx(Checkbox_styles_1.classes.box, Checkbox_styles_1["default"].box(this.theme)) }, isIndeterminate && React.createElement(Square_1["default"], { className: iconClass }) || React.createElement(Ok_1["default"], { className: iconClass }));
    return React.createElement("label", { className: rootClass, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseOver: onMouseOver },
    React.createElement("input", tslib_1.__assign({}, inputProps)),
    box,
    caption);
  };
  Checkbox.__KONTUR_REACT_UI__ = 'Checkbox';
  Checkbox.propTypes = {
    checked: PropTypes.bool,
    disabled: PropTypes.bool,
    error: PropTypes.bool,
    warning: PropTypes.bool,
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMouseOver: PropTypes.func };

  return Checkbox;
}(React.Component);
exports["default"] = Checkbox;