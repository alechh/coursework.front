import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Override } from '../../typings/utility-types';
export declare type CheckboxProps = Override<React.InputHTMLAttributes<HTMLInputElement>, {
    /** Контент `label` */
    children?: React.ReactNode;
    /** Состояние ошибки */
    error?: boolean;
    /** Состояние Предупреждения */
    warning?: boolean;
    /** Вызывается на label */
    onMouseEnter?: React.MouseEventHandler<HTMLLabelElement>;
    /** Вызывается на label */
    onMouseLeave?: React.MouseEventHandler<HTMLLabelElement>;
    /** Вызывается на label */
    onMouseOver?: React.MouseEventHandler<HTMLLabelElement>;
    /** onChange */
    onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: boolean) => void;
    /** onBlur */
    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /** Состояние частичного выделения */
    initialIndeterminate?: boolean;
}>;
export interface CheckboxState {
    focusedByTab: boolean;
    indeterminate: boolean;
}
/**
 * Все свойства, кроме перечисленных, `className` и `style` передаются в `input`.
 */
declare class Checkbox extends React.Component<CheckboxProps, CheckboxState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        warning: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
    };
    state: {
        focusedByTab: boolean;
        indeterminate: boolean;
    };
    private theme;
    private input;
    componentDidMount: () => void;
    componentWillReceiveProps(nextProps: CheckboxProps): void;
    render(): JSX.Element;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    /**
     * Установить промежуточное значение
     * @public
     */
    setIndeterminate: () => void;
    /**
     * Сбросить промежуточное значение
     * @public
     */
    resetIndeterminate: () => void;
    private renderMain;
    private handleFocus;
    private handleBlur;
    private inputRef;
    private handleChange;
}
export default Checkbox;
