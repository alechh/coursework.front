"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var constants_1 = require("../../lib/date/constants");
var InternalDateValidator_1 = tslib_1.__importDefault(require("../../lib/date/InternalDateValidator"));
var types_1 = require("../../lib/date/types");
var DateFragmentsView_module_less_1 = tslib_1.__importDefault(require("./DateFragmentsView.module.css"));
var SelectionHelpers_1 = require("./helpers/SelectionHelpers");
var Emotion_1 = require("../../lib/theming/Emotion");
var DateFragmentsView_styles_1 = tslib_1.__importDefault(require("./DateFragmentsView.styles"));
var ThemeConsumer_1 = tslib_1.__importDefault(require("../ThemeConsumer"));
var DateFragmentsView = /** @class */function (_super) {
  tslib_1.__extends(DateFragmentsView, _super);
  function DateFragmentsView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DateFragmentsView.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1["default"], null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  DateFragmentsView.prototype.renderMain = function () {
    var _this = this;
    return React.createElement("div", { ref: this.props.nodeRef, className: Emotion_1.cx(DateFragmentsView_module_less_1["default"].root, DateFragmentsView_styles_1["default"].root(this.theme)) }, this.props.fragments.map(function (fragment, index) {
      return fragment.type === types_1.InternalDateComponentType.Separator ?
      _this.renderSeparator(fragment, index) :
      _this.renderDateComponent(fragment, index);
    }));
  };
  DateFragmentsView.prototype.renderSeparator = function (fragment, index) {
    var _a;
    var separatorClassName = Emotion_1.cx(DateFragmentsView_styles_1["default"].delimiter(this.theme), (_a = {},
    _a[DateFragmentsView_module_less_1["default"].filled] = this.props.fragments[index + 1].value !== null,
    _a));
    return React.createElement("span", { key: index, className: separatorClassName }, fragment.value);
  };
  DateFragmentsView.prototype.renderDateComponent = function (fragment, index) {
    var _a = this.props,inputMode = _a.inputMode,onSelectDateComponent = _a.onSelectDateComponent,selected = _a.selected;
    var type = fragment.type,value = fragment.value,length = fragment.length,valueWithPad = fragment.valueWithPad;
    var valueMask = value === null || selected === type && inputMode ? value : valueWithPad || value;
    var lengthMask = InternalDateValidator_1["default"].testParseToNumber(valueMask) ?
    Math.max(length - valueMask.toString().length, 0) :
    length;
    var handleMouseUp = function handleMouseUp(e) {return onSelectDateComponent(type, e);};
    return React.createElement("span", { key: index, onMouseUp: handleMouseUp, onMouseDown: SelectionHelpers_1.removeAllSelections },
    valueMask,
    React.createElement("span", { className: DateFragmentsView_styles_1["default"].mask(this.theme) }, constants_1.CHAR_MASK.repeat(lengthMask)));
  };
  return DateFragmentsView;
}(React.Component);
exports.DateFragmentsView = DateFragmentsView;