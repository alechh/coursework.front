import * as React from 'react';
import * as PropTypes from 'prop-types';
import MenuHeader from '../MenuHeader/MenuHeader';
import MenuItem from '../MenuItem/MenuItem';
import MenuSeparator from '../MenuSeparator/MenuSeparator';
import { ButtonUse, ButtonSize } from '../Button';
export interface DropdownProps {
    /**
     * Подпись на кнопке.
     */
    caption: React.ReactNode;
    /**
     * Иконка слева от текста кнопки
     */
    icon?: React.ReactElement<any>;
    width?: React.CSSProperties['width'];
    /** @ignore */
    _renderButton?: (params: any) => JSX.Element;
    /**
     * Отключает использование портала
     */
    disablePortal?: boolean;
    /**
     * Визуально отключает Dropdown
     */
    disabled?: boolean;
    /**
     * Визуально показать наличие ошибки.
     */
    error?: boolean;
    /**
     * Визуально показать наличие предупреждения.
     */
    warning?: boolean;
    maxMenuHeight?: number;
    menuAlign?: 'left' | 'right';
    menuWidth?: number | string;
    size?: ButtonSize;
    /**
     * Смотри Button.
     */
    use?: ButtonUse;
    /**
     * Вызывается при закрытии меню.
     */
    onClose?: () => void;
    /**
     * Вызывается при открытии меню.
     */
    onOpen?: () => void;
    onMouseEnter?: (event: React.MouseEvent<HTMLElement>) => void;
    onMouseLeave?: (event: React.MouseEvent<HTMLElement>) => void;
    onMouseOver?: (event: React.MouseEvent<HTMLElement>) => void;
}
/**
 * Выпадающее меню.
 */
export default class Dropdown extends React.Component<DropdownProps> {
    static __KONTUR_REACT_UI__: string;
    static Header: typeof MenuHeader;
    static MenuItem: typeof MenuItem;
    static Separator: typeof MenuSeparator;
    static propTypes: {
        /**
         * Подпись на кнопке.
         */
        caption: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        /**
         * Отключает использование портала
         */
        disablePortal: PropTypes.Requireable<boolean>;
        /**
         * Визуально отключает Dropdown
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Визуально показать наличие ошибки.
         */
        error: PropTypes.Requireable<boolean>;
        /**
         * Иконка слева от текста кнопки
         */
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        maxMenuHeight: PropTypes.Requireable<number>;
        menuAlign: PropTypes.Requireable<string>;
        menuWidth: PropTypes.Requireable<string | number>;
        size: PropTypes.Requireable<string>;
        /**
         * Смотри Button.
         */
        use: PropTypes.Requireable<any>;
        /**
         * Визуально показать наличие предупреждения.
         */
        warning: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<string | number>;
        /**
         * Вызывается при закрытии меню.
         */
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Вызывается при открытии меню.
         */
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    };
    private _select;
    render(): JSX.Element;
    /**
     * @public
     */
    open(): void;
    /**
     * @public
     */
    close(): void;
    private _refSelect;
}
