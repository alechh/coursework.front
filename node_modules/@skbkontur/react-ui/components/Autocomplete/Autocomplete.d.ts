import * as React from 'react';
import * as PropTypes from 'prop-types';
import { InputProps } from '../Input';
import { Nullable } from '../../typings/utility-types';
export interface AutocompleteProps extends InputProps {
    /** Функция отрисовки элемента меню */
    renderItem: (item: string) => React.ReactNode;
    /** Промис, резолвящий элементы меню */
    source?: string[] | ((patter: string) => Promise<string[]>);
    /** Отключает использование портала */
    disablePortal: boolean;
    /** Отрисовка тени у выпадающего меню */
    hasShadow: boolean;
    /** Выравнивание выпадающего меню */
    menuAlign: 'left' | 'right';
    /** Максимальная высота меню */
    menuMaxHeight: number | string;
    /** Ширина меню */
    menuWidth?: number | string;
    /** Отключить скролл окна, когда меню открыто */
    preventWindowScroll: boolean;
    /** onChange */
    onChange: (event: {
        target: {
            value: string;
        };
    }, value: string) => void;
    /** onBlur */
    onBlur?: () => void;
    /** Размер инпута */
    size: InputProps['size'];
    /** value */
    value: string;
}
export interface AutocomplpeteState {
    items: Nullable<string[]>;
    selected: number;
}
/**
 * Стандартный инпут с подсказками.
 *
 * Все свойства передаются во внутренний *Input*.
 */
declare class Autocomplete extends React.Component<AutocompleteProps, AutocomplpeteState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        /**
         * Функция для отрисовки элемента в выпадающем списке. Единственный аргумент
         * — *item*.
         */
        renderItem: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Если передан массив, то совпадения ищутся по этому массиву.
         *
         * Если передается функция, то она должна возвращать thenable, который
         * резолвится уже отфильтрованным массивом. Возвращенный thenable может
         * иметь метод cancel, который будет вызван при отмене поиска (пользователь
         * изменил строку поиска, автокомплит потерял фокус).
         * ```
         * function(pattern) {
         *   return service.findAll(pattern);
         * }
         * ```
         */
        source: PropTypes.Requireable<any[] | ((...args: any[]) => any)>;
    };
    static defaultProps: {
        renderItem: typeof renderItem;
        size: string;
        disablePortal: boolean;
        hasShadow: boolean;
        menuMaxHeight: number;
        menuAlign: string;
        preventWindowScroll: boolean;
    };
    state: AutocomplpeteState;
    private opened;
    private input;
    private menu;
    private focused;
    private requestId;
    private getProps;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    componentDidUpdate(prevProps: AutocompleteProps): void;
    render(): JSX.Element;
    private renderMenu;
    private handleChange;
    private handleFocus;
    private handleBlur;
    private handleClickOutside;
    private handleKeyDown;
    private handleMenuItemClick;
    private getAnchor;
    private handleItemClick;
    private choose;
    private updateItems;
    private fireChange;
    private refInput;
    private refMenu;
}
declare function renderItem(item: any): any;
export default Autocomplete;
