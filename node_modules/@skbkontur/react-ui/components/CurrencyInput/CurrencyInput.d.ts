import * as React from 'react';
import * as PropTypes from 'prop-types';
import { InputProps } from '../Input';
import { Selection } from './SelectionHelper';
import { Nullable, Override } from '../../typings/utility-types';
export declare type CurrencyInputProps = Override<InputProps, {
    /** Значение */
    value: Nullable<number>;
    /** Убрать лишние нули после запятой */
    hideTrailingZeros: boolean;
    /** Кол-во цифр после зяпятой */
    fractionDigits?: Nullable<number>;
    /** Отрицательные значения */
    signed?: boolean;
    /**
     * Допустимое кол-во цифр целой части.
     * Если передан **0**, или `fractionDigits=15`, то и в целой части допускается только **0**.
     */
    integerDigits?: Nullable<number>;
    /** onChange */
    onChange: (e: {
        target: {
            value: Nullable<number>;
        };
    }, value: Nullable<number>) => void;
    /** onSubmit */
    onSubmit?: () => void;
}>;
export interface CurrencyInputState {
    formatted: string;
    selection: Selection;
    focused: boolean;
}
/**
 * Поле для денежных сумм (и других числовых значений).
 * Принимает любые свойства `Input`.
 *
 * Максимальная длина числа - **15 цифр** (с десятичным разделителем в любом месте).
 * <br/>
 * Если `fractionDigits=15`, то в целой части допускается **0**.
 */
export default class CurrencyInput extends React.Component<CurrencyInputProps, CurrencyInputState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        align: PropTypes.Requireable<string>;
        autoFocus: PropTypes.Requireable<boolean>;
        borderless: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        fractionDigits: PropTypes.Requireable<number>;
        hideTrailingZeros: PropTypes.Requireable<boolean>;
        leftIcon: PropTypes.Requireable<PropTypes.ReactElementLike>;
        placeholder: PropTypes.Requireable<string>;
        signed: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<number>;
        warning: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<string | number>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        align: string;
        fractionDigits: number;
        hideTrailingZeros: boolean;
        value: null;
    };
    state: CurrencyInputState;
    private input;
    private tempSelectionForOnChange;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: CurrencyInputProps): void;
    componentDidUpdate(): void;
    render(): JSX.Element;
    /**
     * @public
     */
    focus: () => void;
    /**
     * @public
     */
    blur: () => void;
    private getState;
    private handleMouseUp;
    private handleKeyDown;
    private getSelection;
    private moveCursor;
    private extendSelection;
    private inputValue;
    private getOnChangeDelta;
    private handleChange;
    private handlePaste;
    private handleCopy;
    private handleCut;
    private handleFocus;
    private handleBlur;
    private refInput;
}
