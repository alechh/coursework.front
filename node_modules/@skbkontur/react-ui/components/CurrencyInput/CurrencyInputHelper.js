"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var CurrencyHelper_1 = tslib_1.__importDefault(require("./CurrencyHelper"));
var CursorHelper_1 = tslib_1.__importDefault(require("./CursorHelper"));
var CurrencyInputHelper = /** @class */function () {
  function CurrencyInputHelper() {
  }
  CurrencyInputHelper.moveCursor = function (value, selection, step) {
    return selection.start === selection.end ?
    CursorHelper_1["default"].calculatePosition(CurrencyHelper_1["default"].getInfo(value).cursorMap, selection.start, step) :
    step < 0 ?
    selection.start :
    selection.end;
  };
  CurrencyInputHelper.extendSelection = function (value, selection, step) {
    var info = CurrencyHelper_1["default"].getInfo(value);
    return CursorHelper_1["default"].extendSelection(info.cursorMap, selection, step);
  };
  CurrencyInputHelper.normalizeSelection = function (value, selection) {
    var info = CurrencyHelper_1["default"].getInfo(value);
    return CursorHelper_1["default"].normalizeSelection(info.cursorMap, selection);
  };
  CurrencyInputHelper.safeInsert = function (value, start, end, input, options) {
    if (input && start === 0 && end === value.length) {
      var extracted = CurrencyHelper_1["default"].extractValid(input, options);
      if (!extracted) {
        return null;
      }
      return CurrencyInputHelper.insert(value, start, end, extracted);
    }
    var prefix = value.substring(0, start);
    var suffix = value.substring(end);
    var combined = prefix + input + suffix;
    if (CurrencyHelper_1["default"].isValidString(combined, options)) {
      return CurrencyInputHelper.insert(value, start, end, input);
    }
    return null;
  };
  CurrencyInputHelper.insert = function (value, start, end, input) {
    var prefix = value.substring(0, start);
    var suffix = value.substring(end);
    var info = CurrencyHelper_1["default"].getInfo(value);
    var raw = CursorHelper_1["default"].toRawPosition(info.cursorMap, start);
    var info2 = CurrencyHelper_1["default"].getInfo(prefix + input + suffix);
    var formattedPosition = CursorHelper_1["default"].toFormattedPosition(info2.cursorMap, raw + input.length);
    return { value: info2.formatted, position: formattedPosition };
  };
  return CurrencyInputHelper;
}();
exports["default"] = CurrencyInputHelper;