import { DecimalOptions } from './CurrencyInputHelper';
import { CursorMap } from './CursorHelper';
import { Nullable } from '../../typings/utility-types';
export interface DecimalFormattingOptions {
    fractionDigits?: Nullable<number>;
    hideTrailingZeros?: boolean;
    thousandsDelimiter?: string;
    minusSign?: string;
}
declare type DecimalFormattingOptionsInternal = Required<DecimalFormattingOptions>;
export interface FormattingInfo {
    raw: string;
    formatted: string;
    cursorMap: CursorMap;
}
export default class CurrencyHelper {
    static defaultOptions: DecimalFormattingOptionsInternal;
    static getOptions(options?: Nullable<DecimalFormattingOptions>): DecimalFormattingOptionsInternal;
    static getInfo(value: string, options?: Nullable<DecimalFormattingOptions>): FormattingInfo;
    static getCursorMap(formatted: string, formattingOptions?: Nullable<DecimalFormattingOptions>): CursorMap;
    static format(value: Nullable<number>, options?: Nullable<DecimalFormattingOptions>): string;
    static parse(value: string): Nullable<number>;
    static unformatString(value: string): string;
    static formatForClipboard(value: string): string;
    static formatString(value: string, formattingOptions?: Nullable<DecimalFormattingOptions>): string;
    static isValidString(value: string, options: DecimalOptions): boolean;
    static extractValid(value: string, options: DecimalOptions): string;
    static destructString(value: string): {
        sign: string;
        integer: string;
        delimiter: string;
        fraction: string;
    } | null;
}
export {};
