"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var warning_1 = tslib_1.__importDefault(require("warning"));
var Input_1 = tslib_1.__importDefault(require("../Input"));
var constants_1 = require("./constants");
var SelectionHelper_1 = tslib_1.__importDefault(require("./SelectionHelper"));
var CurrencyHelper_1 = tslib_1.__importDefault(require("./CurrencyHelper"));
var CurrencyInputHelper_1 = tslib_1.__importDefault(require("./CurrencyInputHelper"));
var CurrencyInputKeyboardActions_1 = require("./CurrencyInputKeyboardActions");
/**
                                                                                 * Поле для денежных сумм (и других числовых значений).
                                                                                 * Принимает любые свойства `Input`.
                                                                                 *
                                                                                 * Максимальная длина числа - **15 цифр** (с десятичным разделителем в любом месте).
                                                                                 * <br/>
                                                                                 * Если `fractionDigits=15`, то в целой части допускается **0**.
                                                                                 */
var CurrencyInput = /** @class */function (_super) {
  tslib_1.__extends(CurrencyInput, _super);
  function CurrencyInput() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = tslib_1.__assign({}, _this.getState(_this.props.value, _this.props.fractionDigits, _this.props.hideTrailingZeros), { focused: false });
    _this.tempSelectionForOnChange = SelectionHelper_1["default"].fromPosition(0);
    /**
                                                                                    * @public
                                                                                    */
    _this.focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };
    /**
        * @public
        */
    _this.blur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };
    _this.handleMouseUp = function (event) {
      var selection = getInputSelection(event.target);
      var normilized = CurrencyInputHelper_1["default"].normalizeSelection(_this.state.formatted, selection);
      _this.setState({ selection: normilized });
    };
    _this.handleKeyDown = function (event) {
      var selection = _this.getSelection(event.target);
      _this.tempSelectionForOnChange = selection;
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }
      var action = CurrencyInputKeyboardActions_1.extractAction(event);
      if (action === CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Ignore) {
        return;
      }
      if (action !== CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Unknown) {
        event.preventDefault();
      }
      switch (action) {
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Submit:{
            if (_this.props.onSubmit) {
              _this.props.onSubmit();
            }
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Backspace:{
            _this.inputValue(CurrencyInputHelper_1["default"].moveCursor(_this.state.formatted, selection, -1), selection.end, '');
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Delete:{
            _this.inputValue(selection.start, CurrencyInputHelper_1["default"].moveCursor(_this.state.formatted, selection, +1), '');
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.MoveCursorLeft:{
            _this.moveCursor(selection, -1);
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.MoveCursorRight:{
            _this.moveCursor(selection, +1);
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.Home:{
            _this.setState({ selection: SelectionHelper_1["default"].fromPosition(0) });
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.End:{
            var end = _this.state.formatted.length;
            _this.setState({ selection: SelectionHelper_1["default"].fromPosition(end) });
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.ExtendSelectionLeft:{
            _this.extendSelection(selection, -1);
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.ExtendSelectionRight:{
            _this.extendSelection(selection, +1);
            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.FullSelection:{
            _this.setState({
              selection: SelectionHelper_1["default"].forward(0, _this.state.formatted.length) });

            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.ExtendSelectionToStart:{
            _this.setState({
              selection: SelectionHelper_1["default"].backward(0, selection.start) });

            return;
          }
        case CurrencyInputKeyboardActions_1.CURRENCY_INPUT_ACTIONS.ExtendSelectionToEnd:{
            var inputEnd = _this.state.formatted.length;
            _this.setState({
              selection: SelectionHelper_1["default"].forward(selection.start, inputEnd) });

            return;
          }}

    };
    _this.getSelection = function (input) {
      var selection = getInputSelection(input);
      return {
        start: selection.start,
        end: selection.end,
        direction: _this.state.selection.direction };

    };
    _this.moveCursor = function (selection, step) {
      var position = CurrencyInputHelper_1["default"].moveCursor(_this.state.formatted, selection, step);
      _this.setState({ selection: SelectionHelper_1["default"].fromPosition(position) });
    };
    _this.extendSelection = function (selection, step) {
      var extended = CurrencyInputHelper_1["default"].extendSelection(_this.state.formatted, selection, step);
      _this.setState({ selection: extended });
    };
    _this.inputValue = function (start, end, value) {
      var result = CurrencyInputHelper_1["default"].safeInsert(_this.state.formatted, start, end, value, {
        integerDigits: _this.props.integerDigits,
        fractionDigits: _this.props.fractionDigits,
        unsigned: !_this.props.signed });

      if (result) {
        var formatted_1 = result.value;
        var selection = SelectionHelper_1["default"].fromPosition(result.position);
        _this.setState({ formatted: formatted_1, selection: selection }, function () {
          var parsedValue = CurrencyHelper_1["default"].parse(formatted_1);
          if (_this.props.value !== parsedValue) {
            _this.props.onChange({ target: { value: parsedValue } }, parsedValue);
          }
        });
        return true;
      }
      if (_this.input) {
        _this.input.blink();
      }
      return false;
    };
    _this.getOnChangeDelta = function (value) {
      var selection = _this.tempSelectionForOnChange;
      var oldValue = _this.state.formatted;
      if (selection.start !== selection.end) {
        return value.substring(selection.start, value.length - (oldValue.length - selection.end));
      } else
      if (value.length > oldValue.length) {
        return value.substr(selection.start, value.length - oldValue.length);
      }
      return null;
    };
    _this.handleChange = function (event) {
      var selection = _this.tempSelectionForOnChange;
      var delta = _this.getOnChangeDelta(event.target.value);
      if (delta != null && !_this.inputValue(selection.start, selection.end, delta)) {
        _this.setState({ selection: selection });
      }
    };
    _this.handlePaste = function (event) {
      var data = event.clipboardData.getData('text');
      var selection = _this.getSelection(event.target);
      _this.inputValue(selection.start, selection.end, data);
      event.preventDefault();
    };
    _this.handleCopy = function (event) {
      var selection = _this.getSelection(event.target);
      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);
        var data = CurrencyHelper_1["default"].formatForClipboard(substring);
        event.clipboardData.setData('text', data);
      }
      event.preventDefault();
    };
    _this.handleCut = function (event) {
      var selection = _this.getSelection(event.target);
      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);
        var data = CurrencyHelper_1["default"].formatForClipboard(substring);
        event.clipboardData.setData('text', data);
        _this.inputValue(selection.start, selection.end, '');
      }
      event.preventDefault();
    };
    _this.handleFocus = function (event) {
      var _a = event.target,selectionStart = _a.selectionStart,selectionEnd = _a.selectionEnd,selectionDirection = _a.selectionDirection;
      var valueLenght = event.target.value.length;
      var selection = {
        start: selectionStart !== selectionEnd ? selectionStart || 0 : selectionStart || valueLenght,
        end: selectionEnd !== selectionStart ? selectionEnd || 0 : selectionEnd || valueLenght,
        direction: selectionDirection || 'none' };

      _this.setState({
        focused: true,
        selection: selection });

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };
    _this.handleBlur = function (event) {
      var value = CurrencyHelper_1["default"].parse(_this.state.formatted);
      _this.setState(tslib_1.__assign({}, _this.getState(value, _this.props.fractionDigits, _this.props.hideTrailingZeros), { focused: false }));
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };
    _this.refInput = function (element) {
      _this.input = element;
    };
    return _this;
  }
  CurrencyInput.prototype.componentDidMount = function () {
    var _a = this.props,maxLength = _a.maxLength,integerDigits = _a.integerDigits,fractionDigits = _a.fractionDigits;
    warning_1["default"](maxLength === undefined, "[CurrencyInput]: Prop 'maxLength' has been deprecated. See 'integerDigits' and 'fractionDigits'");
    warning_1["default"]((integerDigits || 0) + (fractionDigits || 0) <= constants_1.MAX_SAFE_DIGITS, "[CurrencyInput]: Sum of 'integerDigits' and 'fractionDigits' exceeds " + constants_1.MAX_SAFE_DIGITS + "." +
    "\nSee https://tech.skbkontur.ru/react-ui/#/CurrencyInput?id=why15");
  };
  CurrencyInput.prototype.componentWillReceiveProps = function (nextProps) {
    var value = nextProps.value,fractionDigits = nextProps.fractionDigits,hideTrailingZeros = nextProps.hideTrailingZeros;
    if (value !== CurrencyHelper_1["default"].parse(this.state.formatted) || fractionDigits !== this.props.fractionDigits) {
      var state = this.getState(value, fractionDigits, hideTrailingZeros);
      this.setState(state);
    }
  };
  CurrencyInput.prototype.componentDidUpdate = function () {
    if (this.state.focused && this.input) {
      var _a = this.state.selection,start = _a.start,end = _a.end;
      this.input.setSelectionRange(start, end);
    }
  };
  CurrencyInput.prototype.render = function () {
    var _a = this.props,fractionDigits = _a.fractionDigits,signed = _a.signed,onSubmit = _a.onSubmit,mainInGroup = _a.mainInGroup,integerDigits = _a.integerDigits,hideTrailingZeros = _a.hideTrailingZeros,rest = tslib_1.__rest(_a, ["fractionDigits", "signed", "onSubmit", "mainInGroup", "integerDigits", "hideTrailingZeros"]);
    var placeholder = this.props.placeholder == null ?
    CurrencyHelper_1["default"].format(0, { fractionDigits: fractionDigits, hideTrailingZeros: hideTrailingZeros }) :
    this.props.placeholder;
    return React.createElement(Input_1["default"], tslib_1.__assign({}, rest, { value: this.state.formatted, onBlur: this.handleBlur, onFocus: this.handleFocus, onMouseUp: this.handleMouseUp, onKeyDown: this.handleKeyDown, onChange: this.handleChange, onPaste: this.handlePaste, onCopy: this.handleCopy, onCut: this.handleCut, onMouseEnter: this.props.onMouseEnter, onMouseLeave: this.props.onMouseLeave, onMouseOver: this.props.onMouseOver, ref: this.refInput, placeholder: this.state.focused ? '' : placeholder }));
  };
  CurrencyInput.prototype.getState = function (value, fractionDigits, hideTrailingZeros) {
    return {
      formatted: CurrencyHelper_1["default"].format(value, { fractionDigits: fractionDigits, hideTrailingZeros: hideTrailingZeros }),
      selection: SelectionHelper_1["default"].fromPosition(0) };

  };
  CurrencyInput.__KONTUR_REACT_UI__ = 'CurrencyInput';
  CurrencyInput.propTypes = {
    align: PropTypes.oneOf(['left', 'center', 'right']),
    autoFocus: PropTypes.bool,
    borderless: PropTypes.bool,
    disabled: PropTypes.bool,
    error: PropTypes.bool,
    fractionDigits: PropTypes.number,
    hideTrailingZeros: PropTypes.bool,
    leftIcon: PropTypes.element,
    placeholder: PropTypes.string,
    signed: PropTypes.bool,
    size: PropTypes.oneOf(['small', 'medium', 'large']),
    value: PropTypes.number,
    warning: PropTypes.bool,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    onBlur: PropTypes.func,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMouseOver: PropTypes.func,
    onSubmit: PropTypes.func };

  CurrencyInput.defaultProps = {
    align: 'right',
    fractionDigits: 2,
    hideTrailingZeros: false,
    value: null };

  return CurrencyInput;
}(React.Component);
exports["default"] = CurrencyInput;
function getInputSelection(input) {
  if (!(input instanceof HTMLInputElement)) {
    throw new Error('input is not HTMLInputElement');
  }
  return {
    start: input.selectionStart,
    end: input.selectionEnd,
    direction: input.selectionDirection };

}