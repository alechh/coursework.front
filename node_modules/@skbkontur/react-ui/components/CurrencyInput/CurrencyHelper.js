"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var CurrencyHelper = /** @class */function () {
  function CurrencyHelper() {
  }
  CurrencyHelper.getOptions = function (options) {
    return tslib_1.__assign({}, CurrencyHelper.defaultOptions, options);
  };
  CurrencyHelper.getInfo = function (value, options) {
    var raw = CurrencyHelper.unformatString(value);
    var formatted = CurrencyHelper.formatString(value, options);
    var cursorMap = CurrencyHelper.getCursorMap(formatted, options);
    return { raw: raw, formatted: formatted, cursorMap: cursorMap };
  };
  CurrencyHelper.getCursorMap = function (formatted, formattingOptions) {
    var options = CurrencyHelper.getOptions(formattingOptions);
    var regexp = new RegExp(options.thousandsDelimiter);
    var cursorMap = [];
    var index = formatted.length;
    var cursor = formatted.length;
    var skip = 0;
    while (index >= 0) {
      cursorMap[index] = cursor;
      var ignoredSymbol = regexp.exec(formatted[index - 1]);
      if (ignoredSymbol) {
        ++skip;
      } else
      {
        cursor = cursor - skip - 1;
        skip = 0;
      }
      --index;
    }
    return cursorMap;
  };
  CurrencyHelper.format = function (value, options) {
    if (value == null) {
      return '';
    }
    return CurrencyHelper.formatString(value.toString(), options);
  };
  CurrencyHelper.parse = function (value) {
    var cleaned = CurrencyHelper.unformatString(value);
    if (!cleaned) {
      return null;
    }
    var destructed = CurrencyHelper.destructString(cleaned);
    if (!destructed) {
      return null;
    }
    var result = destructed.sign + (destructed.integer || '0') + (destructed.delimiter || '.') + (destructed.fraction || '0');
    return parseFloat(result);
  };
  CurrencyHelper.unformatString = function (value) {
    return value.
    replace(/\s/g, '').
    replace(',', '.').
    replace(/[\u2212\u002D\uFE63\uFF0D\u2012\u2013\u2014\u2015]/g, '-');
  };
  CurrencyHelper.formatForClipboard = function (value) {
    return CurrencyHelper.unformatString(value).replace('.', ',');
  };
  CurrencyHelper.formatString = function (value, formattingOptions) {
    var options = CurrencyHelper.getOptions(formattingOptions);
    value = CurrencyHelper.unformatString(value);
    var destructed = CurrencyHelper.destructString(value) || { sign: '', integer: '', delimiter: '', fraction: '' };
    var sign = destructed.sign,integer = destructed.integer,delimiter = destructed.delimiter;
    var fraction = destructed.fraction;
    var fractionDigits = fraction.length;
    if (options.hideTrailingZeros) {
      fraction = fraction.replace(/0+$/, '');
      fractionDigits = fraction.length;
    } else
    if (options.fractionDigits !== null) {
      fractionDigits = options.fractionDigits;
    }
    var parts = [];
    var blockSize = 3;
    var start = (integer.length - 1) % blockSize - blockSize + 1;
    for (var i = start; i < integer.length; i += blockSize) {
      parts.push(integer.substring(Math.max(i, 0), i + blockSize));
    }
    var result = parts.join(options.thousandsDelimiter);
    if (delimiter || fractionDigits) {
      result += ',';
      result += fraction.padEnd(Math.min(fractionDigits, constants_1.MAX_SAFE_DIGITS), '0');
    }
    if (sign) {
      result = options.minusSign + result;
    }
    return result;
  };
  CurrencyHelper.isValidString = function (value, options) {
    value = CurrencyHelper.unformatString(value);
    var destructed = CurrencyHelper.destructString(value);
    if (!destructed) {
      return false;
    }
    var sign = destructed.sign,integer = destructed.integer,delimiter = destructed.delimiter,fraction = destructed.fraction;
    if (options.unsigned && sign) {
      return false;
    }
    if (options.fractionDigits === 0 && delimiter) {
      return false;
    }
    var integerDigits = integer === '0' ? 0 : integer.length;
    var fractionDigits = fraction.length;
    if (options.integerDigits != null && integerDigits > options.integerDigits) {
      return false;
    }
    if (options.integerDigits == null && integerDigits > constants_1.MAX_SAFE_DIGITS - (options.fractionDigits || 0)) {
      return false;
    }
    if (options.fractionDigits != null && fractionDigits > options.fractionDigits) {
      return false;
    }
    return integerDigits + fractionDigits <= constants_1.MAX_SAFE_DIGITS;
  };
  CurrencyHelper.extractValid = function (value, options) {
    value = CurrencyHelper.unformatString(value);
    var match = /[-\.\d]+/.exec(value);
    if (!match) {
      return '';
    }
    var token = match[0].substr(0, constants_1.MAX_ALLOWED_CHARS);
    for (var i = token.length; i >= 0; --i) {
      var result = token.substr(0, i);
      if (CurrencyHelper.isValidString(result, options)) {
        return result;
      }
    }
    return '';
  };
  CurrencyHelper.destructString = function (value) {
    var match = /^(-)?(\d*)?(\.)?(\d*)?$/.exec(value);
    if (!match) {
      return null;
    }
    var _a = match[1],sign = _a === void 0 ? '' : _a,_b = match[2],integer = _b === void 0 ? '' : _b,_c = match[3],delimiter = _c === void 0 ? '' : _c,_d = match[4],fraction = _d === void 0 ? '' : _d;
    return { sign: sign, integer: integer, delimiter: delimiter, fraction: fraction };
  };
  CurrencyHelper.defaultOptions = {
    fractionDigits: null,
    hideTrailingZeros: false,
    thousandsDelimiter: String.fromCharCode(0x2009),
    minusSign: String.fromCharCode(0x2212) };

  return CurrencyHelper;
}();
exports["default"] = CurrencyHelper;