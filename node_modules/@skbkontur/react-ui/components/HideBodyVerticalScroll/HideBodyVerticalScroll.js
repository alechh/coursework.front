"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var getComputedStyle_1 = tslib_1.__importDefault(require("../../lib/dom/getComputedStyle"));
var getScrollWidth_1 = tslib_1.__importDefault(require("../../lib/dom/getScrollWidth"));
var HideBodyVerticalScroll = /** @class */function (_super) {
  tslib_1.__extends(HideBodyVerticalScroll, _super);
  function HideBodyVerticalScroll() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.disposeDocumentStyle = null;
    _this.initialScroll = 0;
    _this.master = false;
    _this.updateScrollVisibility = function () {
      var documentElement = document.documentElement;
      _this.restoreStyles();
      if (!documentElement) {
        return;
      }
      var clientHeight = documentElement.clientHeight,scrollHeight = documentElement.scrollHeight;
      var shouldRestore = VerticalScrollCounter.get() === 0;
      var shouldHide = !shouldRestore && clientHeight < scrollHeight;
      if (shouldHide) {
        _this.makeSomeMagicWithScroll(documentElement);
      }
      if (shouldRestore) {
        documentElement.scrollTop = _this.initialScroll;
      }
    };
    _this.makeSomeMagicWithScroll = function (document) {
      var documentComputedStyle = getComputedStyle_1["default"](document);
      var scrollWidth = getScrollWidth_1["default"]();
      var documentMargin = parseFloat(documentComputedStyle.marginRight || '');
      var documentStyle = generateDocumentStyle(documentMargin + scrollWidth);
      _this.disposeDocumentStyle = _this.attachStyle(document, documentStyle);
    };
    _this.attachStyle = function (element, style) {
      element.classList.add(style.className);
      var removeStyleNode = attachStylesheet(style.css);
      return function () {
        removeStyleNode();
        element.classList.remove(style.className);
      };
    };
    _this.restoreStyles = function () {
      if (_this.disposeDocumentStyle) {
        _this.disposeDocumentStyle();
        _this.disposeDocumentStyle = null;
      }
      // Forcing reflow for Firefix
      attachStylesheet('html, body { height: auto; }')();
    };
    return _this;
  }
  HideBodyVerticalScroll.prototype.componentDidMount = function () {
    var counter = VerticalScrollCounter.increment();
    if (counter === 1) {
      this.master = true;
      this.initialScroll = document.documentElement ? document.documentElement.scrollTop : 0;
      this.updateScrollVisibility();
      window.addEventListener('resize', this.updateScrollVisibility);
    }
  };
  HideBodyVerticalScroll.prototype.componentDidUpdate = function () {
    if (this.master) {
      this.updateScrollVisibility();
    }
  };
  HideBodyVerticalScroll.prototype.componentWillUnmount = function () {
    this.restoreStyles();
    var counter = VerticalScrollCounter.decrement();
    if (counter === 0) {
      this.updateScrollVisibility();
      window.removeEventListener('resize', this.updateScrollVisibility);
    }
  };
  HideBodyVerticalScroll.prototype.render = function () {
    return null;
  };
  HideBodyVerticalScroll.__KONTUR_REACT_UI__ = 'HideBodyVerticalScroll';
  HideBodyVerticalScroll.hash = Math.random().
  toString(16).
  slice(2, 6);
  return HideBodyVerticalScroll;
}(React.Component);
exports["default"] = HideBodyVerticalScroll;
var VerticalScrollCounter = /** @class */function () {
  function VerticalScrollCounter() {
  }
  VerticalScrollCounter.increment = function () {
    var counter = window.RetailUIVerticalScrollCounter || 0;
    return window.RetailUIVerticalScrollCounter = counter + 1;
  };
  VerticalScrollCounter.decrement = function () {
    var counter = window.RetailUIVerticalScrollCounter || 0;
    return window.RetailUIVerticalScrollCounter = counter - 1;
  };
  VerticalScrollCounter.get = function () {
    return window.RetailUIVerticalScrollCounter || 0;
  };
  return VerticalScrollCounter;
}();
function generateClassName(className) {
  var name = HideBodyVerticalScroll.name,hash = HideBodyVerticalScroll.hash;
  return name + "-" + className + "-" + hash;
}
function generateDocumentStyle(documentMargin) {
  var className = generateClassName('document');
  var css = "." + className + " {\n  overflow: hidden !important;\n  margin-right: " + documentMargin + "px !important;\n  height: 100%;\n}\n";
  return { className: className, css: css };
}
function attachStylesheet(sheet) {
  var style = document.createElement('style');
  style.setAttribute('type', 'text/css');
  // @ts-ignore IE specific api
  if (style.styleSheet) {
    // @ts-ignore IE specific api
    style.styleSheet.cssText = sheet;
  } else
  {
    var textnode = document.createTextNode(sheet);
    style.appendChild(textnode);
  }
  var head = document.getElementsByTagName('head')[0];
  head.appendChild(style);
  return function () {
    if (head.contains(style)) {
      head.removeChild(style);
    }
  };
}