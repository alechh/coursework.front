"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = require("react-dom");
var listenFocusOutside_1 = tslib_1.__importStar(require("../../lib/listenFocusOutside"));
var RenderLayer = /** @class */function (_super) {
  tslib_1.__extends(RenderLayer, _super);
  function RenderLayer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.focusOutsideListenerToken = null;
    _this.handleFocusOutside = function (event) {
      if (_this.props.onFocusOutside) {
        _this.props.onFocusOutside(event);
      }
    };
    _this.handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;
      var node = _this.getDomNode();
      if (target instanceof Element && listenFocusOutside_1.containsTargetOrRenderContainer(target)(node)) {
        return;
      }
      if (_this.props.onClickOutside) {
        _this.props.onClickOutside(event);
      }
    };
    return _this;
  }
  RenderLayer.prototype.componentDidMount = function () {
    if (this.props.active) {
      this.attachListeners();
    }
  };
  RenderLayer.prototype.componentDidUpdate = function (prevProps) {
    if (!prevProps.active && this.props.active) {
      this.attachListeners();
    }
    if (prevProps.active && !this.props.active) {
      this.detachListeners();
    }
  };
  RenderLayer.prototype.componentWillUnmount = function () {
    if (this.props.active) {
      this.detachListeners();
    }
  };
  RenderLayer.prototype.render = function () {
    return React.Children.only(this.props.children);
  };
  RenderLayer.prototype.attachListeners = function () {
    var _this = this;
    this.focusOutsideListenerToken = listenFocusOutside_1["default"](function () {return [_this.getDomNode()];}, this.handleFocusOutside);
    window.addEventListener('blur', this.handleFocusOutside);
    document.addEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
  };
  RenderLayer.prototype.detachListeners = function () {
    if (this.focusOutsideListenerToken) {
      this.focusOutsideListenerToken.remove();
      this.focusOutsideListenerToken = null;
    }
    window.removeEventListener('blur', this.handleFocusOutside);
    document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
  };
  RenderLayer.prototype.getDomNode = function () {
    return react_dom_1.findDOMNode(this);
  };
  RenderLayer.__KONTUR_REACT_UI__ = 'RenderLayer';
  RenderLayer.propTypes = {
    active: function active(props, propName, componentName) {
      var active = props.active,onClickOutside = props.onClickOutside,onFocusOutside = props.onFocusOutside;
      if (active && !(onClickOutside || onFocusOutside)) {
        return new Error("[" + componentName + "]: using the component without either 'onClickOutside' or 'onFocusOutside' callback is pointless.");
      }
    } };

  RenderLayer.defaultProps = {
    active: true };

  return RenderLayer;
}(React.Component);
exports["default"] = RenderLayer;