"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var InternalDate_1 = require("../../lib/date/InternalDate");
var InternalDateGetter_1 = tslib_1.__importDefault(require("../../lib/date/InternalDateGetter"));
var Calendar_1 = tslib_1.__importDefault(require("../Calendar"));
var shallowEqual_1 = tslib_1.__importDefault(require("fbjs/lib/shallowEqual"));
var decorators_1 = require("../LocaleProvider/decorators");
var Picker_module_less_1 = tslib_1.__importDefault(require("./Picker.module.css"));
var CalendarDateShape_1 = require("../Calendar/CalendarDateShape");
var locale_1 = require("./locale");
var Picker_styles_1 = tslib_1.__importDefault(require("./Picker.styles"));
var Emotion_1 = require("../../lib/theming/Emotion");
var ThemeConsumer_1 = tslib_1.__importDefault(require("../ThemeConsumer"));
var getTodayCalendarDate = function getTodayCalendarDate() {
  var d = new Date();
  return {
    date: d.getDate(),
    month: d.getMonth(),
    year: d.getFullYear() };

};
var Picker = /** @class */function (_super) {
  tslib_1.__extends(Picker, _super);
  function Picker(props) {
    var _this = _super.call(this, props) || this;
    _this.calendar = null;
    _this.scrollToMonth = function (month, year) {
      if (_this.calendar) {
        _this.calendar.scrollToMonth(month, year);
      }
    };
    _this.handleSelectToday = function (today) {return function () {
        if (_this.props.onSelect) {
          _this.props.onSelect(today.toNativeFormat());
        }
        if (_this.calendar) {
          var _a = _this.state.today,month = _a.month,year = _a.year;
          _this.calendar.scrollToMonth(month, year);
        }
      };};
    _this.getInitialDate = function (today) {
      if (_this.props.value) {
        return _this.props.value;
      }
      if (_this.props.minDate && CalendarDateShape_1.isLess(today, _this.props.minDate)) {
        return _this.props.minDate;
      }
      if (_this.props.maxDate && CalendarDateShape_1.isGreater(today, _this.props.maxDate)) {
        return _this.props.maxDate;
      }
      return today;
    };
    var today = getTodayCalendarDate();
    _this.state = {
      date: _this.getInitialDate(today),
      today: today };

    return _this;
  }
  Picker.prototype.componentDidUpdate = function (prevProps) {
    var value = this.props.value;
    if (value && !shallowEqual_1["default"](value, prevProps.value)) {
      this.scrollToMonth(value.month, value.year);
    }
  };
  Picker.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1["default"], null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Picker.prototype.renderMain = function () {
    var _this = this;
    var date = this.state.date;
    return (
      // tslint:disable-next-line:jsx-no-lambda
      React.createElement("div", { className: Emotion_1.cx(Picker_module_less_1["default"].root, Picker_styles_1["default"].root(this.theme)), onMouseDown: function onMouseDown(e) {return e.preventDefault();} },
      React.createElement(Calendar_1["default"], { ref: function ref(c) {return _this.calendar = c;}, value: this.props.value, initialMonth: date.month, initialYear: date.year, onSelect: this.props.onPick, minDate: this.props.minDate, maxDate: this.props.maxDate, isHoliday: this.props.isHoliday }),
      this.props.enableTodayLink && this.renderTodayLink()));
  };
  Picker.prototype.renderTodayLink = function () {
    var _a = this.locale,order = _a.order,separator = _a.separator;
    var today = new InternalDate_1.InternalDate({ order: order, separator: separator }).setComponents(InternalDateGetter_1["default"].getTodayComponents());
    return React.createElement("button", { className: Emotion_1.cx(Picker_module_less_1["default"].todayWrapper, Picker_styles_1["default"].todayWrapper(this.theme)), onClick: this.handleSelectToday(today), tabIndex: -1 }, this.locale.today + " " + today.toString({ withPad: true, withSeparator: true }));
  };
  Picker.__KONTUR_REACT_UI__ = 'Picker';
  Picker = tslib_1.__decorate([
  decorators_1.locale('DatePicker', locale_1.DatePickerLocaleHelper)],
  Picker);
  return Picker;
}(React.Component);
exports["default"] = Picker;