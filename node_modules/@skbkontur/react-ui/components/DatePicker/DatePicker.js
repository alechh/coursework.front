"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PropTypes = tslib_1.__importStar(require("prop-types"));
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = require("react-dom");
var InternalDate_1 = require("../../lib/date/InternalDate");
var InternalDateTransformer_1 = tslib_1.__importDefault(require("../../lib/date/InternalDateTransformer"));
var constants_1 = require("../../lib/date/constants");
var types_1 = require("../../lib/date/types");
var DateInput_1 = tslib_1.__importDefault(require("../DateInput"));
var DropdownContainer_1 = tslib_1.__importDefault(require("../DropdownContainer/DropdownContainer"));
var filterProps_1 = tslib_1.__importDefault(require("../filterProps"));
var DatePicker_module_less_1 = tslib_1.__importDefault(require("./DatePicker.module.css"));
var Picker_1 = tslib_1.__importDefault(require("./Picker"));
var INPUT_PASS_PROPS = {
  autoFocus: true,
  disabled: true,
  warning: true,
  error: true,
  size: true,
  onKeyDown: true };

// eslint-disable-next-line flowtype/no-weak-types
var DatePicker = /** @class */function (_super) {
  tslib_1.__extends(DatePicker, _super);
  function DatePicker() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = { opened: false };
    _this.input = null;
    _this.focused = false;
    _this.internalDate = _this.parseValueToDate(_this.props.value);
    _this.minDate = _this.parseValueToDate(_this.props.minDate);
    _this.maxDate = _this.parseValueToDate(_this.props.maxDate);
    _this.getInputRef = function (ref) {
      _this.input = ref;
    };
    _this.handleFocus = function () {
      if (_this.focused) {
        return;
      }
      _this.focused = true;
      _this.setState({ opened: true });
      if (_this.props.onFocus) {
        _this.props.onFocus();
      }
    };
    _this.handleBlur = function () {
      if (!_this.focused) {
        return;
      }
      _this.focused = false;
      _this.close();
      if (_this.props.onBlur) {
        _this.props.onBlur();
      }
    };
    _this.handlePick = function (dateShape) {
      _this.handleSelect(dateShape);
      _this.blur();
    };
    _this.handleSelect = function (_a) {
      var date = _a.date,month = _a.month,year = _a.year;
      var value = InternalDateTransformer_1["default"].dateToInternalString({ date: date, month: month + 1, year: year });
      if (_this.props.onChange) {
        _this.props.onChange({ target: { value: value } }, value);
      }
    };
    _this.isHoliday = function (_a) {
      var date = _a.date,month = _a.month,year = _a.year,isWeekend = _a.isWeekend;
      var dateString = InternalDateTransformer_1["default"].dateToInternalString({ date: date, month: month + 1, year: year });
      return _this.props.isHoliday(dateString, isWeekend);
    };
    return _this;
  }
  DatePicker.prototype.componentDidMount = function () {
    if (this.props.autoFocus) {
      this.focus();
    }
  };
  DatePicker.prototype.componentWillReceiveProps = function (nextProps) {
    var disabled = nextProps.disabled;
    var opened = this.state.opened;
    if (disabled && opened) {
      this.close();
    }
    this.internalDate = this.parseValueToDate(nextProps.value);
    this.minDate = this.parseValueToDate(nextProps.minDate);
    this.maxDate = this.parseValueToDate(nextProps.maxDate);
  };
  /**
      * @public
      */
  DatePicker.prototype.blur = function () {
    if (this.input) {
      this.input.blur();
    }
    this.handleBlur();
  };
  /**
      * @public
      */
  DatePicker.prototype.focus = function () {
    if (this.props.disabled) {
      return;
    }
    if (this.input) {
      this.input.focus();
    }
    this.handleFocus();
  };
  /**
      * Закрывает выпадашку выбора дня
      * @public
      */
  DatePicker.prototype.close = function () {
    this.setState({ opened: false });
  };
  DatePicker.prototype.render = function () {
    var _this = this;
    var picker = null;
    var date = this.internalDate ? this.internalDate.toNativeFormat() : null;
    if (this.state.opened) {
      picker = React.createElement(DropdownContainer_1["default"]
      // tslint:disable-next-line:jsx-no-lambda
      , {
        // tslint:disable-next-line:jsx-no-lambda
        getParent: function getParent() {return react_dom_1.findDOMNode(_this);}, offsetY: 2, align: this.props.menuAlign },
      React.createElement(Picker_1["default"], { value: date, minDate: this.minDate && this.minDate.toNativeFormat() || undefined, maxDate: this.maxDate && this.maxDate.toNativeFormat() || undefined, onPick: this.handlePick, onSelect: this.handleSelect, enableTodayLink: this.props.enableTodayLink, isHoliday: this.isHoliday }));
    }
    return React.createElement("label", { className: DatePicker_module_less_1["default"].root, style: { width: this.props.width }, onMouseEnter: this.props.onMouseEnter, onMouseLeave: this.props.onMouseLeave, onMouseOver: this.props.onMouseOver },
    React.createElement(DateInput_1["default"], tslib_1.__assign({}, filterProps_1["default"](this.props, INPUT_PASS_PROPS), { ref: this.getInputRef, value: this.props.value || '', width: "100%", withIcon: true, minDate: this.props.minDate, maxDate: this.props.maxDate, onBlur: this.handleBlur, onFocus: this.handleFocus, onChange: this.props.onChange })),
    picker);
  };
  DatePicker.prototype.parseValueToDate = function (value) {
    if (value === undefined || value === null) {
      return undefined;
    }
    var date = new InternalDate_1.InternalDate({ value: value });
    if (date.validate({ checks: [types_1.InternalDateValidateCheck.NotNull, types_1.InternalDateValidateCheck.Native] })) {
      return date;
    }
    return undefined;
  };
  DatePicker.__KONTUR_REACT_UI__ = 'DatePicker';
  DatePicker.propTypes = {
    autoFocus: PropTypes.bool,
    disabled: PropTypes.bool,
    /**
                               * Включает кнопку сегодня в календаре
                               */
    enableTodayLink: PropTypes.bool,
    error: PropTypes.bool,
    /**
                            * Максимальная дата в календаре.
                            */
    maxDate: PropTypes.string.isRequired,
    menuAlign: PropTypes.oneOf(['left', 'right']),
    /**
                                                    * Минимальная дата в календаре.
                                                    */
    minDate: PropTypes.string.isRequired,
    /**
                                           * Строка формата `dd.mm.yyyy`
                                           */
    value: PropTypes.string,
    warning: PropTypes.bool,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
    onBlur: PropTypes.func,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func,
    onKeyDown: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMouseOver: PropTypes.func,
    isHoliday: PropTypes.func.isRequired };

  DatePicker.defaultProps = {
    width: 120,
    minDate: constants_1.MIN_FULLDATE,
    maxDate: constants_1.MAX_FULLDATE,
    isHoliday: function isHoliday(_day, isWeekend) {return isWeekend;} };

  DatePicker.validate = function (value, range) {
    if (range === void 0) {range = {};}
    if (!value) {
      return false;
    }
    var _a = range.minDate,minDate = _a === void 0 ? constants_1.MIN_FULLDATE : _a,_b = range.maxDate,maxDate = _b === void 0 ? constants_1.MAX_FULLDATE : _b;
    var internalDate = new InternalDate_1.InternalDate({
      order: types_1.InternalDateOrder.DMY,
      separator: types_1.InternalDateSeparator.Dot }).

    setRangeStart(new InternalDate_1.InternalDate({ value: minDate })).
    setRangeEnd(new InternalDate_1.InternalDate({ value: maxDate })).
    parseValue(value);
    return internalDate.validate({
      checks: [
      types_1.InternalDateValidateCheck.NotNull,
      types_1.InternalDateValidateCheck.Number,
      types_1.InternalDateValidateCheck.Native,
      types_1.InternalDateValidateCheck.Limits,
      types_1.InternalDateValidateCheck.Range] });


  };
  return DatePicker;
}(React.Component);
exports["default"] = DatePicker;