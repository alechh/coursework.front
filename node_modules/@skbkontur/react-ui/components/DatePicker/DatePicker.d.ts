import * as PropTypes from 'prop-types';
import * as React from 'react';
export interface DatePickerProps<T> {
    autoFocus?: boolean;
    disabled?: boolean;
    enableTodayLink?: boolean;
    error?: boolean;
    minDate: T;
    maxDate: T;
    menuAlign?: 'left' | 'right';
    size?: 'small' | 'medium' | 'large';
    value?: T | null;
    warning?: boolean;
    width: number | string;
    onBlur?: () => void;
    /**
     * @param e - объект, частично имитирующий объект `Event`.
     * @param value - строка в формате `dd.mm.yyyy`.
     */
    onChange: (e: {
        target: {
            value: T;
        };
    }, value: T) => void;
    onFocus?: () => void;
    onKeyDown?: (e: React.KeyboardEvent<any>) => void;
    onMouseEnter?: (e: React.MouseEvent<any>) => void;
    onMouseLeave?: (e: React.MouseEvent<any>) => void;
    onMouseOver?: (e: React.MouseEvent<any>) => void;
    /**
     * Функция для определения праздничных дней
     * @default (_day, isWeekend) => isWeekend
     * @param {T} day - строка в формате `dd.mm.yyyy`
     * @param {boolean} isWeekend - флаг выходного (суббота или воскресенье)
     *
     * @returns {boolean} `true` для выходного или `false` для рабочего дня
     */
    isHoliday: (day: T, isWeekend: boolean) => boolean;
}
export interface DatePickerState {
    opened: boolean;
}
declare type DatePickerValue = string;
declare class DatePicker extends React.Component<DatePickerProps<DatePickerValue>, DatePickerState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        autoFocus: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Включает кнопку сегодня в календаре
         */
        enableTodayLink: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        /**
         * Максимальная дата в календаре.
         */
        maxDate: PropTypes.Validator<string>;
        menuAlign: PropTypes.Requireable<"left" | "right">;
        /**
         * Минимальная дата в календаре.
         */
        minDate: PropTypes.Validator<string>;
        /**
         * Строка формата `dd.mm.yyyy`
         */
        value: PropTypes.Requireable<string>;
        warning: PropTypes.Requireable<boolean>;
        width: PropTypes.Validator<string | number>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        isHoliday: PropTypes.Validator<(...args: any[]) => any>;
    };
    static defaultProps: {
        width: number;
        minDate: string;
        maxDate: string;
        isHoliday: (_day: string, isWeekend: boolean) => boolean;
    };
    static validate: (value: string | null | undefined, range?: {
        minDate?: string | undefined;
        maxDate?: string | undefined;
    }) => boolean;
    state: DatePickerState;
    private input;
    private focused;
    private internalDate?;
    private minDate?;
    private maxDate?;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: DatePickerProps<DatePickerValue>): void;
    /**
     * @public
     */
    blur(): void;
    /**
     * @public
     */
    focus(): void;
    /**
     * Закрывает выпадашку выбора дня
     * @public
     */
    close(): void;
    render(): JSX.Element;
    private getInputRef;
    private parseValueToDate;
    private handleFocus;
    private handleBlur;
    private handlePick;
    private handleSelect;
    private isHoliday;
}
export default DatePicker;
