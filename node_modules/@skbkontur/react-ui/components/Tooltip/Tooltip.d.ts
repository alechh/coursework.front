import * as React from 'react';
import { PopupPosition } from '../Popup';
import { Nullable } from '../../typings/utility-types';
export declare type TooltipTrigger = 'hover'
/** Клик на children */
 | 'click'
/** Фокус на children */
 | 'focus'
/** Наведение на children и на тултип и фокус на children */
 | 'hover&focus'
/** Просто открыт */
 | 'opened'
/** Просто закрыт */
 | 'closed'
/** Наведение ТОЛЬКО на children, а не на тултип */
 | 'hoverAnchor';
export interface TooltipProps {
    /**
     * Относительно какого элемента позиционировать тултип
     */
    anchorElement?: HTMLElement;
    /**
     * Если не указан `anchorElement` то тултип будет позиционироваться
     * относительно дочерних элементов
     */
    children?: React.ReactNode;
    className?: string;
    /**
     * Показывать крестик для закрытия тултипа. По-умолчанию крестик
     * показывается если проп *trigger* не `hover` и не `focus`.
     */
    closeButton?: boolean;
    /**
     * Функция, которая возвращает содержимое тултипа.
     *
     * Если эта функция вернула `null`, то тултип не показывается.
     */
    render?: Nullable<() => React.ReactNode>;
    pos: PopupPosition;
    /**
     * Триггер открытия тултипа
     * ```ts
     * type TooltipTrigger =
     * | 'hover'
     * | 'click'
     * | 'focus'
     * | 'hover&focus'
     * | 'opened'
     * | 'closed'
     * | 'hoverAnchor';
     * ```
     */
    trigger: TooltipTrigger;
    /**
     * Хэндлер, вызываемый при клике по крестику
     */
    onCloseClick?: React.MouseEventHandler<HTMLElement>;
    /**
     * Хэндлер, вызываемый при клике по крестику или
     * снаружи тултипа
     */
    onCloseRequest?: () => void;
    /**
     * Хэндлер, вызываемый при открытии тултипа
     */
    onOpen?: () => void;
    /**
     * Список позиций, которые тултип будет занимать.
     * Если положение тултипа в определенной позиции
     * будет выходить за край экрана, то будет выбрана
     * следующая позиция. Обязательно должен включать
     * позицию указанную в `pos`
     *
     * ```ts
     * type PopupPosition =
     *   'right bottom',
     * | 'right middle',
     * | 'right top',
     * | 'top right',
     * | 'top center',
     * | 'top left',
     * | 'left top',
     * | 'left middle',
     * | 'left bottom',
     * | 'bottom left',
     * | 'bottom center',
     * | 'bottom right'
     * ```
     */
    allowedPositions: PopupPosition[];
    /**
     * Флаг отключения анимации.
     * @default false
     */
    disableAnimations: boolean;
    /**
     * Использовать обертку над children в виде <span />
     * @default true
     */
    useWrapper: boolean;
}
export interface TooltipState {
    opened: boolean;
    focused: boolean;
}
declare class Tooltip extends React.PureComponent<TooltipProps, TooltipState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        children(props: TooltipProps, propName: "children" | "className" | "pos" | "onOpen" | "anchorElement" | "disableAnimations" | "useWrapper" | "closeButton" | "render" | "trigger" | "onCloseClick" | "onCloseRequest" | "allowedPositions", componentName: string): void;
    };
    static defaultProps: {
        pos: string;
        trigger: string;
        allowedPositions: PopupPosition[];
        disableAnimations: boolean;
        useWrapper: boolean;
        closeOnChildrenMouseLeave: boolean;
    };
    static delay: number;
    private static triggersWithoutCloseButton;
    state: TooltipState;
    private theme;
    private hoverTimeout;
    private contentElement;
    private positions;
    private clickedOutside;
    componentWillReceiveProps(nextProps: TooltipProps): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    renderContent: () => JSX.Element | null;
    renderCloseButton(): JSX.Element | null;
    private renderMain;
    private renderPopup;
    private refContent;
    private getPositions;
    private getProps;
    private open;
    private close;
    private clearHoverTimeout;
    private handleMouseEnter;
    private handleMouseLeave;
    private handleClick;
    private handleClickOutsideAnchor;
    private isClickOutsideContent;
    private handleFocus;
    private handleBlur;
    private handleCloseButtonClick;
}
export default Tooltip;
