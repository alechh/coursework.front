"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var warning_1 = tslib_1.__importDefault(require("warning"));
var CustomComboBox_1 = tslib_1.__importDefault(require("../CustomComboBox"));
var ComboBox = /** @class */function (_super) {
  tslib_1.__extends(ComboBox, _super);
  function ComboBox() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.comboboxElement = null;
    return _this;
  }
  ComboBox.prototype.componentDidMount = function () {
    warning_1["default"](this.props.autocomplete === undefined, '`autocompelete` flag is deprecated, please use `drawArrow` and `searchOnFocus` instead');
  };
  /**
      * @public
      */
  ComboBox.prototype.focus = function () {
    if (this.comboboxElement) {
      this.comboboxElement.focus();
    }
  };
  /**
      * @public
      */
  ComboBox.prototype.blur = function () {
    if (this.comboboxElement) {
      this.comboboxElement.blur();
    }
  };
  /**
      * @public Открывает выпадающий список и запускает поиск элементов
      * @param {string} [query] - Текст поиска. По умолчанию берется
      * текст из инпута или результат `valueToString(value)`
      */
  ComboBox.prototype.search = function (query) {
    if (this.comboboxElement) {
      this.comboboxElement.search(query);
    }
  };
  /**
      * @public
      */
  ComboBox.prototype.cancelSearch = function () {
    if (this.comboboxElement) {
      this.comboboxElement.cancelSearch();
    }
  };
  /**
      * @public Открывает выпадающий список
      */
  ComboBox.prototype.open = function () {
    if (this.comboboxElement) {
      this.comboboxElement.open();
    }
  };
  /**
      * @public Закрывает выпадающий список
      */
  ComboBox.prototype.close = function () {
    if (this.comboboxElement) {
      this.comboboxElement.close();
    }
  };
  /**
      * Выделяет текст внутри input
      * @public
      */
  ComboBox.prototype.selectInputText = function () {
    if (this.comboboxElement) {
      this.comboboxElement.selectInputText();
    }
  };
  /**
      * Сбрасывает введенное пользователем значение
      * @public
      */
  ComboBox.prototype.reset = function () {
    if (this.comboboxElement) {
      this.comboboxElement.reset();
    }
  };
  ComboBox.prototype.render = function () {
    var _this = this;
    var _a = this.props,autocomplete = _a.autocomplete,restProps = tslib_1.__rest(_a, ["autocomplete"]);
    var _b = this.props,drawArrow = _b.drawArrow,searchOnFocus = _b.searchOnFocus;
    if (autocomplete !== undefined) {
      drawArrow = !Boolean(autocomplete);
      searchOnFocus = !Boolean(autocomplete);
    }
    return React.createElement(CustomComboBox_1["default"], tslib_1.__assign({}, restProps, { drawArrow: drawArrow, searchOnFocus: searchOnFocus, ref: function ref(element) {return _this.comboboxElement = element;} }));
  };
  ComboBox.__KONTUR_REACT_UI__ = 'ComboBox';
  ComboBox.defaultProps = {
    itemToValue: function itemToValue(item) {return item.value;},
    valueToString: function valueToString(item) {return item.label;},
    renderValue: function renderValue(item) {return item.label;},
    renderItem: function renderItem(item) {return item.label;},
    menuAlign: 'left',
    searchOnFocus: true,
    drawArrow: true };

  return ComboBox;
}(React.Component);
exports["default"] = ComboBox;