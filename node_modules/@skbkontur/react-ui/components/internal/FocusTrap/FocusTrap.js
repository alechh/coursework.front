"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = require("react-dom");
var listenFocusOutside_1 = tslib_1.__importStar(require("../../../lib/listenFocusOutside"));
var FocusTrap = /** @class */function (_super) {
  tslib_1.__extends(FocusTrap, _super);
  function FocusTrap() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.focusOutsideListenerToken = null;
    _this.onClickOutside = function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
      _this.detachListeners();
    };
    _this.attachListeners = function () {
      if (!_this.focusOutsideListenerToken) {
        _this.focusOutsideListenerToken = listenFocusOutside_1["default"]([react_dom_1.findDOMNode(_this)], _this.onClickOutside);
        document.addEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', _this.handleNativeDocClick);
      }
    };
    _this.handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;
      var node = react_dom_1.findDOMNode(_this);
      if (target instanceof Element && listenFocusOutside_1.containsTargetOrRenderContainer(target)(node)) {
        return;
      }
      _this.onClickOutside(event);
    };
    return _this;
  }
  FocusTrap.prototype.componentWillUnmount = function () {
    if (this.focusOutsideListenerToken) {
      this.detachListeners();
    }
  };
  FocusTrap.prototype.render = function () {
    var _this = this;
    var _a = this.props,children = _a.children,onBlur = _a.onBlur;
    return React.cloneElement(React.Children.only(children), {
      onFocus: function onFocus() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _a;
        if (onBlur) {
          _this.attachListeners();
        }
        if (children.props && children.props.onFocus) {
          (_a = children.props).onFocus.apply(_a, args);
        }
      } });

  };
  FocusTrap.prototype.detachListeners = function () {
    if (this.focusOutsideListenerToken) {
      this.focusOutsideListenerToken.remove();
      this.focusOutsideListenerToken = null;
      document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
    }
  };
  FocusTrap.__KONTUR_REACT_UI__ = 'FocusTrap';
  return FocusTrap;
}(React.PureComponent);
exports["default"] = FocusTrap;