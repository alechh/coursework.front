"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_input_mask_1 = tslib_1.__importDefault(require("react-input-mask"));
var MaskedInput_module_less_1 = tslib_1.__importDefault(require("./MaskedInput.module.css"));
var MaskedInput_styles_1 = tslib_1.__importDefault(require("./MaskedInput.styles"));
var Emotion_1 = require("../../../lib/theming/Emotion");
var ThemeConsumer_1 = require("../../ThemeConsumer");
var MaskedInput = /** @class */function (_super) {
  tslib_1.__extends(MaskedInput, _super);
  function MaskedInput(props) {
    var _this = _super.call(this, props) || this;
    _this.input = null;
    _this.reactInputMask = null;
    _this.getValue = function (props) {
      var value = props.value,defaultValue = props.defaultValue;
      return value !== undefined ? value.toString() : defaultValue !== undefined ? defaultValue.toString() : '';
    };
    _this.refInput = function (input) {
      _this.input = input;
    };
    _this.refMaskedInput = function (reactInputMask) {
      _this.reactInputMask = reactInputMask;
    };
    _this.handleChange = function (event) {
      if (event.target.value === _this.state.value) {
        _this.handleUnexpectedInput();
      } else
      {
        _this.setState({ value: event.target.value });
      }
      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
    };
    _this.handleFocus = function (event) {
      _this.setState({ focused: true });
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };
    _this.handleBlur = function (event) {
      _this.setState({ focused: false });
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };
    _this.preprocess = function (newState, oldState, userInput, options) {
      var visibleMaskChars = new Array(options.mask.length).fill(_this.props.maskChar);
      if (newState.value !== oldState.value && userInput === null) {
        _this.setState({
          value: newState.value });

      }
      options.mask.split('').forEach(function (_char, index) {
        if (options.permanents.indexOf(index) > -1) {
          visibleMaskChars[index] = _char;
        }
        if (newState.value[index]) {
          visibleMaskChars[index] = newState.value[index];
        }
      });
      var emptyValue = visibleMaskChars.join('');
      if (_this.state.emptyValue !== emptyValue) {
        _this.setState({
          emptyValue: emptyValue });

      }
      return newState;
    };
    _this.isMaskVisible = function () {return _this.props.alwaysShowMask || _this.state.focused;};
    _this.handleUnexpectedInput = function () {
      if (_this.props.onUnexpectedInput) {
        _this.props.onUnexpectedInput();
      }
    };
    _this.state = {
      value: _this.getValue(props),
      emptyValue: '',
      focused: false };

    return _this;
  }
  MaskedInput.prototype.componentDidMount = function () {
    if (this.reactInputMask) {
      // FIXME: принудительно вызываем beforeMaskedValueChange, чтобы получить emptyValue
      this.reactInputMask.forceUpdate();
    }
  };
  MaskedInput.prototype.componentWillReceiveProps = function (nextProps) {
    if (this.props.value !== nextProps.value) {
      this.setState({
        value: nextProps.value ? nextProps.value.toString() : '' });

    }
  };
  MaskedInput.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  MaskedInput.prototype.renderMain = function () {
    var _a = this.props,maskChar = _a.maskChar,alwaysShowMask = _a.alwaysShowMask,hasLeftIcon = _a.hasLeftIcon,hasRightIcon = _a.hasRightIcon,maxLength = _a.maxLength,onUnexpectedInput = _a.onUnexpectedInput,defaultValue = _a.defaultValue,inputProps = tslib_1.__rest(_a, ["maskChar", "alwaysShowMask", "hasLeftIcon", "hasRightIcon", "maxLength", "onUnexpectedInput", "defaultValue"]);
    return React.createElement("span", { className: MaskedInput_module_less_1["default"].container },
    React.createElement(react_input_mask_1["default"], tslib_1.__assign({}, inputProps, { maskChar: null, beforeMaskedValueChange: this.preprocess, alwaysShowMask: false, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, value: this.state.value, inputRef: this.refInput, ref: this.refMaskedInput })),
    this.isMaskVisible() && React.createElement("span", { className: Emotion_1.cx(MaskedInput_module_less_1["default"].inputMask, MaskedInput_styles_1["default"].inputMask(this.theme)) },
    React.createElement("span", { style: { color: 'transparent' } }, this.state.emptyValue.slice(0, this.state.value.length)),
    this.state.emptyValue.slice(this.state.value.length)));
  };
  MaskedInput.__KONTUR_REACT_UI__ = 'MaskedInput';
  return MaskedInput;
}(React.Component);
exports["default"] = MaskedInput;