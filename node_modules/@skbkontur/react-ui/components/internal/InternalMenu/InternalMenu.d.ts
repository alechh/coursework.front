import * as React from 'react';
import { ScrollContainerScrollState } from '../../ScrollContainer/ScrollContainer';
interface MenuProps {
    children?: React.ReactNode;
    hasShadow?: boolean;
    maxHeight?: number | string;
    onItemClick?: (event: React.SyntheticEvent<HTMLElement>) => void;
    width?: number | string;
    preventWindowScroll?: boolean;
    onKeyDown?: (event: React.KeyboardEvent<HTMLElement>) => void;
    header?: React.ReactNode;
    footer?: React.ReactNode;
    cyclicSelection?: boolean;
    initialSelectedItemIndex?: number;
}
interface MenuState {
    highlightedIndex: number;
    maxHeight: number | string;
    scrollState: ScrollContainerScrollState;
}
export default class InternalMenu extends React.Component<MenuProps, MenuState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        width: string;
        maxHeight: number;
        hasShadow: boolean;
        preventWindowScroll: boolean;
        cyclicSelection: boolean;
        initialSelectedItemIndex: number;
    };
    state: MenuState;
    private theme;
    private scrollContainer;
    private highlighted;
    private rootElement;
    private header;
    private footer;
    private getProps;
    componentDidMount(): void;
    componentDidUpdate(prevProps: MenuProps, prevState: MenuState): void;
    componentWillReceiveProps(nextProps: MenuProps): void;
    focus(): void;
    render(): JSX.Element;
    private renderMain;
    private renderHeader;
    private renderFooter;
    private focusOnRootElement;
    private shouldRecalculateMaxHeight;
    private calculateMaxHeight;
    private setInitialSelection;
    private refScrollContainer;
    private refHighlighted;
    private scrollToSelected;
    private select;
    private highlightItem;
    private unhighlight;
    private move;
    private moveUp;
    private moveDown;
    private isEmpty;
    private handleKeyDown;
    private handleScrollStateChange;
}
export {};
