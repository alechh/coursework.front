"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var utils_1 = require("../../lib/utils");
// TODO We should output state too
var renderPropsDesc = function renderPropsDesc(props) {
  return Object.keys(props).
  map(function (key) {
    var value = props[key];
    switch (typeof value) {
      case 'boolean':
        return value ? key : key + ": false";
      case 'string':
        return key + ": \"" + value + "\"";
      case 'object':
        if (React.isValidElement(value)) {
          return React.createElement('span', {}, [key + ": ", value]);
        }
        return key + ": " + JSON.stringify(value);
      default:
        return key + ": " + value;}

  }).
  map(function (node, index, nodes) {return React.createElement("span", { key: index },
    node,
    " ",
    index + 1 < nodes.length ? ', ' : null);});
};
// Known limitation: Don't work when component have `propTypes` static field
var ComponentTable = /** @class */function (_super) {
  tslib_1.__extends(ComponentTable, _super);
  function ComponentTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ComponentTable.prototype.render = function () {
    var _a = this.props,_b = _a.rows,rows = _b === void 0 ? [] : _b,_c = _a.cols,cols = _c === void 0 ? [] : _c,presetProps = _a.presetProps,presetState = _a.presetState,Component = _a.Component;
    return React.createElement("table", { style: { borderSpacing: 10, marginBottom: 20 } },
    React.createElement("caption", { style: { captionSide: 'bottom' } }, renderPropsDesc(presetProps)),
    React.createElement("thead", null,
    React.createElement("tr", null,
    React.createElement("th", null),
    cols.map(function (_a, i) {
      var _b = _a.props,colProps = _b === void 0 ? {} : _b;
      return React.createElement("th", { style: { whiteSpace: 'nowrap' }, key: i }, renderPropsDesc(colProps));
    }))),
    React.createElement("tbody", null, rows.map(function (_a, rowIndex) {
      var _b = _a.props,rowProps = _b === void 0 ? {} : _b,_c = _a.state,rowState = _c === void 0 ? {} : _c;
      return React.createElement("tr", { key: rowIndex },
      React.createElement("td", { style: { whiteSpace: 'nowrap' } }, renderPropsDesc(rowProps)),
      cols.map(function (_a, colIndex) {
        var _b = _a.props,colProps = _b === void 0 ? {} : _b,_c = _a.state,colState = _c === void 0 ? {} : _c;
        return React.createElement("td", { key: colIndex },
        React.createElement(Component, tslib_1.__assign({}, presetProps, rowProps, colProps, { ref:
          // NOTE Call setState from outside is bad practice, but here it needed for test state combinations
          utils_1.isFunctionalComponent(Component) ?
          undefined :
          function (el) {
            return el &&
            el.setState(function (state) {return tslib_1.__assign({}, state, presetState, rowState, colState);});
          } })));
      }));
    })));
  };
  ComponentTable.defaultProps = { presetProps: {}, presetState: {} };
  return ComponentTable;
}(React.Component);
exports.ComponentTable = ComponentTable;