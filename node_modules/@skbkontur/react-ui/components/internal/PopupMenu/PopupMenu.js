"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var identifiers_1 = require("../../../lib/events/keyboard/identifiers");
var InternalMenu_1 = tslib_1.__importDefault(require("../InternalMenu/InternalMenu"));
var Popup_1 = tslib_1.__importDefault(require("../../Popup"));
var RenderLayer_1 = tslib_1.__importDefault(require("../../RenderLayer"));
var PopupMenuPositions_1 = tslib_1.__importDefault(require("./PopupMenuPositions"));
var validatePositions_1 = tslib_1.__importDefault(require("./validatePositions"));
var PopupMenu_module_less_1 = tslib_1.__importDefault(require("./PopupMenu.module.css"));
exports.PopupMenuType = {
  Dropdown: 'dropdown',
  Tooltip: 'tooltip' };

var PopupMenu = /** @class */function (_super) {
  tslib_1.__extends(PopupMenu, _super);
  function PopupMenu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      menuVisible: false,
      firstItemShouldBeSelected: false };

    _this.captionWrapper = null;
    _this.savedFocusableElement = null;
    _this.menu = null;
    _this.open = function () {return _this.showMenu();};
    _this.close = function () {return _this.hideMenu();};
    _this.refInternalMenu = function (element) {return _this.menu = element;};
    _this.handleOpen = function () {
      if (_this.menu) {
        _this.menu.focus();
      }
    };
    _this.renderCaption = function () {
      if (typeof _this.props.caption === 'function') {
        var caption = _this.props.caption({
          opened: _this.state.menuVisible,
          openMenu: _this.showMenu,
          closeMenu: _this.hideMenu,
          toggleMenu: _this.toggleMenu });

        return React.createElement("span", { className: PopupMenu_module_less_1["default"].caption, ref: function ref(element) {return _this.captionWrapper = element;} }, caption);
      }
      return React.createElement("span", { onClick: _this.handleCaptionClick, onKeyDown: _this.handleCaptionKeyDown, ref: function ref(element) {return _this.captionWrapper = element;}, className: PopupMenu_module_less_1["default"].caption }, _this.props.caption);
    };
    _this.hideMenuWithoutFocusing = function () {return _this.hideMenu();};
    _this.showMenu = function (firstItemShouldBeSelected) {
      _this.saveFocus();
      _this.setState({
        menuVisible: true,
        firstItemShouldBeSelected: firstItemShouldBeSelected },
      function () {
        _this.handleChangeMenuVisible(false);
      });
    };
    _this.hideMenu = function (restoreFocus) {
      _this.setState({
        menuVisible: false,
        firstItemShouldBeSelected: false },
      function () {
        _this.handleChangeMenuVisible(!!restoreFocus);
      });
    };
    _this.toggleMenu = function () {
      _this.state.menuVisible ? _this.hideMenu() : _this.showMenu();
    };
    _this.handleCaptionClick = function () {
      _this.toggleMenu();
    };
    _this.handleCaptionKeyDown = function (e) {
      if (identifiers_1.someKeys(identifiers_1.isKeyEnter, identifiers_1.isKeySpace, identifiers_1.isKeyArrowVertical)(e)) {
        e.preventDefault();
        _this.showMenu(true);
      }
    };
    _this.handleKeyDown = function (e) {
      if (identifiers_1.isKeyEscape(e)) {
        var restoreFocus = true;
        _this.hideMenu(restoreFocus);
      }
    };
    _this.saveFocus = function () {
      if (document) {
        _this.savedFocusableElement = document.activeElement;
      }
    };
    _this.restoreFocus = function () {
      if (_this.savedFocusableElement) {
        _this.savedFocusableElement.focus();
        _this.savedFocusableElement = null;
      }
    };
    _this.handleChangeMenuVisible = function (focusShouldBeRestored) {
      if (focusShouldBeRestored) {
        _this.restoreFocus();
      }
      if (typeof _this.props.onChangeMenuState === 'function') {
        _this.props.onChangeMenuState(_this.state.menuVisible, focusShouldBeRestored);
      }
    };
    _this.handleItemSelection = function (event) {
      if (event.isDefaultPrevented()) {
        return;
      }
      if (event.type === 'keydown') {
        event.preventDefault();
      }
      var restoreFocus = event.type === 'keydown';
      _this.hideMenu(restoreFocus);
    };
    return _this;
  }
  PopupMenu.prototype.render = function () {
    return React.createElement(RenderLayer_1["default"], { onClickOutside: this.hideMenuWithoutFocusing, onFocusOutside: this.hideMenuWithoutFocusing, active: this.state.menuVisible },
    React.createElement("div", { className: PopupMenu_module_less_1["default"].container },
    this.renderCaption(),
    this.captionWrapper &&
    this.props.children && React.createElement(Popup_1["default"], { anchorElement: this.captionWrapper, opened: this.state.menuVisible, hasShadow: true, margin: this.props.popupMargin, hasPin: this.props.popupHasPin, pinOffset: this.props.popupPinOffset, positions: this.getPositions(), disableAnimations: this.props.disableAnimations, onOpen: this.handleOpen },
    React.createElement(InternalMenu_1["default"], { hasShadow: false, maxHeight: this.props.menuMaxHeight || 'none', onKeyDown: this.handleKeyDown, width: this.props.menuWidth || 'auto', onItemClick: this.handleItemSelection, cyclicSelection: false, ref: this.refInternalMenu, initialSelectedItemIndex: this.state.firstItemShouldBeSelected ? 0 : -1, header: this.props.header, footer: this.props.footer }, this.props.children))));
  };
  PopupMenu.prototype.getPositions = function () {
    if (this.props.positions && validatePositions_1["default"](this.props.positions)) {
      return this.props.positions;
    }
    return PopupMenuPositions_1["default"];
  };
  PopupMenu.__KONTUR_REACT_UI__ = 'PopupMenu';
  PopupMenu.defaultProps = {
    positions: PopupMenuPositions_1["default"],
    type: exports.PopupMenuType.Tooltip,
    popupHasPin: true,
    popupMargin: 0,
    disableAnimations: false };

  PopupMenu.Type = exports.PopupMenuType;
  return PopupMenu;
}(React.Component);
exports["default"] = PopupMenu;