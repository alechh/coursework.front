import * as React from 'react';
import { PopupPosition } from '../../Popup';
export interface PopupMenuCaptionProps {
    opened: boolean;
    openMenu: (firstItemShouldBeSelected?: boolean) => void;
    closeMenu: (restoreFocus?: boolean) => void;
    toggleMenu: () => void;
}
export interface PopupMenuProps {
    children?: React.ReactNode;
    /** Максимальная высота меню */
    menuMaxHeight?: number | string;
    /** Ширина меню */
    menuWidth?: number | string;
    /**
     * Элемент или функция возвращающая элемент,
     * если передана, используется вместо ```caption```,
     * в таком случае управлять открытием и закрытием меню
     * придется в этой функции
     */
    caption: React.ReactNode | ((props: PopupMenuCaptionProps) => React.ReactNode);
    header?: React.ReactNode;
    footer?: React.ReactNode;
    /**  Массив разрешенных положений меню относительно caption'а. */
    positions?: PopupPosition[];
    /** Колбэк, вызываемый после открытия/закрытия меню */
    onChangeMenuState?: (isOpened: boolean, restoreFocus: boolean) => void;
    /** Пропсы, передающиеся в Popup */
    popupHasPin?: boolean;
    popupMargin?: number;
    popupPinOffset?: number;
    type?: 'dropdown' | 'tooltip';
    disableAnimations: boolean;
}
interface PopupMenuState {
    menuVisible: boolean;
    firstItemShouldBeSelected?: boolean;
}
export declare const PopupMenuType: {
    Dropdown: string;
    Tooltip: string;
};
export default class PopupMenu extends React.Component<PopupMenuProps, PopupMenuState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        positions: PopupPosition[];
        type: string;
        popupHasPin: boolean;
        popupMargin: number;
        disableAnimations: boolean;
    };
    static Type: {
        Dropdown: string;
        Tooltip: string;
    };
    state: {
        menuVisible: boolean;
        firstItemShouldBeSelected: boolean;
    };
    private captionWrapper;
    private savedFocusableElement;
    private menu;
    render(): JSX.Element;
    open: () => void;
    close: () => void;
    private refInternalMenu;
    private handleOpen;
    private renderCaption;
    private hideMenuWithoutFocusing;
    private getPositions;
    private showMenu;
    private hideMenu;
    private toggleMenu;
    private handleCaptionClick;
    private handleCaptionKeyDown;
    private handleKeyDown;
    private saveFocus;
    private restoreFocus;
    private handleChangeMenuVisible;
    private handleItemSelection;
}
export {};
