"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var ComponentTable_1 = require("./ComponentTable");
var ComponentCombinator = /** @class */function (_super) {
  tslib_1.__extends(ComponentCombinator, _super);
  function ComponentCombinator() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      page: 0 };

    _this.prevPage = function () {
      _this.setState(function (_a) {
        var page = _a.page;
        return {
          page: page - 1 };

      });
    };
    _this.nextPage = function () {
      _this.setState(function (_a) {
        var page = _a.page;
        return {
          page: page + 1 };

      });
    };
    return _this;
  }
  ComponentCombinator.prototype.render = function () {
    var _a;
    var page = this.state.page;
    var _b = this.props,combinations = _b.combinations,Component = _b.Component,presetProps = _b.presetProps,presetState = _b.presetState;
    var pages = [];
    var row = 0;
    var sizes = combinations.map(function (c) {return c.length;});
    var flatCombinations = (_a = []).concat.apply(_a, combinations);
    for (var j = 0; j < sizes.length - 1; j++) {
      pages.push({
        offsetX: row,
        offsetY: row += sizes[j] });

    }
    var pageOffsets = pages[page];
    return React.createElement("div", null,
    React.createElement("div", { id: "paginator" },
    React.createElement("button", { disabled: page === 0, id: "prev-page", onClick: this.prevPage }, "Prev"),
    ' ',
    React.createElement("small", null, page + 1 + " / " + pages.length),
    ' ',
    React.createElement("button", { disabled: page + 1 >= pages.length, id: "next-page", onClick: this.nextPage }, "Next")),
    React.createElement("div", null, pageOffsets && React.createElement(ComponentTable_1.ComponentTable, { key: page, Component: Component, presetProps: presetProps, presetState: presetState, rows: flatCombinations.slice(pageOffsets.offsetY, flatCombinations.length), cols: flatCombinations.slice(pageOffsets.offsetX, pageOffsets.offsetY) })));
  };
  ComponentCombinator.defaultProps = {
    props: [],
    states: [],
    presetProps: {},
    presetState: {} };

  return ComponentCombinator;
}(React.Component);
exports.ComponentCombinator = ComponentCombinator;