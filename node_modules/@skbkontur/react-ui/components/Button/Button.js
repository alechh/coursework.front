"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var Corners_1 = tslib_1.__importDefault(require("./Corners"));
require("../ensureOldIEClassName");
var Emotion_1 = require("../../lib/theming/Emotion");
var Button_module_less_1 = tslib_1.__importDefault(require("./Button.module.css"));
var Button_styles_1 = tslib_1.__importDefault(require("./Button.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var Button = /** @class */function (_super) {
  tslib_1.__extends(Button, _super);
  function Button() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      focusedByTab: false };

    _this.node = null;
    _this.handleFocus = function (e) {
      if (!_this.props.disabled && !_this.props.disableFocus) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (tabListener_1["default"].isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
        if (_this.props.onFocus) {
          _this.props.onFocus(e);
        }
      }
    };
    _this.handleBlur = function (e) {
      _this.setState({ focusedByTab: false });
      if (!_this.props.disabled && !_this.props.disableFocus) {
        if (_this.props.onBlur) {
          _this.props.onBlur(e);
        }
      }
    };
    _this._ref = function (node) {
      _this.node = node;
    };
    return _this;
  }
  Button.prototype.componentDidMount = function () {
    if (this.props.autoFocus) {
      tabListener_1["default"].isTabPressed = true;
      this.focus();
    }
  };
  /**
      * @public
      */
  Button.prototype.focus = function () {
    if (this.node) {
      this.node.focus();
    }
  };
  /**
      * @public
      */
  Button.prototype.blur = function () {
    if (this.node) {
      this.node.blur();
    }
  };
  Button.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Button.prototype.renderMain = function () {
    var _a, _b, _c, _d, _e;
    var _f = this.props.corners,corners = _f === void 0 ? 0 : _f;
    var sizeClass = this.getSizeClassName();
    var isError = !!this.props.error;
    var isWarning = !!this.props.warning;
    var rootProps = {
      // By default the type attribute is 'submit'. IE8 will fire a click event
      // on this button if somewhere on the page user presses Enter while some
      // input is focused. So we set type to 'button' by default.
      type: this.props.type,
      className: Emotion_1.cx((_a = {},
      _a[Button_module_less_1["default"].root] = true,
      _a[Button_styles_1["default"].root(this.theme)] = true,
      _a[Emotion_1.cx(Button_styles_1["default"][this.props.use] && Button_styles_1["default"][this.props.use](this.theme)) ||
      Button_styles_1["default"]["default"](this.theme)] = true,
      _a[Button_module_less_1["default"].active] = !!this.props.active,
      _a[Button_module_less_1["default"].checked] = !!this.props.checked,
      _a[Button_styles_1["default"].checked(this.theme)] = !!this.props.checked,
      _a[Button_module_less_1["default"].disabled] = !!this.props.disabled || !!this.props.loading,
      _a[Button_styles_1["default"].disabled(this.theme)] = !!this.props.disabled || !!this.props.loading,
      _a[Button_module_less_1["default"].errorRoot] = isError,
      _a[Button_module_less_1["default"].warningRoot] = isWarning,
      _a[Button_module_less_1["default"].error] = isError,
      _a[Button_module_less_1["default"].warning] = isWarning,
      _a[Button_module_less_1["default"].narrow] = !!this.props.narrow,
      _a[Button_module_less_1["default"].noPadding] = !!this.props._noPadding,
      _a[Button_module_less_1["default"].noRightPadding] = !!this.props._noRightPadding,
      _a[Button_module_less_1["default"].buttonWithIcon] = !!this.props.icon,
      _a[sizeClass] = true,
      _a[Button_module_less_1["default"].focus] = this.state.focusedByTab || !!this.props.visuallyFocused,
      _a[Button_styles_1["default"].focus(this.theme)] = this.state.focusedByTab || !!this.props.visuallyFocused,
      _a[Button_module_less_1["default"].borderless] = !!this.props.borderless,
      _a)),
      style: {
        borderTopLeftRadius: corners & Corners_1["default"].TOP_LEFT ? 0 : undefined,
        borderTopRightRadius: corners & Corners_1["default"].TOP_RIGHT ? 0 : undefined,
        borderBottomRightRadius: corners & Corners_1["default"].BOTTOM_RIGHT ? 0 : undefined,
        borderBottomLeftRadius: corners & Corners_1["default"].BOTTOM_LEFT ? 0 : undefined,
        textAlign: this.props.align },

      disabled: this.props.disabled || this.props.loading,
      onClick: this.props.onClick,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onKeyDown: this.props.onKeyDown,
      onMouseEnter: this.props.onMouseEnter,
      onMouseLeave: this.props.onMouseLeave,
      onMouseOver: this.props.onMouseOver,
      tabIndex: this.props.disableFocus ? -1 : 0 };

    var wrapProps = {
      className: Emotion_1.cx((_b = {},
      _b[Button_module_less_1["default"].wrap] = true,
      _b[Button_styles_1["default"].wrap(this.theme)] = true,
      _b[Button_module_less_1["default"].wrap_arrow] = !!this.props.arrow,
      _b[Button_module_less_1["default"].wrap_arrow_left] = this.props.arrow === 'left',
      _b)),
      style: {
        width: this.props.width } };


    var error = null;
    if (this.props.error) {
      error = React.createElement("div", { className: Emotion_1.cx(Button_module_less_1["default"].error, Button_styles_1["default"].error(this.theme)) });
    } else
    if (this.props.warning) {
      error = React.createElement("div", { className: Emotion_1.cx(Button_module_less_1["default"].warning, Button_styles_1["default"].warning(this.theme)) });
    }
    var loading = null;
    if (this.props.loading) {
      loading = React.createElement("div", { className: Button_module_less_1["default"].loading });
    }
    var icon = this.props.icon;
    if (this.props.icon) {
      icon = React.createElement("span", { className: Button_module_less_1["default"].icon }, this.props.icon);
    }
    var arrow = null;
    if (this.props.arrow) {
      arrow = React.createElement("div", { className: Emotion_1.cx((_c = {},
        _c[Button_module_less_1["default"].arrow] = true,
        _c[Button_module_less_1["default"].arrow_left] = this.props.arrow === 'left',
        _c[Button_module_less_1["default"].arrow_loading || ''] = !!this.props.loading,
        _c[Button_module_less_1["default"].arrow_warning || ''] = isWarning,
        _c[Button_module_less_1["default"].arrow_error || ''] = isError,
        _c[Button_styles_1["default"].arrow_warning(this.theme)] = isWarning,
        _c[Button_styles_1["default"].arrow_error(this.theme)] = isError,
        _c)) });
    }
    // Force disable all props and features, that cannot be use with Link
    if (this.props.use === 'link') {
      rootProps.className = Emotion_1.cx((_d = {},
      _d[Button_module_less_1["default"].root] = true,
      _d[Button_styles_1["default"].root(this.theme)] = true,
      _d[Button_module_less_1["default"].link] = true,
      _d[Button_styles_1["default"].link(this.theme)] = true,
      _d[Button_module_less_1["default"].disabled] = !!this.props.disabled,
      _d[Button_styles_1["default"].disabled(this.theme)] = !!this.props.disabled,
      _d[Button_module_less_1["default"].buttonWithIcon] = !!this.props.icon,
      _d[sizeClass] = true,
      _d[Button_module_less_1["default"].focus] = this.state.focusedByTab || !!this.props.visuallyFocused,
      _d[Button_styles_1["default"].focus(this.theme)] = this.state.focusedByTab || !!this.props.visuallyFocused,
      _d));
      Object.assign(wrapProps, {
        className: Emotion_1.cx(Button_module_less_1["default"].wrap, (_e = {},
        _e[Button_module_less_1["default"].wrap_link] = this.props.use === 'link',
        _e)),
        style: { width: wrapProps.style.width } });

      rootProps.style.textAlign = undefined;
      loading = null;
      arrow = null;
    }
    return React.createElement("span", tslib_1.__assign({}, wrapProps),
    React.createElement("button", tslib_1.__assign({ ref: this._ref }, rootProps),
    error,
    loading,
    arrow,
    React.createElement("div", { className: Button_module_less_1["default"].caption },
    icon,
    this.props.children)));
  };
  Button.prototype.getSizeClassName = function () {
    switch (this.props.size) {
      case 'large':
        return Emotion_1.cx(Button_module_less_1["default"].sizeLarge, Button_styles_1["default"].sizeLarge(this.theme));
      case 'medium':
        return Emotion_1.cx(Button_module_less_1["default"].sizeMedium, Button_styles_1["default"].sizeMedium(this.theme));
      case 'small':
      default:
        return Emotion_1.cx(Button_module_less_1["default"].sizeSmall, Button_styles_1["default"].sizeSmall(this.theme));}

  };
  Button.__KONTUR_REACT_UI__ = 'Button';
  Button.__BUTTON__ = true;
  Button.TOP_LEFT = Corners_1["default"].TOP_LEFT;
  Button.TOP_RIGHT = Corners_1["default"].TOP_RIGHT;
  Button.BOTTOM_RIGHT = Corners_1["default"].BOTTOM_RIGHT;
  Button.BOTTOM_LEFT = Corners_1["default"].BOTTOM_LEFT;
  Button.defaultProps = {
    use: 'default',
    size: 'small',
    type: 'button' };

  return Button;
}(React.Component);
exports["default"] = Button;
exports.isButton = function (child) {
  return React.isValidElement(child) ? child.type.hasOwnProperty('__BUTTON__') : false;
};