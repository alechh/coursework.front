import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ButtonSize } from '../Button';
import { Nullable } from '../../typings/utility-types';
export declare type SwitcherSize = ButtonSize;
export interface SwitcherProps {
    /**
     * Список строк или список элементов типа `{ label: string, value: string }`
     */
    items: Array<string | SwitcherItem>;
    value?: string;
    onChange?: (event: {
        target: {
            value: string;
        };
    }, value: string) => void;
    label?: string;
    error?: boolean;
    /** Размер */
    size?: SwitcherSize;
}
export interface SwitcherState {
    focusedIndex: Nullable<number>;
}
interface SwitcherItem {
    label: string;
    value: string;
}
declare class Switcher extends React.Component<SwitcherProps, SwitcherState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        error: PropTypes.Requireable<boolean>;
        items: PropTypes.Validator<(string | null | undefined)[] | (PropTypes.InferProps<{
            label: PropTypes.Requireable<string>;
            value: PropTypes.Requireable<string>;
        }> | null | undefined)[]>;
        label: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    state: SwitcherState;
    private theme;
    render(): JSX.Element;
    private renderMain;
    private selectItem;
    private _extractPropsFromItem;
    private _extractValuesFromItems;
    private move;
    private _focus;
    private handleKey;
    private _handleFocus;
    private _handleBlur;
    private _renderItems;
}
export default Switcher;
