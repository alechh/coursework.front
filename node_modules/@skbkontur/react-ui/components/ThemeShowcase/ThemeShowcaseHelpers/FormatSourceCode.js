"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var warning_1 = tslib_1.__importDefault(require("warning"));
var ThemeShowcase_module_less_1 = tslib_1.__importDefault(require("../ThemeShowcase.module.css"));
var currentEnvironment_1 = require("../../internal/currentEnvironment");
function formatSourceCode(input, componentName) {
  var regEx = /\.css\(.*\.__makeTemplateObject\((\[[\S\s]+\]),\s*(\[[\S\s]+\])\)\),\s*([\s\S]+)\)/gm;
  var sourceParts = regEx.exec(input);
  if (!sourceParts) {
    warning_1["default"](false, 'Could not parse jsStyles for source');
    return React.createElement("span", null, input);
  }
  var cookedAsString = sourceParts[1];
  var rawAsString = sourceParts[2];
  var rawArray = JSON.parse(rawAsString);
  var cookedArray = JSON.parse(cookedAsString);
  warning_1["default"](cookedArray.length === rawArray.length, 'Raw and Cooked arrays have different length, consider revising');
  var variablesArray = parseVariables(sourceParts[3]);
  warning_1["default"](cookedArray.length === variablesArray.length + 1, 'Variables array has suspicious length, consider revising');
  var tokens = cookedArray.map(function (literal, index) {
    return React.createElement(React.Fragment, { key: "group_" + index },
    React.createElement("span", null, literal),
    variablesArray[index] && renderVariables(variablesArray[index], componentName));
  });
  return React.createElement(React.Fragment, null,
  React.createElement("span", { key: 'prefix' }, 'css: {'),
  tokens,
  React.createElement("span", { key: "suffix" }, '}'));
}
exports.formatSourceCode = formatSourceCode;
function renderVariables(variableString, componentName) {
  if (currentEnvironment_1.isDevelopmentEnv) {
    variableString = variableString.
    replace(/ColorFunctions_[\d]+\.default\./g, 'ColorFunctions.').
    replace(/DimensionFunctions_[\d]+\.default\./g, 'DimensionFunctions.').
    replace(/AnimationKeyframes_[\d]+\.AnimationKeyframes\./g, 'AnimationKeyframes.');
  } else
  {
    // TODO: replace ColorFunctions via captured group
    variableString = variableString.
    replace(/\b[a-z0-9]{1,2}\.default\.lighten/gi, 'ColorFunctions.lighten').
    replace(/\b[a-z0-9]{1,2}\.default\.darken/gi, 'ColorFunctions.darken').
    replace(/\b[a-z0-9]{1,2}\.default\.constrast/gi, 'ColorFunctions.contrast').
    replace(/\b[a-z0-9]{1,2}\.default\.red/gi, 'ColorFunctions.red').
    replace(/\b[a-z0-9]{1,2}\.default\.green/gi, 'ColorFunctions.green').
    replace(/\b[a-z0-9]{1,2}\.default\.blue/gi, 'ColorFunctions.blue').
    replace(/\b[a-z0-9]{1,2}\.default\.alpha/gi, 'ColorFunctions.alpha').
    replace(/\b[a-z0-9]{1,2}\.default\.shift/gi, 'DimensionFunctions.shift').
    replace(/\b[a-z0-9]{1,2}\.AnimationKeyframes\./gi, 'AnimationKeyframes.');
  }
  var className = getClassName(variableString, componentName);
  var theme = getTheme(variableString);
  return React.createElement(React.Fragment, null,
  React.createElement("span", null, '${'),
  className && renderClassName(className),
  !className && theme && renderTheme(theme),
  !className && !theme && renderUnknown(variableString),
  React.createElement("span", null, '}'));
}
function getClassName(variableString, componentName) {
  var classNameRegExp;
  if (currentEnvironment_1.isDevelopmentEnv) {
    classNameRegExp = new RegExp(componentName + '_module_less_[\\d]+\\.default\\.', 'i');
  } else
  {
    classNameRegExp = /[\w]+\.default\./;
  }
  if (classNameRegExp.test(variableString)) {
    return variableString.replace(classNameRegExp, '');
  }
  return null;
}
function renderClassName(className) {
  return React.createElement(React.Fragment, null,
  React.createElement("span", { className: ThemeShowcase_module_less_1["default"].cssClassObject }, "classNames."),
  React.createElement("span", { className: ThemeShowcase_module_less_1["default"].cssClassName }, className));
}
function getTheme(variableString) {
  var themeRegExp;
  if (currentEnvironment_1.isDevelopmentEnv) {
    themeRegExp = /\bt(?:\.([a-zA-Z0-9]+))?\b/gm;
  } else
  {
    themeRegExp = /\b[a-z0-9]{1,2}(?:\.([a-zA-Z0-9]+))\b/gim;
  }
  if (themeRegExp.test(variableString)) {
    themeRegExp.lastIndex = 0;
    var match = null;
    var result = [];
    do {
      var start = themeRegExp.lastIndex;
      match = themeRegExp.exec(variableString);
      if (match) {
        var textBefore = variableString.substring(start, match.index);
        var key = start + "_" + match.index;
        var themeProp = match[1];
        result.push(React.createElement("span", { key: key + "_textBefore" }, textBefore));
        result.push(React.createElement("span", { key: key + "_themeObject", className: ThemeShowcase_module_less_1["default"].cssThemeObject },
        "theme",
        themeProp ? '.' : ''));
        if (themeProp) {
          result.push(React.createElement("span", { key: key + "_themePropName", className: ThemeShowcase_module_less_1["default"].cssThemeProp }, themeProp));
        }
      } else
      {
        result.push(React.createElement("span", { key: start + "_" + variableString.length + "_textAfter" }, variableString.substring(start)));
      }
    } while (match);
    return result;
  }
  return null;
}
function renderTheme(children) {
  return React.createElement(React.Fragment, null, children);
}
function renderUnknown(unknown) {
  return React.createElement("span", null, unknown);
}
function parseVariables(input) {
  var depth = 0;
  var variables = [''];
  input.
  replace(/[\r\n]/g, '').
  split('').
  forEach(function (c) {
    var currentIndex = Math.max(0, variables.length - 1);
    if (c === '(') {
      depth++;
      variables[currentIndex] += c;
    } else
    if (c === ',') {
      depth > 0 ? variables[currentIndex] += c : variables.push('');
    } else
    if (c === ' ') {
      var currentVariable = variables[currentIndex];
      if (depth > 0 || currentVariable.length > 0 && !currentVariable.endsWith(' ')) {
        variables[currentIndex] += c;
      }
    } else
    if (c === ')') {
      depth--;
      variables[currentIndex] += c;
    } else
    {
      variables[currentIndex] += c;
    }
  });
  return variables;
}