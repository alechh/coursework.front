"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ThemeFactory_1 = tslib_1.__importDefault(require("../../../lib/theming/ThemeFactory"));
var FlatTheme_1 = tslib_1.__importDefault(require("../../../lib/theming/themes/FlatTheme"));
var Supports_1 = require("../../internal/Supports");
var FormatSourceCode_1 = require("./FormatSourceCode");
var callsCount = 0;
var executionTime = 0;
var ALL_USED_VARIABLES_SET = new Set();
exports.COMPONENT_DESCRIPTIONS = {};
exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE = {};
if (Supports_1.IS_PROXY_SUPPORTED) {
  var baseThemes_1 = [];
  baseThemes_1.push(ThemeFactory_1["default"].getDefaultTheme());
  baseThemes_1.push(ThemeFactory_1["default"].create(FlatTheme_1["default"]));
  var componentsContext_1 = require.context('../../', true, /\.styles.ts$/);
  componentsContext_1.keys().forEach(function (fileName) {
    var fileNameStart = fileName.lastIndexOf('/') + 1;
    var componentName = fileName.substring(fileNameStart).replace('.styles.ts', '');
    var componentDescription = {};
    var jsStyles = componentsContext_1(fileName)["default"];
    Object.keys(jsStyles).forEach(function (elementName) {
      var jsStyle = jsStyles[elementName];
      var variablesAccumulator = new Set();
      var dependencies = {};
      var elementProxyHandler = getProxyHandler(variablesAccumulator, dependencies);
      var themes = baseThemes_1.map(function (t) {return new Proxy(t, elementProxyHandler);});
      themes.forEach(function (t) {return jsStyle(t);});
      var variables = Array.from(variablesAccumulator);
      if (variables.length > 0) {
        var contents_1 = FormatSourceCode_1.formatSourceCode(jsStyle.toString(), componentName);
        componentDescription[elementName] = { contents: contents_1, variables: variables, dependencies: dependencies };
        variables.forEach(function (variableName) {
          if (!exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName]) {
            exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName] = {};
          }
          var variableNode = exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName];
          if (!variableNode[componentName]) {
            variableNode[componentName] = {};
          }
          var componentNode = variableNode[componentName];
          if (!componentNode[elementName]) {
            componentNode[elementName] = {
              contents: contents_1,
              dependencies: dependencies,
              variables: [variableName] };

          } else
          if (!componentNode[elementName].variables.includes(variableName)) {
            componentNode[elementName].contents = contents_1;
            componentNode[elementName].dependencies = dependencies;
            componentNode[elementName].variables.push(variableName);
          }
          var dependenciesList = dependencies[variableName];
          if (dependenciesList) {
            dependenciesList.forEach(function (dependencyName) {
              if (!exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName]) {
                exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName] = {};
              }
              var dependencyNode = exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName];
              if (!dependencyNode[componentName]) {
                dependencyNode[componentName] = exports.COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName][componentName];
              }
            });
          }
        });
      }
    });
    exports.COMPONENT_DESCRIPTIONS[componentName] = componentDescription;
  });
}
function getProxyHandler(accumulator, dependencies) {
  var accessLevel = 0;
  var rootProp = '';
  return {
    get: function get(target, prop, receiver) {
      var propName = String(prop);
      ALL_USED_VARIABLES_SET.add(propName);
      if (accessLevel === 0) {
        rootProp = propName;
        accumulator.add(propName);
      } else
      {
        if (!dependencies[rootProp]) {
          dependencies[rootProp] = [propName];
        } else
        if (!dependencies[rootProp].includes(propName)) {
          dependencies[rootProp].push(propName);
        }
      }
      accessLevel++;
      var start = performance.now();
      var result = Reflect.get(target, prop, receiver);
      executionTime += performance.now() - start;
      callsCount++;
      accessLevel--;
      return result;
    } };

}
exports.ALL_USED_VARIABLES = Array.from(ALL_USED_VARIABLES_SET);
exports.CALLS_COUNT = callsCount;
exports.EXECUTION_TIME = executionTime;