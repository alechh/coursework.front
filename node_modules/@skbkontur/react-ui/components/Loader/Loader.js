"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var LayoutEvents_1 = tslib_1.__importDefault(require("../../lib/LayoutEvents"));
// Note SpinnerType нужен для генерации правильного .d.ts файла
// @ts-ignore — Свойство "SpinnerType" объявлено, но его значение не было прочитано
var Spinner_1 = tslib_1.__importDefault(require("../Spinner"));
var Loader_module_less_1 = tslib_1.__importDefault(require("./Loader.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Loader_styles_1 = tslib_1.__importDefault(require("./Loader.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var ZIndex_1 = tslib_1.__importDefault(require("../ZIndex"));
/**
                                                               * DRAFT - лоадер-контейнер
                                                               */
var Loader = /** @class */function (_super) {
  tslib_1.__extends(Loader, _super);
  function Loader(props) {
    var _this = _super.call(this, props) || this;
    _this.wrapperRef = function (element) {
      _this.containerNode = element;
    };
    _this.checkSpinnerPosition = function () {
      if (!_this.containerNode) {
        return;
      }
      var _a = _this.containerNode.getBoundingClientRect(),containerTop = _a.top,containerRight = _a.right,containerBottom = _a.bottom,containerLeft = _a.left,containerHeight = _a.height,containerWidth = _a.width;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;
      // Если контейнер не больше высоты и не шире окна,
      // то просто выравниваем по центру
      if (windowHeight >= containerHeight && windowWidth >= containerWidth) {
        _this.setState({
          isStickySpinner: false,
          spinnerStyle: {} });

        return;
      }
      var spinnerStyle = {
        top: 30,
        right: 0,
        bottom: 30,
        left: 0 };

      // ПО ВЕРТИКАЛИ
      // Если верхний край контейнера ниже верхнего края окна,
      // то сдвигаем и лоадер
      if (containerTop > 0) {
        spinnerStyle.top = containerTop + 30;
      }
      // Если нижний край контейнера выше нижнего края окна,
      // то сдвигаем и лоадер
      if (containerBottom < windowHeight) {
        spinnerStyle.bottom = Math.abs(windowHeight - containerBottom) + 30;
      }
      // Если знаем высоту спиннера и нижний край контейнера поднимается
      // выше отступа на высоту спиннера, то убираем верхнюю позицию лоадера
      if (_this.spinnerHeight && spinnerStyle.bottom >= windowHeight - _this.spinnerHeight) {
        delete spinnerStyle.top;
      }
      // ПО ГОРИЗОНТАЛИ
      // Если левый край контейнера правее левого края окна,
      // то сдвигаем и лоадер
      if (containerLeft > 0) {
        spinnerStyle.left = containerLeft;
      }
      // Если правый край контейнера левее правого края окна,
      // то сдвигаем и лоадер
      if (containerRight < windowWidth) {
        spinnerStyle.right = windowWidth - containerRight;
      }
      _this.setState({
        isStickySpinner: true,
        spinnerStyle: spinnerStyle });

    };
    _this.containerNode = null;
    _this.spinnerNode = null;
    _this.state = {
      isStickySpinner: false };

    return _this;
  }
  Loader.prototype.componentDidMount = function () {
    if (this.spinnerNode) {
      this.spinnerHeight = this.spinnerNode.children[0].getBoundingClientRect().height;
    }
    this.checkSpinnerPosition();
    this.layoutEvents = LayoutEvents_1["default"].addListener(this.checkSpinnerPosition);
  };
  Loader.prototype.componentWillUnmount = function () {
    if (this.layoutEvents) {
      this.layoutEvents.remove();
    }
  };
  Loader.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Loader.prototype.renderMain = function () {
    var _a;
    var _b = this.props,active = _b.active,type = _b.type,caption = _b.caption,className = _b.className;
    return React.createElement("div", { style: { position: 'relative' }, className: Emotion_1.cx(Loader_module_less_1["default"].loader, className) },
    React.createElement(ZIndex_1["default"], { priority: 'Loader', applyZIndex: this.props.active, coverChildren: this.props.active, style: { height: '100%' } }, this.props.children),
    active && React.createElement(ZIndex_1["default"], { wrapperRef: this.wrapperRef, priority: 'Loader', className: Emotion_1.cx((_a = {},
      _a[Loader_module_less_1["default"].active] = active,
      _a[Loader_styles_1["default"].active(this.theme)] = active,
      _a)) }, this.renderSpinner(type, caption)));
  };
  Loader.prototype.renderSpinner = function (type, caption) {
    var _this = this;
    return React.createElement("span", { className: this.state.isStickySpinner ? Loader_module_less_1["default"].spinnerContainerSticky : Loader_module_less_1["default"].spinnerContainerCenter, style: this.state.spinnerStyle, ref: function ref(element) {
        _this.spinnerNode = element;
      } },
    React.createElement(Spinner_1["default"], { type: type, caption: caption }));
  };
  Loader.__KONTUR_REACT_UI__ = 'Loader';
  Loader.defaultProps = {
    type: Spinner_1["default"].Types.normal,
    active: false };

  Loader.propTypes = {
    /**
                        * показываем лоадер или нет
                        */
    active: PropTypes.bool,
    /**
                             * Текст рядом с лоадером.
                             *
                             * "Загрузка" - значение по-умолчанию
                             */
    caption: Spinner_1["default"].propTypes.caption,
    /**
                                                      * Класс для обертки
                                                      */
    className: PropTypes.string,
    /**
                                  * Тип спиннера: mini, normal, big
                                  *
                                  * Значение по-умолчанию - normal
                                  *
                                  * Spinner.types - все доступные типы
                                  */
    type: PropTypes.oneOf(Object.keys(Spinner_1["default"].Types)) };

  return Loader;
}(React.Component);
exports["default"] = Loader;