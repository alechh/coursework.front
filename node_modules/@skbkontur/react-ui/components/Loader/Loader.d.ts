import * as React from 'react';
import * as PropTypes from 'prop-types';
import { SpinnerType, SpinnerProps } from '../Spinner';
export interface LoaderProps {
    children?: React.ReactNode;
    /**
     * Флаг переключения состояния лоадера
     * @default false
     */
    active: boolean;
    caption?: SpinnerProps['caption'];
    className?: string;
    type?: 'mini' | 'normal' | 'big';
}
export interface LoaderState {
    isStickySpinner: boolean;
    spinnerStyle?: object;
}
/**
 * DRAFT - лоадер-контейнер
 */
declare class Loader extends React.Component<LoaderProps, LoaderState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        type: SpinnerType;
        active: boolean;
    };
    static propTypes: {
        /**
         * показываем лоадер или нет
         */
        active: PropTypes.Requireable<boolean>;
        /**
         * Текст рядом с лоадером.
         *
         * "Загрузка" - значение по-умолчанию
         */
        caption: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Класс для обертки
         */
        className: PropTypes.Requireable<string>;
        /**
         * Тип спиннера: mini, normal, big
         *
         * Значение по-умолчанию - normal
         *
         * Spinner.types - все доступные типы
         */
        type: PropTypes.Requireable<string>;
    };
    private theme;
    private containerNode;
    private spinnerNode;
    private spinnerHeight?;
    private layoutEvents;
    constructor(props: LoaderProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private wrapperRef;
    private renderSpinner;
    private checkSpinnerPosition;
}
export default Loader;
