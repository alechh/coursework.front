"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var types_1 = require("../types");
var abbreviations_1 = tslib_1.__importDefault(require("../constants/abbreviations"));
var Logger_1 = require("../logger/Logger");
var APIResultFactory_1 = require("./APIResultFactory");
var fetch_cors_1 = tslib_1.__importDefault(require("../../../lib/net/fetch-cors"));
var FiasAPI = /** @class */function () {
  function FiasAPI(baseUrl, version, fetchFn) {
    if (baseUrl === void 0) {baseUrl = '';}
    if (fetchFn === void 0) {fetchFn = fetch_cors_1["default"];}
    var _this = this;
    this.baseUrl = baseUrl;
    this.version = version;
    this.fetchFn = fetchFn;
    this.regionsPromise = null;
    this.verify = function (address) {
      var query = {
        directParent: true,
        search: false };

      return _this.send("verify?" + FiasAPI.createQuery(query), {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json' },

        body: JSON.stringify([address.convertForVerification()]) }).
      then(function (_a) {
        var success = _a.success,data = _a.data,error = _a.error;
        if (success && data) {
          var _b = data[0] || {},_c = _b.address,verifiedAddress = _c === void 0 ? {} : _c,_d = _b.isValid,isValid = _d === void 0 ? false : _d,invalidLevel = _b.invalidLevel;
          return APIResultFactory_1.APIResultFactory.success(tslib_1.__assign({ address: verifiedAddress, isValid: isValid }, invalidLevel ? { invalidLevel: invalidLevel.toLowerCase() } : {}));
        } else
        {
          return APIResultFactory_1.APIResultFactory.fail(error && error.message);
        }
      });
    };
    this.search = function (_a) {
      var fiasId = _a.fiasId,searchText = _a.searchText,field = _a.field,parentFiasId = _a.parentFiasId,limit = _a.limit,fullAddress = _a.fullAddress,directParent = _a.directParent;
      var query = {
        prefix: searchText,
        actual: true,
        parentFiasId: parentFiasId,
        limit: limit,
        fullAddress: fullAddress,
        directParent: directParent,
        version: _this.version };

      var emptyResult = {
        success: true,
        status: 200,
        data: [] };

      if (fiasId) {
        return _this.resolveFiasId(fiasId);
      }
      if (searchText) {
        if (!field) {
          var text = FiasAPI.trimSearchText(searchText);
          if (text) {
            return _this.resolveAddress(text, limit);
          }
        } else
        {
          switch (field) {
            case types_1.Fields.region:
              return _this.searchRegions(searchText);
            case types_1.Fields.house:
              return _this.searchHouse(query);
            case types_1.Fields.stead:
              return _this.searchStead(query);
            case types_1.Fields.room:
              return _this.searchRoom(query);
            default:
              return _this.searchAddressObject(tslib_1.__assign({}, query, { levels: [field] }));}

        }
      }
      return Promise.resolve(emptyResult);
    };
    this.searchCountry = function (query) {
      return _this.send("countries?" + FiasAPI.createQuery(query));
    };
    this.send = function (path, params) {
      if (params === void 0) {params = {};}
      var resultPromise = _this.baseUrl ?
      _this.fetchFn("" + _this.baseUrl + path, tslib_1.__assign({ method: 'GET' }, params)).then(function (result) {
        return result.ok ?
        result.json().then(function (data) {return APIResultFactory_1.APIResultFactory.success(data);}) :
        Promise.reject(new Error(Logger_1.Logger.warnings.fetchError));
      }) :
      Promise.reject(new Error(Logger_1.Logger.warnings.noBaseUrl));
      return resultPromise["catch"](function (_a) {
        var message = _a.message;
        Logger_1.Logger.log(message);
        return APIResultFactory_1.APIResultFactory.fail(message);
      });
    };
    this.resolveFiasId = function (fiasId) {
      return _this.send("addresses/structural/" + fiasId).then(function (result) {
        var success = result.success,data = result.data,error = result.error;
        if (success && data) {
          return APIResultFactory_1.APIResultFactory.success([data]);
        } else
        {
          return APIResultFactory_1.APIResultFactory.fail(error && error.message);
        }
      });
    };
    this.searchAddressObject = function (query) {
      return _this.send("addresses?" + FiasAPI.createQuery(query));
    };
    this.resolveAddress = function (address, limit, level) {
      if (level === void 0) {level = types_1.Fields.house;}
      return _this.send("addresses/resolve?" + FiasAPI.createQuery({
        address: address,
        limit: limit,
        level: level }));

    };
    this.searchStead = function (query) {
      return _this.send("steads?" + FiasAPI.createQuery(query)).then(function (result) {
        var success = result.success,data = result.data,error = result.error;
        if (success && data) {
          return APIResultFactory_1.APIResultFactory.success(data.map(function (stead) {
            return {
              stead: stead };

          }));
        } else
        {
          return APIResultFactory_1.APIResultFactory.fail(error && error.message);
        }
      });
    };
    this.searchHouse = function (query) {
      return _this.send("houses?" + FiasAPI.createQuery(query)).then(function (result) {
        var success = result.success,data = result.data,error = result.error;
        if (success && data) {
          return APIResultFactory_1.APIResultFactory.success(data.map(function (house) {
            return {
              house: house };

          }));
        } else
        {
          return APIResultFactory_1.APIResultFactory.fail(error && error.message);
        }
      });
    };
    this.searchRoom = function (query) {
      return _this.send("rooms?" + FiasAPI.createQuery(query)).then(function (result) {
        var success = result.success,data = result.data,error = result.error;
        if (success && data) {
          return APIResultFactory_1.APIResultFactory.success(data.map(function (room) {
            return {
              room: room };

          }));
        } else
        {
          return APIResultFactory_1.APIResultFactory.fail(error && error.message);
        }
      });
    };
    this.searchRegions = function (searchText) {
      if (!_this.regionsPromise) {
        _this.regionsPromise = _this.send('addresses/regions');
      }
      if (!searchText) {
        return _this.regionsPromise;
      }
      var isStartsWithSearchText = function isStartsWithSearchText(str) {
        return str && str.toLowerCase().indexOf(searchText.toLowerCase()) > -1;
      };
      return _this.regionsPromise.then(function (result) {
        var success = result.success,data = result.data;
        if (success && data) {
          return APIResultFactory_1.APIResultFactory.success(data.filter(function (address) {
            var _a = address.region,name = _a.name,_b = _a.code,code = _b === void 0 ? '' : _b;
            return isStartsWithSearchText(name) || isStartsWithSearchText(code);
          }));
        }
        return result;
      });
    };
  }
  FiasAPI.searchStopWords = Object.keys(abbreviations_1["default"]).reduce(function (words, abbr) {
    return tslib_1.__assign({}, words, abbreviations_1["default"][abbr].split(' ').reduce(function (abbrWords, word) {
      var _a;
      return tslib_1.__assign({}, abbrWords, (_a = {}, _a[word.toLowerCase()] = true, _a));
    }, {}));
  }, {});
  FiasAPI.createQuery = function (query) {
    var params = [];
    for (var key in query) {
      if (query.hasOwnProperty(key)) {
        var param = query[key];
        if (param !== undefined) {
          if (key === 'levels' && Array.isArray(param)) {
            for (var _i = 0, param_1 = param; _i < param_1.length; _i++) {
              var level = param_1[_i];
              params.push("level[]=" + encodeURIComponent(level));
            }
          } else
          {
            params.push(key + "=" + encodeURIComponent("" + param));
          }
        }
      }
    }
    return params.join('&');
  };
  FiasAPI.trimSearchText = function (searchText) {
    return searchText.
    toLowerCase().
    replace(/югра/g, '').
    replace(/(строение|сооружение|литера)\s[а-я\w]+/g, '').
    replace(/\s-\s/g, ' ').
    replace(/[,]/g, '').
    replace(/\s[\s]*/g, ' ').
    split(' ').
    filter(function (word) {return !Boolean(FiasAPI.searchStopWords[word]);}).
    slice(0, 6).
    join(' ');
  };
  return FiasAPI;
}();
exports.FiasAPI = FiasAPI;
exports["default"] = FiasAPI;