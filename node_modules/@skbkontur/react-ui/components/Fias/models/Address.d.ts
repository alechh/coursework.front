import { FiasLocale } from '../locale';
import { AddressErrors, AddressFields, AdditionalFields, VerifyResponse, AddressResponse, AddressValue, FiasValue, Fields, ExtraFields, FieldsSettings, FiasCountry, APIProvider } from '../types';
import { AddressElement } from './AddressElement';
export interface AddressOptions {
    fields?: AddressFields;
    additionalFields?: AdditionalFields;
    errors?: AddressErrors;
    country?: FiasCountry;
    foreignAddress?: string;
}
export declare class Address {
    static MAIN_FIELDS: Fields[];
    static ADDITIONAL_FIELDS: ExtraFields[];
    static ALL_FIELDS: (Fields | ExtraFields)[];
    static VERIFIABLE_FIELDS: Fields[];
    static FULL_ADDRESS_SEARCH_FIELDS: Fields[];
    static NOT_ONLY_DIRECT_PARENT_SEARCH_FIELDS: Fields[];
    static IS_RUSSIA: (country: FiasCountry) => boolean;
    static responseToFields: (response: AddressResponse) => AddressFields;
    static fieldsToResponse: (fields: AddressFields) => AddressResponse;
    static createFromResponse: (response: AddressResponse, additionalFields?: AdditionalFields | undefined, country?: FiasCountry | undefined) => Address;
    static createFromAddressValue: (addressValue: AddressValue, additionalFields?: AdditionalFields | undefined, country?: FiasCountry | undefined) => Address;
    static createFromAddress: (address: Address, options: AddressOptions) => Address;
    static validate: (address: Address, locale: FiasLocale) => Address;
    static verify: (address: Address, response: VerifyResponse) => Address;
    static filterVisibleFields: (fields: {
        region?: any;
        district?: any;
        city?: any;
        intracityarea?: any;
        settlement?: any;
        planningstructure?: any;
        street?: any;
        stead?: any;
        house?: any;
        room?: any;
    }, fieldsSettings: FieldsSettings) => {
        region?: any;
        district?: any;
        city?: any;
        intracityarea?: any;
        settlement?: any;
        planningstructure?: any;
        street?: any;
        stead?: any;
        house?: any;
        room?: any;
    };
    static isFieldVisible: (field: Fields | ExtraFields, fieldsSettings: FieldsSettings) => boolean;
    static getParentFields: (field: Fields) => Fields[];
    static getChildFields: (field: Fields) => Fields[];
    static removeFiasData: (address: Address, fields?: Fields[]) => Address;
    static getAddress: (api: APIProvider, value?: Partial<FiasValue> | undefined, fieldsSettings?: FieldsSettings | undefined) => Promise<Address>;
    fields: AddressFields;
    additionalFields: AdditionalFields;
    errors: AddressErrors;
    country: FiasCountry | undefined;
    foreignAddress: string;
    constructor({ fields, additionalFields, errors, country, foreignAddress }?: AddressOptions);
    readonly isForeign: boolean;
    readonly isEmpty: boolean;
    readonly hasErrors: boolean;
    readonly postalCode: string;
    readonly isPostalCodeValid: boolean;
    readonly isPostalCodeAltered: boolean;
    hasError(field: Fields | ExtraFields): boolean;
    getError(field: Fields | ExtraFields): string | undefined;
    getAddressErrors: () => {
        region?: string | undefined;
        district?: string | undefined;
        city?: string | undefined;
        intracityarea?: string | undefined;
        settlement?: string | undefined;
        planningstructure?: string | undefined;
        street?: string | undefined;
        stead?: string | undefined;
        house?: string | undefined;
        room?: string | undefined;
        postalcode?: string | undefined;
    };
    getText: (minField?: Fields | undefined, skipTypes?: boolean, connector?: string) => string;
    getFullText: (withPostalCode?: boolean) => string;
    isAllowedToFill: (field: Fields) => boolean;
    isAllowedToSearchFullAddress: (field: Fields) => boolean;
    isAllowedToSearchThroughChildrenOfDirectParent: (field: Fields, fieldsSettings?: FieldsSettings | undefined) => boolean;
    hasOnlyIndirectParent: (field?: Fields | undefined) => boolean;
    getClosestParentFiasId: (field: Fields) => string | undefined;
    getFiasId: () => string;
    getParent: (field: Fields) => AddressElement | undefined;
    verifyConsistency: () => VerifyResponse;
    getFiasPostalCode: () => string;
    getAddressValue: () => AddressValue;
    getValue: (withPostalCode?: boolean) => FiasValue;
    convertForVerification: () => {};
    getDiffFields: (address: Address, fieldsSettings?: FieldsSettings | undefined) => AddressFields;
}
export default Address;
