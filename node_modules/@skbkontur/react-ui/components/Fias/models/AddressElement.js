"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var abbreviations_1 = require("../constants/abbreviations");
var AddressElement = /** @class */function () {
  function AddressElement(type, name, data) {
    var _this = this;
    this.type = type;
    this.name = name;
    this.data = data;
    this.isTypeMatchField = function (field) {
      var data = _this.data;
      if (data && data.abbreviation) {
        return AddressElement.MATCHING_TYPES[data.abbreviation] === field;
      }
      return false;
    };
    this.removeData = function () {
      delete _this.data;
    };
    this.isEqualTo = function (element) {
      if (element && element.fiasId) {
        return _this.fiasId === element.fiasId;
      }
      return false;
    };
  }
  Object.defineProperty(AddressElement.prototype, "isFederalCity", {
    get: function get() {
      if (!this.fiasId) {
        return false;
      }
      return AddressElement.FEDERAL_CITIES.indexOf(this.fiasId) > -1;
    },
    enumerable: true,
    configurable: true });

  Object.defineProperty(AddressElement.prototype, "fiasData", {
    get: function get() {
      if (this.data && this.data.data) {
        return this.data.data;
      }
    },
    enumerable: true,
    configurable: true });

  Object.defineProperty(AddressElement.prototype, "fiasId", {
    get: function get() {
      if (this.data) {
        return this.data.fiasId;
      }
    },
    enumerable: true,
    configurable: true });

  AddressElement.prototype.getText = function (withoutType) {
    if (withoutType === void 0) {withoutType = false;}
    var _a = this,name = _a.name,data = _a.data;
    var result = '';
    if (!name) {
      return '';
    }
    if (data) {
      var abbreviation = data.abbreviation;
      if (abbreviation) {
        var type = !withoutType ? abbreviations_1.abbreviations[abbreviation] || abbreviation : '';
        switch (abbreviation) {
          case 'Чувашия':
            result = type + " \u0427\u0443\u0432\u0430\u0448\u0438\u044F";
            break;
          case 'АО':
            var text = "" + name;
            if (name !== 'Ханты-Мансийский Автономный округ - Югра') {
              text += " " + type;
            }
            result = text;
            break;
          case 'Аобл':
          case 'край':
          case 'обл':
            result = name + " " + type;
            break;
          case 'п':
            result = !withoutType ? (this.type === types_1.Fields.district ? 'поселение' : 'поселок') + " " + name : "" + name;
            break;
          default:
            result = type + " " + name;}

      }
      if (this.type === types_1.Fields.stead) {
        result = ' ' + data.number;
      }
      if (this.type === types_1.Fields.house) {
        if (data.estateStatus !== types_1.EstateStatuses.None) {
          switch (data.estateStatus) {
            case types_1.EstateStatuses.Hold:
              result = result + " \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435";
              break;
            case types_1.EstateStatuses.House:
              result = result + " \u0434\u043E\u043C";
              break;
            case types_1.EstateStatuses.HouseHold:
              result = result + " \u0434\u043E\u043C\u043E\u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435";
              break;}

        }
        if (data.number) {
          result = result + " " + data.number;
        }
        if (data.structureStatus && data.structureStatus !== types_1.StructureStatuses.None && data.structureNumber) {
          switch (data.structureStatus) {
            case types_1.StructureStatuses.Structure:
              result = result + " \u0441\u0442\u0440\u043E\u0435\u043D\u0438\u0435 " + data.structureNumber;
              break;
            case types_1.StructureStatuses.Construction:
              result = result + " c\u043E\u043E\u0440\u0443\u0436\u0435\u043D\u0438\u0435 " + data.structureNumber;
              break;
            case types_1.StructureStatuses.Liter:
              result = result + " \u043B\u0438\u0442\u0435\u0440\u0430 " + data.structureNumber;
              break;}

        }
        if (data.buildingNumber) {
          result = result + " \u043A\u043E\u0440\u043F\u0443\u0441 " + data.buildingNumber;
        }
      }
      if (this.type === types_1.Fields.room) {
        if (data) {
          result = "\u043A\u0432\u0430\u0440\u0442\u0438\u0440\u0430 " + name;
        } else
        {
          result = name;
        }
      }
    }
    return result.trim() || name;
  };
  Object.defineProperty(AddressElement.prototype, "verifiableData", {
    get: function get() {
      var _a = this,type = _a.type,data = _a.data;
      if (data) {
        var name_1 = data.name,abbreviation = data.abbreviation,number = data.number,structureNumber = data.structureNumber,buildingNumber = data.buildingNumber,structureStatus = data.structureStatus;
        switch (type) {
          case types_1.Fields.house:
            return {
              number: number,
              structureNumber: structureNumber,
              structureStatus: structureStatus,
              buildingNumber: buildingNumber };

          default:
            return {
              name: name_1,
              abbreviation: abbreviation };}


      }
      return {
        name: this.name };

    },
    enumerable: true,
    configurable: true });

  // Types (abbrevs) that match fields labels
  AddressElement.MATCHING_TYPES = {
    'р-н': types_1.Fields.district,
    г: types_1.Fields.city,
    нп: types_1.Fields.settlement,
    ул: types_1.Fields.street };

  AddressElement.FEDERAL_CITIES = [
  '0c5b2444-70a0-4932-980c-b4dc0d3f02b5',
  'c2deb16a-0330-4f05-821f-1d09c93331e6',
  '6fdecb78-893a-4e3f-a5ba-aa062459463b',
  '63ed1a35-4be6-4564-a1ec-0c51f7383314'];

  return AddressElement;
}();
exports.AddressElement = AddressElement;