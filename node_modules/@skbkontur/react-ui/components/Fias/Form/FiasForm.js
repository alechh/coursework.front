"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var Gapped_1 = tslib_1.__importDefault(require("../../Gapped"));
var Button_1 = tslib_1.__importDefault(require("../../Button"));
var decorators_1 = require("../../LocaleProvider/decorators");
var locale_1 = require("../locale");
var FiasComboBox_1 = require("./FiasComboBox");
var FiasForm_module_less_1 = tslib_1.__importDefault(require("./FiasForm.module.css"));
var types_1 = require("../types");
var Address_1 = require("../models/Address");
var AddressElement_1 = require("../models/AddressElement");
var Tooltip_1 = tslib_1.__importDefault(require("../../Tooltip/Tooltip"));
var Input_1 = tslib_1.__importDefault(require("../../Input/Input"));
var FiasSearch_1 = require("../FiasSearch/FiasSearch");
var FiasCountrySelector_1 = require("./FiasCountrySelector");
var Textarea_1 = tslib_1.__importDefault(require("../../Textarea"));
var FiasForm = /** @class */function (_super) {
  tslib_1.__extends(FiasForm, _super);
  function FiasForm(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      address: _this.props.address };

    _this.lastVerifyPromise = null;
    _this.submit = function () {return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:return [4 /*yield*/, this.lastVerifyPromise];
            case 1:
              _a.sent();
              return [2 /*return*/, this.state.address];}

        });
      });};
    _this.getCommonFieldProps = function (field) {
      var address = _this.state.address;
      var validationLevel = _this.props.validationLevel;
      return {
        error: address.hasError(field) && validationLevel === types_1.FormValidation.Error,
        warning: address.hasError(field) && validationLevel === types_1.FormValidation.Warning,
        placeholder: _this.locale[field + "Placeholder"] };

    };
    _this.renderFields = function (fields) {
      var fieldsSettings = _this.props.fieldsSettings;
      return fields.map(function (field) {
        var control = _this.fields[field];
        var settings = fieldsSettings[field];
        if (control && Boolean(settings && settings.visible)) {
          var meta = control.meta,render = control.render;
          var label = _this.locale[field + "Label"];
          return control && React.createElement(FiasForm_1.Field, { label: label, key: field },
          React.createElement(Tooltip_1["default"], { pos: 'right middle', render: meta.tooltip }, render()));
        }
      });
    };
    _this.renderAddressComboBox = function (field, width) {
      if (width === void 0) {width = '100%';}
      var comboboxField = _this.fields[field];
      if (comboboxField && FiasForm_1.isComboboxMeta(comboboxField.meta)) {
        var address = _this.state.address;
        var _a = comboboxField.meta,props = _a.props,createRef = _a.createRef;
        var commonProps = _this.getCommonFieldProps(field);
        return React.createElement(FiasComboBox_1.FiasComboBox, tslib_1.__assign({}, commonProps, props, { value: address, width: width, drawArrow: false, searchOnFocus: false, limit: _this.props.limit, ref: createRef }));
      }
    };
    _this.renderPostalCodeInput = function () {
      var inputField = _this.fields[types_1.ExtraFields.postalcode];
      if (inputField && FiasForm_1.isInputMeta(inputField.meta)) {
        var address = _this.state.address;
        var _a = inputField.meta,props = _a.props,createRef = _a.createRef;
        var commonProps = _this.getCommonFieldProps(types_1.ExtraFields.postalcode);
        var value = address.postalCode;
        return React.createElement(Input_1["default"], tslib_1.__assign({}, commonProps, props, { value: value, width: 130, ref: createRef }));
      }
    };
    _this.createAddressComboboxMeta = function (field) {
      return {
        ref: null,
        props: _this.createAddressComboBoxProps(field),
        tooltip: _this.createAddressComboBoxTooltip(field),
        createRef: function createRef(ref) {
          var comboboxField = _this.fields[field];
          if (comboboxField) {
            comboboxField.meta.ref = ref;
          }
        } };

    };
    _this.createPostalCodeInputMeta = function () {
      return {
        ref: null,
        props: _this.createPostalCodeInputProps(),
        tooltip: function tooltip() {return _this.createPostalCodeTooltip();},
        createRef: function createRef(ref) {
          var inputField = _this.fields[types_1.ExtraFields.postalcode];
          if (inputField) {
            inputField.meta.ref = ref;
          }
        } };

    };
    _this.createItemsSource = function (searchText, field) {return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var address, limit, options;
        return tslib_1.__generator(this, function (_a) {
          address = this.state.address;
          limit = this.props.limit || FiasForm_1.defaultProps.limit;
          if (address.isAllowedToFill(field)) {
            options = {
              searchText: searchText,
              field: field,
              parentFiasId: address.getClosestParentFiasId(field),
              fullAddress: address.isAllowedToSearchFullAddress(field),
              directParent: !address.isAllowedToSearchThroughChildrenOfDirectParent(field, this.props.fieldsSettings),
              limit: limit + 1 };

            return [2 /*return*/, this.props.api.search(options).then(function (result) {
              var success = result.success,data = result.data,error = result.error;
              return success && data ?
              Promise.resolve(data.map(function (item) {
                return Address_1.Address.createFromResponse(item);
              })) :
              Promise.reject(error);
            })];
          }
          return [2 /*return*/, Promise.resolve([])];
        });
      });};
    _this.getFieldTooltipContent = function (field) {
      var address = _this.state.address;
      var validationLevel = _this.props.validationLevel;
      if (validationLevel !== types_1.FormValidation.None && address.hasError(field)) {
        return address.getError(field);
      }
      return null;
    };
    _this.createAddressComboBoxTooltip = function (field) {return function () {
        var tooltipContent = _this.getFieldTooltipContent(field);
        var comboboxField = _this.fields[field];
        if (comboboxField && FiasForm_1.isComboboxMeta(comboboxField.meta)) {
          var combobox = comboboxField.meta.ref;
          var hasItems = combobox ? combobox.hasItems : false;
          return tooltipContent !== null && hasItems ? _this.locale.addressSelectItemFromList : tooltipContent;
        }
        return tooltipContent;
      };};
    _this.createPostalCodeTooltip = function () {
      var tooltipContent = _this.getFieldTooltipContent(types_1.ExtraFields.postalcode);
      var replacePostalCode = function replacePostalCode() {
        var address = _this.state.address;
        var additionalFields = tslib_1.__assign({}, address.additionalFields);
        delete additionalFields[types_1.ExtraFields.postalcode];
        _this.handleAddressChange(Address_1.Address.createFromAddress(address, { additionalFields: additionalFields }));
      };
      return tooltipContent && React.createElement("div", null,
      React.createElement("span", null, tooltipContent),
      _this.state.address.isPostalCodeAltered && React.createElement("div", null,
      React.createElement(Button_1["default"], { onClick: replacePostalCode, use: "link" }, _this.locale.postalcodeReplace)));
    };
    _this.verify = function () {
      var address = _this.state.address;
      var api = _this.props.api;
      return api.verify(address).then(function (result) {
        var success = result.success,data = result.data;
        if (success && data) {
          return Address_1.Address.verify(address, data);
        }
        return Address_1.Address.removeFiasData(address);
      });
    };
    _this.handleCountryChange = function (country) {
      _this.handleAddressChange(Address_1.Address.createFromAddress(_this.state.address, { country: country }));
    };
    _this.handleForeignAddressChange = function (e, value) {
      _this.handleAddressChange(Address_1.Address.createFromAddress(_this.state.address, {
        foreignAddress: value }));

    };
    _this.handleAddressChange = function (address, callback) {
      _this.setState({
        address: Address_1.Address.createFromAddress(address, {
          fields: Address_1.Address.filterVisibleFields(address.fields, _this.props.fieldsSettings) }) },

      callback);
    };
    _this.handleSearchChange = function (event, address) {
      _this.handleAddressChange(address);
    };
    _this.resetAddressErrors = function () {
      var address = _this.state.address;
      if (address.hasErrors) {
        _this.setState({
          address: Address_1.Address.createFromAddress(address, { errors: {} }) });

      }
    };
    _this.fields = Address_1.Address.ALL_FIELDS.reduce(function (fields, field) {
      var _a, _b;
      switch (field) {
        case types_1.Fields.region:
        case types_1.Fields.district:
        case types_1.Fields.city:
        case types_1.Fields.intracityarea:
        case types_1.Fields.settlement:
        case types_1.Fields.planningstructure:
        case types_1.Fields.street:
        case types_1.Fields.stead:
        case types_1.Fields.house:
        case types_1.Fields.room:
          return tslib_1.__assign({}, fields, (_a = {}, _a[field] = {
            meta: _this.createAddressComboboxMeta(field),
            render: function render() {return _this.renderAddressComboBox(field);} },
          _a));
        case types_1.ExtraFields.postalcode:
          return tslib_1.__assign({}, fields, (_b = {}, _b[field] = {
            meta: _this.createPostalCodeInputMeta(),
            render: function render() {return _this.renderPostalCodeInput();} },
          _b));
        default:
          return fields;}

    }, {});
    return _this;
  }
  FiasForm_1 = FiasForm;
  Object.defineProperty(FiasForm.prototype, "isForeignForm", {
    get: function get() {
      var address = this.state.address;
      var countrySelector = this.props.countrySelector;
      return address.isForeign || Boolean(countrySelector) && !address.country;
    },
    enumerable: true,
    configurable: true });

  FiasForm.prototype.componentDidMount = function () {
    this.validate();
  };
  FiasForm.prototype.render = function () {
    var address = this.state.address;
    var _a = this.props,api = _a.api,limit = _a.limit,countrySelector = _a.countrySelector;
    return React.createElement("div", null,
    React.createElement(Gapped_1["default"], { vertical: true },
    countrySelector && React.createElement(FiasForm_1.Field, { label: this.locale.countryLabel },
    React.createElement(FiasCountrySelector_1.FiasCountrySelector, { api: api, country: address.country, onChange: this.handleCountryChange, limit: limit })),
    this.props.search && React.createElement(FiasForm_1.Field, null,
    React.createElement(FiasSearch_1.FiasSearch, { api: api, address: address, onChange: this.handleSearchChange, limit: limit, placeholder: this.locale.searchPlaceholder })),
    this.isForeignForm ? React.createElement(Gapped_1["default"], { vertical: true },
    React.createElement(FiasForm_1.Field, { label: this.locale.foreignAddressLabel },
    React.createElement(Textarea_1["default"], { value: address.foreignAddress, onChange: this.handleForeignAddressChange, placeholder: this.locale.foreignAddressPlaceholder, width: "100%", resize: "none" })),
    this.renderFields([types_1.ExtraFields.postalcode])) : this.renderFields(Address_1.Address.ALL_FIELDS)));
  };
  FiasForm.prototype.createAddressComboBoxProps = function (field) {
    var _this = this;
    var getItems = function getItems(searchText) {return tslib_1.__awaiter(_this, void 0, void 0, function () {return tslib_1.__generator(this, function (_a) {
          return [2 /*return*/, this.createItemsSource(searchText, field)];
        });});};
    var onChange = function onChange(e, value) {
      var address = _this.state.address;
      var newFields = tslib_1.__assign({}, address.fields, value.fields);
      // get rid of undefineds
      var addressField;
      for (addressField in newFields) {
        if (!newFields[addressField]) {
          delete newFields[addressField];
        }
      }
      _this.handleAddressChange(Address_1.Address.createFromAddress(address, { fields: newFields }), _this.validate);
    };
    var onInputChange = function onInputChange() {
      _this.resetAddressErrors();
    };
    var onUnexpectedInput = function onUnexpectedInput(query) {
      var _a;
      var address = _this.state.address;
      var newFields = tslib_1.__assign({}, address.fields, (_a = {}, _a[field] = query ? new AddressElement_1.AddressElement(field, query) : undefined, _a));
      return Address_1.Address.createFromAddress(address, { fields: newFields });
    };
    var renderItem = function renderItem(address) {
      var element = address.fields[field];
      if (!element) {
        return '';
      }
      if (field === types_1.Fields.region && element.data) {
        var regionCode = element.data.code.substr(0, 2);
        return regionCode + " " + element.getText();
      }
      var diffAddress = new Address_1.Address({ fields: _this.state.address.getDiffFields(address, _this.props.fieldsSettings) });
      var hasParentFields = Boolean(diffAddress.getClosestParentFiasId(field));
      return hasParentFields ? diffAddress.getText() : element.getText(element.isTypeMatchField(field));
    };
    var renderValue = function renderValue(address) {
      var element = address.fields[field];
      return element && element.getText(element.isTypeMatchField(field));
    };
    var renderNotFound = function renderNotFound() {
      var address = _this.state.address;
      var messages = [_this.locale[field + "NotFound"] || _this.locale.addressNotFound];
      if (address.isAllowedToFill(field)) {
        if (address.hasOnlyIndirectParent(field)) {
          messages.push(_this.locale.addressFillParentOrSearch);
        }
      } else
      {
        messages = _this.locale[field + "FillBefore"] ?
        [_this.locale[field + "FillBefore"]] :
        messages;
      }
      return React.createElement("div", null, messages.map(function (message, i, m) {return React.createElement("div", { key: i }, message + (m[i + 1] ? '.' : ''));}));
    };
    var valueToString = function valueToString(address) {
      var element = address.fields[field];
      return element ? element.name : '';
    };
    var itemToValue = valueToString;
    return {
      getItems: getItems,
      onChange: onChange,
      onInputChange: onInputChange,
      onUnexpectedInput: onUnexpectedInput,
      renderItem: renderItem,
      renderValue: renderValue,
      itemToValue: itemToValue,
      valueToString: valueToString,
      renderNotFound: renderNotFound };

  };
  FiasForm.prototype.createPostalCodeInputProps = function () {
    var _this = this;
    return {
      onChange: function onChange(e, value) {
        var _a;
        var address = _this.state.address;
        var newAdditionalFields = tslib_1.__assign({}, address.additionalFields, (_a = {}, _a[types_1.ExtraFields.postalcode] = value, _a));
        _this.handleAddressChange(Address_1.Address.createFromAddress(address, {
          additionalFields: newAdditionalFields }));

      } };

  };
  FiasForm.prototype.validate = function () {
    var _this = this;
    var verifyPromise = this.lastVerifyPromise = this.verify();
    verifyPromise.then(function (verifiedAddress) {
      if (verifyPromise === _this.lastVerifyPromise) {
        _this.setState({
          address: Address_1.Address.validate(verifiedAddress, _this.locale) });

      }
    });
  };
  var FiasForm_1;
  FiasForm.__KONTUR_REACT_UI__ = 'FiasForm';
  FiasForm.defaultProps = {
    validationLevel: 'Error',
    limit: 5,
    fieldsSettings: {},
    countrySelector: false };

  FiasForm.Field = function (_a) {
    var label = _a.label,children = _a.children;
    return React.createElement("div", { className: FiasForm_module_less_1["default"].row },
    label && React.createElement("div", { className: FiasForm_module_less_1["default"].label }, label),
    React.createElement("div", { className: FiasForm_module_less_1["default"].field }, children));
  };
  FiasForm.isComboboxMeta = function (meta) {
    var props = meta.props;
    return props.hasOwnProperty('onUnexpectedInput') && props.hasOwnProperty('getItems');
  };
  FiasForm.isInputMeta = function (meta) {
    var props = meta.props;
    return !FiasForm_1.isComboboxMeta(meta) && props.hasOwnProperty('onChange');
  };
  FiasForm = FiasForm_1 = tslib_1.__decorate([
  decorators_1.locale('Fias', locale_1.FiasLocaleHelper)],
  FiasForm);
  return FiasForm;
}(React.Component);
exports.FiasForm = FiasForm;
exports["default"] = FiasForm;