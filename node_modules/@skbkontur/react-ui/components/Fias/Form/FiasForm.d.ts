import * as React from 'react';
import { FiasComboBox, FiasComboBoxProps } from './FiasComboBox';
import { FormValidation, APIProvider, FieldsSettings } from '../types';
import { Address } from '../models/Address';
import { InputProps } from '../../Input';
import Input from '../../Input/Input';
interface FiasFormProps {
    api: APIProvider;
    address: Address;
    fieldsSettings: FieldsSettings;
    search?: boolean;
    limit?: number;
    validationLevel?: FormValidation;
    countrySelector?: boolean;
}
interface FiasFormState {
    address: Address;
}
interface FieldMeta<C, P> {
    ref: C | null;
    props: P;
    createRef: (ref: C | null) => any;
    tooltip: () => React.ReactNode;
}
declare type ComboBoxMeta = FieldMeta<FiasComboBox, FiasComboBoxProps>;
declare type InputMeta = FieldMeta<Input, InputProps>;
declare type FiasFormFieldMeta = ComboBoxMeta | InputMeta;
export declare class FiasForm extends React.Component<FiasFormProps, FiasFormState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        validationLevel: string;
        limit: number;
        fieldsSettings: {};
        countrySelector: boolean;
    };
    static Field: ({ label, children }: {
        label?: string | undefined;
        children?: React.ReactNode;
    }) => JSX.Element;
    static isComboboxMeta: (meta: FiasFormFieldMeta) => meta is FieldMeta<FiasComboBox, FiasComboBoxProps>;
    static isInputMeta: (meta: FiasFormFieldMeta) => meta is FieldMeta<Input, import("../../../typings/utility-types").Override<React.InputHTMLAttributes<HTMLInputElement>, {
        leftIcon?: import("../../Input/Input").IconType;
        rightIcon?: import("../../Input/Input").IconType;
        error?: boolean | undefined;
        warning?: boolean | undefined;
        borderless?: boolean | undefined;
        align?: "left" | "center" | "right" | undefined;
        mask?: string | null | undefined;
        maskChar?: string | null | undefined;
        formatChars?: Record<string, string> | undefined;
        alwaysShowMask?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        onChange?: ((event: React.ChangeEvent<HTMLInputElement>, value: string) => void) | undefined;
        onMouseEnter?: ((event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void) | undefined;
        onMouseLeave?: ((event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void) | undefined;
        onMouseOver?: ((event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void) | undefined;
        type?: "text" | "password" | undefined;
        value?: string | undefined;
        capture?: boolean | undefined;
        prefix?: React.ReactNode;
        suffix?: React.ReactNode;
        mainInGroup?: boolean | undefined;
        selectAllOnFocus?: boolean | undefined;
        onUnexpectedInput?: (() => void) | undefined;
    }>>;
    state: FiasFormState;
    private readonly locale;
    private fields;
    private lastVerifyPromise;
    constructor(props: FiasFormProps);
    readonly isForeignForm: boolean;
    componentDidMount(): void;
    submit: () => Promise<Address>;
    render(): JSX.Element;
    private getCommonFieldProps;
    private renderFields;
    private renderAddressComboBox;
    private renderPostalCodeInput;
    private createAddressComboboxMeta;
    private createPostalCodeInputMeta;
    private createAddressComboBoxProps;
    private createPostalCodeInputProps;
    private createItemsSource;
    private getFieldTooltipContent;
    private createAddressComboBoxTooltip;
    private createPostalCodeTooltip;
    private verify;
    private validate;
    private handleCountryChange;
    private handleForeignAddressChange;
    private handleAddressChange;
    private handleSearchChange;
    private resetAddressErrors;
}
export default FiasForm;
