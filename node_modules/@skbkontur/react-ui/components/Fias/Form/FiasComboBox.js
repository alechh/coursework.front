"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var ComboBox_1 = tslib_1.__importDefault(require("../../ComboBox"));
var reactGetTextContent_1 = tslib_1.__importDefault(require("../../../lib/reactGetTextContent/reactGetTextContent"));
var utils_1 = require("../../../lib/utils");
var HighlightedText = function HighlightedText(_a) {
  var children = _a.children;
  var style = {
    backgroundColor: 'transparent',
    fontWeight: 'bold',
    color: 'inherit' };

  return React.createElement("mark", { style: style }, children);
};
var FiasComboBox = /** @class */function (_super) {
  tslib_1.__extends(FiasComboBox, _super);
  function FiasComboBox() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      searchText: '',
      totalCount: 0 };

    _this.combobox = null;
    _this.createRef = function (el) {
      _this.combobox = el;
    };
    _this.getItems = function (searchText) {
      var _a = _this.props,getItems = _a.getItems,limit = _a.limit;
      var promise = getItems ? getItems(searchText) : Promise.resolve([]);
      return promise.then(function (items) {
        _this.setState({
          totalCount: items.length });

        return items.slice(0, limit);
      });
    };
    _this.renderItem = function (item) {
      var node = _this.props.renderItem ? _this.props.renderItem(item) : item.label || '';
      return _this.highlight(reactGetTextContent_1["default"](node));
    };
    _this.renderTotalCount = function (found, total) {return React.createElement("div", null,
      React.createElement("div", null,
      "\u041F\u043E\u043A\u0430\u0437\u0430\u043D\u043E ",
      found,
      " \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432."),
      React.createElement("div", null, "\u0423\u0442\u043E\u0447\u043D\u0438\u0442\u0435 \u0437\u0430\u043F\u0440\u043E\u0441, \u0447\u0442\u043E\u0431\u044B \u0443\u0432\u0438\u0434\u0435\u0442\u044C \u043E\u0441\u0442\u0430\u043B\u044C\u043D\u044B\u0435"));};
    _this.handleChange = function (event, item) {
      var _a = _this.props,onChange = _a.onChange,valueToString = _a.valueToString;
      if (onChange) {
        onChange(event, item);
      }
      _this.setState({
        searchText: valueToString ? valueToString(item) : '' });

    };
    _this.handleInputChange = function (query) {
      if (_this.props.onInputChange) {
        _this.props.onInputChange(query);
      }
      _this.setState({ searchText: query });
    };
    _this.handleFocus = function () {
      if (_this.props.onFocus) {
        _this.props.onFocus();
      }
      var _a = _this.props,error = _a.error,warning = _a.warning;
      if ((error || warning) && _this.hasItems) {
        if (_this.combobox) {
          _this.combobox.search();
        }
      }
    };
    return _this;
  }
  Object.defineProperty(FiasComboBox.prototype, "hasItems", {
    get: function get() {
      return this.state.totalCount > 0;
    },
    enumerable: true,
    configurable: true });

  FiasComboBox.prototype.render = function () {
    return React.createElement(ComboBox_1["default"], tslib_1.__assign({}, this.props, { getItems: this.getItems, renderItem: this.renderItem, onChange: this.handleChange, onInputChange: this.handleInputChange, onFocus: this.handleFocus, totalCount: this.state.totalCount, renderTotalCount: this.renderTotalCount, ref: this.createRef }));
  };
  FiasComboBox.prototype.highlight = function (str, lastMatchOnly) {
    if (lastMatchOnly === void 0) {lastMatchOnly = true;}
    var searchText = this.state.searchText;
    var regex = new RegExp(utils_1.escapeRegExpSpecChars(searchText), 'ig');
    var matches = str.match(regex);
    if (!searchText || !matches || str === searchText) {
      return str;
    }
    var mismatches = str.split(regex);
    var result = mismatches.reduce(function (elements, text, i) {
      elements.push(React.createElement("span", null, text));
      var match = matches[i];
      if (match) {
        var isHighlighted = lastMatchOnly && !Boolean(matches[i + 1]);
        elements.push(isHighlighted ? React.createElement(HighlightedText, null, match) : React.createElement("span", null, match));
      }
      return elements;
    }, []);
    return React.createElement("div", null, result.map(function (element, i) {
      return React.cloneElement(element, { key: i });
    }));
  };
  FiasComboBox.defaultProps = ComboBox_1["default"].defaultProps;
  return FiasComboBox;
}(React.Component);
exports.FiasComboBox = FiasComboBox;
exports["default"] = FiasComboBox;