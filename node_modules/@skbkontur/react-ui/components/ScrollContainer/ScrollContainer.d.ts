import * as React from 'react';
import * as PropTypes from 'prop-types';
export declare type ScrollContainerScrollState = 'top' | 'scroll' | 'bottom';
export declare type ScrollBehaviour = 'auto' | 'smooth';
export interface ScrollContainerProps {
    invert?: boolean;
    maxHeight?: React.CSSProperties['maxHeight'];
    preventWindowScroll?: boolean;
    /**
     * Поведение скролла (https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior)
     * @default 'auto'
     */
    scrollBehaviour?: ScrollBehaviour;
    onScrollStateChange?: (scrollState: ScrollContainerScrollState) => void;
}
export interface ScrollContainerState {
    scrollActive: boolean;
    hover: boolean;
    scrolling: boolean;
    scrollSize: number;
    scrollPos: number;
    scrollState: string;
}
export default class ScrollContainer extends React.Component<ScrollContainerProps, ScrollContainerState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        invert: PropTypes.Requireable<boolean>;
        maxHeight: PropTypes.Requireable<string | number>;
        scrollBehaviour: PropTypes.Requireable<string>;
        preventWindowScroll: PropTypes.Requireable<boolean>;
        onScrollStateChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        scrollBehaviour: string;
    };
    state: ScrollContainerState;
    private inner;
    private scroll;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ScrollContainerProps): void;
    render(): JSX.Element;
    /**
     * @public
     */
    scrollTo(element: HTMLElement): void;
    /**
     * @public
     */
    scrollToTop(): void;
    /**
     * @public
     */
    scrollToBottom(): void;
    private refInner;
    private refScroll;
    private handleNativeScroll;
    private reflow;
    private handleScrollMouseDown;
    private handleScrollWheel;
    private handleInnerScrollWheel;
    private handleMouseMove;
    private handleMouseLeave;
    private setHover;
    private getImmediateScrollState;
    private getMarginRight;
}
