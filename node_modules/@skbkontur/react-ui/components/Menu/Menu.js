"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_dom_1 = tslib_1.__importDefault(require("react-dom"));
var isActiveElement_1 = tslib_1.__importDefault(require("./isActiveElement"));
var ScrollContainer_1 = tslib_1.__importDefault(require("../ScrollContainer/ScrollContainer"));
var MenuItem_1 = require("../MenuItem/MenuItem");
var MenuHeader_1 = require("../MenuHeader/MenuHeader");
var Menu_module_less_1 = tslib_1.__importDefault(require("./Menu.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Menu_styles_1 = tslib_1.__importDefault(require("./Menu.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var Menu = /** @class */function (_super) {
  tslib_1.__extends(Menu, _super);
  function Menu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      highlightedIndex: -1 };

    _this.unmounted = false;
    _this.refScrollContainer = function (scrollContainer) {
      _this.scrollContainer = scrollContainer;
    };
    _this.scrollToSelected = function () {
      if (_this.scrollContainer && _this.highlighted) {
        _this.scrollContainer.scrollTo(react_dom_1["default"].findDOMNode(_this.highlighted));
      }
    };
    _this.scrollToTop = function () {
      if (_this.scrollContainer) {
        _this.scrollContainer.scrollToTop();
      }
    };
    _this.scrollToBottom = function () {
      if (_this.scrollContainer) {
        _this.scrollContainer.scrollToBottom();
      }
    };
    _this.highlight = function (index) {
      _this.setState({ highlightedIndex: index });
    };
    _this.unhighlight = function () {
      _this.setState({ highlightedIndex: -1 });
    };
    return _this;
  }
  Menu.prototype.componentWillUnmount = function () {
    this.unmounted = true;
  };
  Menu.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  /**
      * @public
      */
  Menu.prototype.up = function () {
    this.move(-1);
  };
  /**
      * @public
      */
  Menu.prototype.down = function () {
    this.move(1);
  };
  /**
      * @public
      */
  Menu.prototype.enter = function (event) {
    return this.select(this.state.highlightedIndex, true, event);
  };
  /**
      * @public
      */
  Menu.prototype.reset = function () {
    this.setState({ highlightedIndex: -1 });
  };
  /**
      * @public
      */
  Menu.prototype.hasHighlightedItem = function () {
    return this.state.highlightedIndex !== -1;
  };
  Menu.prototype.highlightItem = function (index) {
    this.highlight(index);
  };
  Menu.prototype.renderMain = function () {
    var _this = this;
    var enableIconPadding = React.Children.toArray(this.props.children).some(function (x) {return typeof x === 'object' && x.props.icon;});
    if (this.isEmpty()) {
      return null;
    }
    return React.createElement("div", { className: Emotion_1.cx(Menu_module_less_1["default"].root, Menu_styles_1["default"].root(this.theme), this.props.hasShadow && Menu_styles_1["default"].shadow(this.theme)), style: { width: this.props.width, maxHeight: this.props.maxHeight } },
    React.createElement(ScrollContainer_1["default"], { ref: this.refScrollContainer, maxHeight: this.props.maxHeight, preventWindowScroll: this.props.preventWindowScroll }, React.Children.map(this.props.children, function (child, index) {
      if (!child) {
        return child;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        return child;
      }
      if (enableIconPadding && (MenuItem_1.isMenuItem(child) || MenuHeader_1.isMenuHeader(child))) {
        child = React.cloneElement(child, {
          _enableIconPadding: true });

      }
      if (isActiveElement_1["default"](child)) {
        var highlight = _this.state.highlightedIndex === index;
        var ref = child.ref;
        if (highlight && typeof child.ref !== 'string') {
          ref = _this.refHighlighted.bind(_this, child.ref);
        }
        return React.cloneElement(child, {
          ref: ref,
          state: highlight ? 'hover' : child.props.state,
          onClick: _this.select.bind(_this, index, false),
          onMouseEnter: _this.highlight.bind(_this, index),
          onMouseLeave: _this.unhighlight });

      }
      return child;
    })));
  };
  Menu.prototype.refHighlighted = function (originalRef, menuItem) {
    this.highlighted = menuItem;
    if (typeof originalRef === 'function') {
      originalRef(menuItem);
    }
  };
  Menu.prototype.select = function (index, shouldHandleHref, event) {
    var item = childrenToArray(this.props.children)[index];
    if (isActiveElement_1["default"](item)) {
      if (shouldHandleHref && item.props.href) {
        if (item.props.target) {
          window.open(item.props.href, item.props.target);
        } else
        {
          location.href = item.props.href;
        }
      }
      if (item.props.onClick) {
        item.props.onClick(event);
      }
      if (this.props.onItemClick) {
        this.props.onItemClick();
      }
      return true;
    }
    return false;
  };
  Menu.prototype.move = function (step) {
    var _this = this;
    if (this.unmounted) {
      // NOTE workaround, because `ComboBox` call `process.nextTick` in reducer
      return;
    }
    var children = childrenToArray(this.props.children);
    var activeElements = children.filter(isActiveElement_1["default"]);
    if (!activeElements.length) {
      return;
    }
    var index = this.state.highlightedIndex;
    var _loop_1 = function _loop_1() {
      index += step;
      if (index < 0) {
        index = children.length - 1;
      } else
      if (index > children.length) {
        index = 0;
      }
      var child = children[index];
      if (isActiveElement_1["default"](child)) {
        this_1.setState({ highlightedIndex: index }, function () {
          switch (activeElements.indexOf(child)) {
            case 0:
              _this.scrollToTop();
              break;
            case activeElements.length - 1:
              _this.scrollToBottom();
              break;
            default:
              _this.scrollToSelected();}

        });
        return { value: void 0 };
      }
    };
    var this_1 = this;
    do {
      var state_1 = _loop_1();
      if (typeof state_1 === "object")
      return state_1.value;
    } while (index !== this.state.highlightedIndex);
  };
  Menu.prototype.isEmpty = function () {
    var children = this.props.children;
    return !children || !childrenToArray(children).filter(isExist).length;
  };
  Menu.__KONTUR_REACT_UI__ = 'Menu';
  Menu.defaultProps = {
    width: 'auto',
    maxHeight: 300,
    hasShadow: true,
    preventWindowScroll: true };

  return Menu;
}(React.Component);
exports["default"] = Menu;
function isExist(value) {
  return value !== null && value !== undefined;
}
function childrenToArray(children) {
  var ret = [];
  // Use forEach instead of map to avoid cloning for key unifying.
  React.Children.forEach(children, function (child) {
    ret.push(child);
  });
  return ret;
}