"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var identifiers_1 = require("../../lib/events/keyboard/identifiers");
var decorators_1 = require("../LocaleProvider/decorators");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var react_dom_1 = tslib_1.__importDefault(require("react-dom"));
var Button_1 = tslib_1.__importDefault(require("../Button"));
var DropdownContainer_1 = tslib_1.__importDefault(require("../DropdownContainer/DropdownContainer"));
var filterProps_1 = tslib_1.__importDefault(require("../filterProps"));
var Input_1 = tslib_1.__importDefault(require("../Input"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var Link_1 = tslib_1.__importDefault(require("../Link"));
var Menu_1 = tslib_1.__importDefault(require("../Menu/Menu"));
var MenuItem_1 = tslib_1.__importDefault(require("../MenuItem/MenuItem"));
var MenuSeparator_1 = tslib_1.__importDefault(require("../MenuSeparator/MenuSeparator"));
var RenderLayer_1 = tslib_1.__importDefault(require("../RenderLayer"));
var Item_1 = tslib_1.__importDefault(require("./Item"));
var locale_1 = require("./locale");
var Select_module_less_1 = tslib_1.__importDefault(require("./Select.module.css"));
var createPropsGetter_1 = require("../internal/createPropsGetter");
var utils_1 = require("../../lib/utils");
var Emotion_1 = require("../../lib/theming/Emotion");
var Select_styles_1 = tslib_1.__importDefault(require("./Select.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var PASS_BUTTON_PROPS = {
  disabled: true,
  error: true,
  use: true,
  size: true,
  warning: true,
  onMouseEnter: true,
  onMouseLeave: true,
  onMouseOver: true };

var Select = /** @class */function (_super) {
  tslib_1.__extends(Select, _super);
  function Select() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      opened: false,
      value: _this.props.defaultValue };

    _this.buttonElement = null;
    _this.getProps = createPropsGetter_1.createPropsGetter(Select_1.defaultProps);
    /**
                                                                                    * @public
                                                                                    */
    _this.open = function () {
      if (!_this.state.opened) {
        _this.setState({ opened: true });
        if (_this.props.onOpen) {
          _this.props.onOpen();
        }
      }
    };
    /**
        * @public
        */
    _this.close = function () {
      if (_this.state.opened) {
        _this.setState({ opened: false });
        if (_this.props.onClose) {
          _this.props.onClose();
        }
      }
    };
    /**
        * @public
        */
    _this.focus = function () {
      if (_this.buttonElement && _this.buttonElement.focus) {
        _this.buttonElement.focus();
      }
    };
    _this.dropdownContainerGetParent = function () {
      return react_dom_1["default"].findDOMNode(_this);
    };
    _this.focusInput = function (input) {
      if (input) {
        input.focus();
      }
    };
    _this.refMenu = function (menu) {
      _this.menu = menu;
    };
    _this.toggle = function () {
      if (_this.state.opened) {
        _this.close();
      } else
      {
        _this.open();
      }
    };
    _this.handleKey = function (e) {
      if (!_this.state.opened) {
        if (identifiers_1.isKeySpace(e) || identifiers_1.isKeyArrowVertical(e)) {
          e.preventDefault();
          _this.open();
        }
      } else
      {
        switch (true) {
          case identifiers_1.isKeyEscape(e):
            _this.focus();
            _this.close();
            break;
          case identifiers_1.isKeyArrowUp(e):
            e.preventDefault();
            if (_this.menu) {
              _this.menu.up();
            }
            break;
          case identifiers_1.isKeyArrowDown(e):
            e.preventDefault();
            if (_this.menu) {
              _this.menu.down();
            }
            break;
          case identifiers_1.isKeyEnter(e):
            e.preventDefault(); // To prevent form submission.
            if (_this.menu) {
              _this.menu.enter(e);
            }
            break;}

      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };
    _this.handleSearch = function (event) {
      _this.setState({ searchPattern: event.target.value });
    };
    _this.buttonRef = function (element) {
      _this.buttonElement = element;
    };
    _this.getButton = function (buttonParams) {
      var button = _this.props._renderButton ?
      _this.props._renderButton(buttonParams) :
      _this.renderDefaultButton(buttonParams);
      var buttonElement = React.Children.only(button);
      return React.cloneElement(buttonElement, {
        ref: function ref(element) {
          _this.buttonRef(element);
        },
        onFocus: _this.props.onFocus,
        onBlur: _this.props.onBlur });

    };
    return _this;
  }
  Select_1 = Select;
  Select.prototype.componentDidUpdate = function (_prevProps, prevState) {
    if (!prevState.opened && this.state.opened) {
      window.addEventListener('popstate', this.close);
    }
    if (prevState.opened && !this.state.opened) {
      window.removeEventListener('popstate', this.close);
    }
  };
  Select.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Select.prototype.renderMain = function () {
    var _a = this.renderLabel(),label = _a.label,isPlaceholder = _a.isPlaceholder;
    var buttonParams = {
      opened: this.state.opened,
      label: label,
      isPlaceholder: isPlaceholder,
      onClick: this.toggle,
      onKeyDown: this.handleKey };

    var style = {
      width: this.props.width,
      maxWidth: this.props.maxWidth || undefined };

    var button = this.getButton(buttonParams);
    return React.createElement(RenderLayer_1["default"], { onClickOutside: this.close, onFocusOutside: this.close, active: this.state.opened },
    React.createElement("span", { className: Select_module_less_1["default"].root, style: style },
    button,
    !this.props.disabled && this.state.opened && this.renderMenu()));
  };
  Select.prototype.renderLabel = function () {
    var _a;
    var value = this.getValue();
    var item = this.getItemByValue(value);
    if (item != null || value != null) {
      return {
        label: this.getProps().renderValue(value, item),
        isPlaceholder: false };

    }
    return {
      label: React.createElement("span", { className: Emotion_1.cx((_a = {},
        _a[Select_module_less_1["default"].customUsePlaceholder] = this.props.use !== 'default',
        _a)) }, this.props.placeholder || this.locale.placeholder),
      isPlaceholder: true };

  };
  Select.prototype.renderDefaultButton = function (params) {
    var _a;
    if (this.props.diadocLinkIcon) {
      return this.renderLinkButton(params);
    }
    var buttonProps = tslib_1.__assign({}, filterProps_1["default"](this.props, PASS_BUTTON_PROPS), { align: 'left', disabled: this.props.disabled, _noPadding: true, width: '100%', onClick: params.onClick, onKeyDown: params.onKeyDown, active: params.opened });
    if (this.props._icon) {
      Object.assign(buttonProps, {
        _noPadding: false,
        _noRightPadding: true,
        icon: this.props._icon });

    }
    var labelProps = {
      className: Emotion_1.cx((_a = {},
      _a[Select_module_less_1["default"].label] = this.props.use !== 'link',
      _a[Select_module_less_1["default"].labelWithLeftIcon] = !!this.props._icon,
      _a[Select_module_less_1["default"].placeholder] = params.isPlaceholder,
      _a[Select_styles_1["default"].placeholder(this.theme)] = params.isPlaceholder,
      _a[Select_module_less_1["default"].customUsePlaceholder] = params.isPlaceholder && this.props.use !== 'default',
      _a)),
      style: {
        paddingRight: (buttonProps.size === 'large' ? 31 : 28) + (!!this.props._icon ? 10 : 0) } };


    var useIsCustom = this.props.use !== 'default';
    return React.createElement(Button_1["default"], tslib_1.__assign({}, buttonProps),
    React.createElement("span", tslib_1.__assign({}, labelProps),
    React.createElement("span", { className: Select_module_less_1["default"].labelText }, params.label)),
    React.createElement("div", { className: Select_module_less_1["default"].arrowWrap },
    React.createElement("div", { className: Emotion_1.cx(Select_module_less_1["default"].arrow, Select_styles_1["default"].arrow(this.theme), useIsCustom && Select_module_less_1["default"].customUseArrow) })));
  };
  Select.prototype.renderLinkButton = function (params) {
    var linkProps = {
      disabled: params.disabled,
      icon: this.props.diadocLinkIcon,
      _button: true,
      _buttonOpened: params.opened,
      onClick: params.onClick,
      onKeyDown: params.onKeyDown };

    return React.createElement(Link_1["default"], tslib_1.__assign({}, linkProps), params.label);
  };
  Select.prototype.renderMenu = function () {
    var _this = this;
    var search = this.props.search ? React.createElement("div", { className: Select_module_less_1["default"].search },
    React.createElement(Input_1["default"], { ref: this.focusInput, onChange: this.handleSearch })) : null;
    var value = this.getValue();
    return React.createElement(DropdownContainer_1["default"], { getParent: this.dropdownContainerGetParent, offsetY: -1, align: this.props.menuAlign, disablePortal: this.props.disablePortal },
    React.createElement(Menu_1["default"], { ref: this.refMenu, width: this.props.menuWidth, onItemClick: this.close, maxHeight: this.props.maxMenuHeight },
    search,
    this.mapItems(function (iValue, item, i, comment) {
      if (utils_1.isFunction(item)) {
        var element = item();
        if (React.isValidElement(element)) {
          return React.cloneElement(element, { key: i });
        }
        return null;
      }
      if (React.isValidElement(item)) {
        return React.cloneElement(item, { key: i });
      }
      return React.createElement(MenuItem_1["default"], { key: i, state: _this.getProps().areValuesEqual(iValue, value) ? 'selected' : null, onClick: _this.select.bind(_this, iValue), comment: comment }, _this.getProps().renderItem(iValue, item));
    })));
  };
  Select.prototype.select = function (value) {
    this.focus();
    this.setState({ opened: false, value: value });
    if (this.props.onChange && !this.getProps().areValuesEqual(this.getValue(), value)) {
      this.props.onChange({ target: { value: value } }, value);
    }
  };
  Select.prototype.getValue = function () {
    if (this.props.value !== undefined) {
      return this.props.value;
    }
    return this.state.value;
  };
  Select.prototype.mapItems = function (fn) {
    var items = this.props.items;
    if (!items) {
      return [];
    }
    var pattern = this.state.searchPattern && this.state.searchPattern.toLowerCase();
    var result = [];
    var index = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
      var entry = items_1[_i];
      var _a = normalizeEntry(entry),value = _a[0],item = _a[1],comment = _a[2];
      if (!pattern || this.getProps().filterItem(value, item, pattern)) {
        result.push(fn(value, item, index, comment));
        ++index;
      }
    }
    return result;
  };
  Select.prototype.getItemByValue = function (value) {
    if (value === null || value === undefined) {
      return null;
    }
    var items = this.props.items || [];
    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
      var entry = items_2[_i];
      var _a = normalizeEntry(entry),itemValue = _a[0],item = _a[1];
      if (this.getProps().areValuesEqual(itemValue, value)) {
        return item;
      }
    }
    return null;
  };
  var Select_1;
  Select.__KONTUR_REACT_UI__ = 'Select';
  Select.propTypes = {
    /**
                        * Функция для сравнения `value` с элементом из `items`
                        */
    areValuesEqual: PropTypes.func,
    defaultValue: PropTypes.any,
    /**
                                  * Отключает использование портала
                                  */
    disablePortal: PropTypes.bool,
    disabled: PropTypes.bool,
    /**
                               * Визуально показать наличие ошибки.
                               */
    error: PropTypes.bool,
    filterItem: PropTypes.func,
    /**
                                 * Набор значений. Поддерживаются любые перечисляемые типы, в том числе
                                 * `Array`, `Map`, `Immutable.Map`.
                                 *
                                 * Элементы воспринимаются следующим образом: если элемент — это массив, то
                                 * первый элемент является значением , второй — отображается в списке,
                                 * а третий – комментарий;
                                 * если элемент не является массивом, то он используется и для отображения,
                                 * и для значения.
                                 *
                                 * Для вставки разделителя можно использовать `Select.SEP`.
                                 *
                                 * Вставить невыделяемый элемент со своей разметкой можно так:
                                 * ```
                                 * <Select ...
                                 *   items={[Select.static(() => <div>My Element</div>)]}
                                 * />
                                 * ```
                                 *
                                 * Чтобы добавить стандартный отступ для статического элемента:
                                 * ```
                                 * <Select.Item>My Element</Select.Item>
                                 * ```?
                                 */
    items: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
    maxMenuHeight: PropTypes.number,
    maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    placeholder: PropTypes.node,
    /**
                                  * Функция для отрисовки элемента в выпадающем списке. Аргументы — *value*,
                                  * *item*.
                                  */
    renderItem: PropTypes.func,
    /**
                                 * Функция для отрисовки выбранного элемента. Аргументы — *value*, *item*.
                                 */
    renderValue: PropTypes.func,
    /**
                                  * Показывать строку поиска в списке.
                                  */
    search: PropTypes.bool,
    value: PropTypes.any,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    onChange: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMouseOver: PropTypes.func,
    onKeyDown: PropTypes.func };

  Select.defaultProps = {
    renderValue: renderValue,
    renderItem: renderItem,
    areValuesEqual: areValuesEqual,
    filterItem: filterItem,
    use: 'default' };

  Select.Item = Item_1["default"];
  Select.SEP = function () {return React.createElement(MenuSeparator_1["default"], null);};
  Select["static"] = function (element) {
    invariant_1["default"](React.isValidElement(element) || typeof element === 'function', 'Select.static(element) expects element to be a valid react element.');
    return element;
  };
  Select = Select_1 = tslib_1.__decorate([
  decorators_1.locale('Select', locale_1.SelectLocaleHelper)],
  Select);
  return Select;
}(React.Component);
function renderValue(value, item) {
  return item;
}
function renderItem(value, item) {
  return item;
}
function areValuesEqual(value1, value2) {
  return value1 === value2;
}
function normalizeEntry(entry) {
  if (Array.isArray(entry)) {
    return entry;
  } else
  {
    return [entry, entry, undefined];
  }
}
function filterItem(value, item, pattern) {
  return item.toLowerCase().indexOf(pattern) !== -1;
}
exports["default"] = Select;