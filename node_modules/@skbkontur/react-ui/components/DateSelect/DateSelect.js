"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var ArrowTriangleUpDown_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowTriangleUpDown"));
var ArrowTriangleUp_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowTriangleUp"));
var ArrowTriangleDown_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowTriangleDown"));
var identifiers_1 = require("../../lib/events/keyboard/identifiers");
var locale_1 = require("../DatePicker/locale");
var decorators_1 = require("../LocaleProvider/decorators");
var RenderLayer_1 = tslib_1.__importDefault(require("../RenderLayer"));
var DropdownContainer_1 = tslib_1.__importDefault(require("../DropdownContainer/DropdownContainer"));
var LayoutEvents_1 = tslib_1.__importDefault(require("../../lib/LayoutEvents"));
var DateSelect_module_less_1 = tslib_1.__importDefault(require("./DateSelect.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var DateSelect_styles_1 = tslib_1.__importDefault(require("./DateSelect.styles"));
var ThemeConsumer_1 = tslib_1.__importDefault(require("../ThemeConsumer"));
var itemHeight = 24;
var visibleYearsCount = 11;
var itemsToMoveCount = -5;
var monthsCount = 12;
var defaultMinYear = 1900;
var defaultMaxYear = 2100;
var DateSelect = /** @class */function (_super) {
  tslib_1.__extends(DateSelect, _super);
  function DateSelect() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      botCapped: false,
      current: 0,
      height: 0,
      opened: false,
      pos: 0,
      top: 0,
      topCapped: false,
      nodeTop: Infinity };

    _this.root = null;
    _this.itemsContainer = null;
    _this.longClickTimer = 0;
    _this.setPositionRepeatTimer = 0;
    _this.yearStep = 3;
    /**
                         * @public
                         */
    _this.open = function () {
      if (_this.props.disabled) {
        return;
      }
      if (_this.state.opened) {
        return;
      }
      _this.setPosition(0);
      _this.setState({
        opened: true,
        current: 0 });

    };
    /**
        * @public
        */
    _this.close = function () {
      if (!_this.state.opened) {
        return;
      }
      _this.setState({ opened: false });
    };
    _this.refRoot = function (element) {
      _this.root = element;
    };
    _this.setNodeTop = function () {
      var root = _this.root;
      if (!root) {
        return;
      }
      if (_this.timeout) {
        clearTimeout(_this.timeout);
      }
      _this.timeout = setTimeout(function () {
        return _this.setState({
          nodeTop: root.getBoundingClientRect().top });

      });
    };
    _this.refItemsContainer = function (element) {
      if (!_this.itemsContainer && element) {
        element.addEventListener('wheel', _this.handleWheel, { passive: false });
      }
      if (_this.itemsContainer && !element) {
        _this.itemsContainer.removeEventListener('wheel', _this.handleWheel);
      }
      _this.itemsContainer = element;
    };
    _this.handleLongClickUp = function (event) {
      event.preventDefault();
      _this.longClickTimer = window.setTimeout(function () {
        _this.setPositionRepeatTimer = window.setInterval(function () {return _this.setPosition(_this.state.pos - itemHeight);}, 100);
      }, 200);
    };
    _this.handleLongClickDown = function (event) {
      event.preventDefault();
      _this.longClickTimer = window.setTimeout(function () {
        _this.setPositionRepeatTimer = window.setInterval(function () {return _this.setPosition(_this.state.pos + itemHeight);}, 100);
      }, 200);
    };
    _this.handleLongClickStop = function () {
      clearTimeout(_this.longClickTimer);
      clearTimeout(_this.setPositionRepeatTimer);
    };
    _this.getAnchor = function () {return _this.root;};
    _this.handleWheel = function (event) {
      if (!(event instanceof WheelEvent)) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      var deltaY = event.deltaY;
      if (event.deltaMode === 1) {
        deltaY *= itemHeight;
      } else
      if (event.deltaMode === 2) {
        deltaY *= itemHeight * 4;
      }
      var pos = _this.state.pos += deltaY;
      _this.setPosition(pos);
    };
    _this.handleItemClick = function (shift) {
      return function (e) {
        var value = _this.props.value + shift;
        if (_this.props.onChange) {
          _this.props.onChange(value);
        }
        _this.setState({ opened: false });
      };
    };
    _this.handleKey = function (e) {
      if (_this.state.opened && identifiers_1.isKeyEscape(e)) {
        e.preventDefault();
        _this.close();
        e.stopPropagation();
      }
    };
    _this.handleUp = function (event) {
      event.preventDefault();
      _this.setPosition(_this.state.pos - itemHeight * _this.yearStep);
    };
    _this.handleDown = function (event) {
      event.preventDefault();
      _this.setPosition(_this.state.pos + itemHeight * _this.yearStep);
    };
    return _this;
  }
  DateSelect.prototype.componentWillReceiveProps = function () {
    this.setNodeTop();
  };
  DateSelect.prototype.componentDidMount = function () {
    this.listener = LayoutEvents_1["default"].addListener(this.setNodeTop);
    this.setNodeTop();
    window.addEventListener('keydown', this.handleKey);
  };
  DateSelect.prototype.componentWillUnmount = function () {
    if (this.listener) {
      this.listener.remove();
    }
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    if (this.longClickTimer) {
      clearTimeout(this.longClickTimer);
    }
    if (this.setPositionRepeatTimer) {
      clearTimeout(this.setPositionRepeatTimer);
    }
    window.removeEventListener('keydown', this.handleKey);
  };
  DateSelect.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1["default"], null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  DateSelect.prototype.renderMain = function () {
    var _a, _b;
    var _c = this.props,width = _c.width,disabled = _c.disabled;
    var rootProps = {
      className: Emotion_1.cx((_a = {},
      _a[DateSelect_module_less_1["default"].root] = true,
      _a[DateSelect_styles_1["default"].root(this.theme)] = true,
      _a[DateSelect_module_less_1["default"].disabled] = !!disabled,
      _a)),
      style: { width: width },
      ref: this.refRoot };

    return React.createElement("span", tslib_1.__assign({}, rootProps),
    React.createElement("div", { className: DateSelect_module_less_1["default"].caption, onClick: this.open },
    this.getItem(0),
    React.createElement("div", { className: Emotion_1.cx((_b = {},
      _b[DateSelect_module_less_1["default"].arrow] = true,
      _b[DateSelect_styles_1["default"].arrow(this.theme)] = true,
      _b[DateSelect_module_less_1["default"].arrowDisabled] = !!disabled,
      _b)) },
    React.createElement(ArrowTriangleUpDown_1["default"], { size: 12 }))),
    this.state.opened && this.renderMenu());
  };
  DateSelect.prototype.disableItems = function (index) {
    var value = this.props.value + index;
    if (this.props.maxValue != null && this.props.minValue != null) {
      return value > this.props.maxValue || value < this.props.minValue;
    }
    if (this.props.minValue != null) {
      return value < this.props.minValue;
    }
    if (this.props.maxValue != null) {
      return value > this.props.maxValue;
    }
  };
  DateSelect.prototype.renderMenu = function () {
    var _this = this;
    var _a;
    var _b = this.state,top = _b.top,height = _b.height,nodeTop = _b.nodeTop;
    var shift = this.state.pos % itemHeight;
    if (shift < 0) {
      shift += itemHeight;
    }
    var from = (this.state.pos - shift + top) / itemHeight;
    var to = from + Math.ceil((height + shift) / itemHeight);
    var items = [];
    var _loop_1 = function _loop_1(i) {
      var _a;
      var disableItems = this_1.disableItems(i) || false;
      var className = Emotion_1.cx((_a = {},
      _a[DateSelect_module_less_1["default"].menuItem] = true,
      _a[DateSelect_styles_1["default"].menuItem(this_1.theme)] = true,
      _a[DateSelect_styles_1["default"].menuItemSelected(this_1.theme)] = i === 0,
      _a[DateSelect_styles_1["default"].menuItemActive(this_1.theme)] = i === this_1.state.current,
      _a[DateSelect_module_less_1["default"].menuItemDisabled] = disableItems,
      _a[DateSelect_styles_1["default"].menuItemDisabled(this_1.theme)] = disableItems,
      _a));
      var clickHandler = {
        onMouseDown: preventDefault,
        onClick: this_1.handleItemClick(i) };

      items.push(React.createElement("div", tslib_1.__assign({ key: i, className: className,
        // tslint:disable-next-line:jsx-no-lambda
        onMouseEnter: function onMouseEnter() {return _this.setState({ current: i });},
        // tslint:disable-next-line:jsx-no-lambda
        onMouseLeave: function onMouseLeave() {return _this.setState({ current: null });} }, clickHandler), this_1.getItem(i)));
    };
    var this_1 = this;
    for (var i = from; i < to; ++i) {
      _loop_1(i);
    }
    var style = {
      top: top - 5,
      left: 0,
      right: 0 };

    var shiftStyle = {
      position: 'relative',
      top: -shift };

    var holderClass = Emotion_1.cx((_a = {},
    _a[DateSelect_module_less_1["default"].menuHolder] = true,
    _a[DateSelect_styles_1["default"].menuHolder(this.theme)] = true,
    _a[DateSelect_module_less_1["default"].isTopCapped] = this.state.topCapped,
    _a[DateSelect_module_less_1["default"].isBotCapped] = this.state.botCapped,
    _a));
    var dropdownOffset = -itemHeight;
    if (nodeTop < -top) {
      var overflowOffsetDelta = this.state.topCapped ? 6 : 17;
      dropdownOffset -= nodeTop + top - overflowOffsetDelta;
    }
    return React.createElement(RenderLayer_1["default"], { onClickOutside: this.close, onFocusOutside: this.close, active: true },
    React.createElement("div", null,
    React.createElement(DropdownContainer_1["default"], { getParent: this.getAnchor, offsetY: dropdownOffset, offsetX: -10 },
    React.createElement("div", { className: holderClass, style: style },
    !this.state.topCapped && React.createElement("div", { className: Emotion_1.cx(DateSelect_module_less_1["default"].menuUp, DateSelect_styles_1["default"].menuUp(this.theme)), onClick: this.handleUp, onMouseDown: this.handleLongClickUp, onMouseUp: this.handleLongClickStop, onMouseLeave: this.handleLongClickStop, onTouchStart: this.handleLongClickUp, onTouchEnd: this.handleLongClickStop },
    React.createElement("span", null,
    React.createElement(ArrowTriangleUp_1["default"], null))),
    React.createElement("div", { className: DateSelect_module_less_1["default"].itemsHolder, style: { height: height } },
    React.createElement("div", { ref: this.refItemsContainer, style: shiftStyle }, items)),
    !this.state.botCapped && React.createElement("div", { className: Emotion_1.cx(DateSelect_module_less_1["default"].menuDown, DateSelect_styles_1["default"].menuDown(this.theme)), onClick: this.handleDown, onMouseDown: this.handleLongClickDown, onMouseUp: this.handleLongClickStop, onMouseLeave: this.handleLongClickStop, onTouchStart: this.handleLongClickDown, onTouchEnd: this.handleLongClickStop },
    React.createElement("span", null,
    React.createElement(ArrowTriangleDown_1["default"], null)))))));
  };
  DateSelect.prototype.getItem = function (index) {
    var value = this.props.value + index;
    if (this.props.type === 'month') {
      return this.locale.months[value];
    }
    return value;
  };
  DateSelect.prototype.setPosition = function (pos) {
    var top = itemsToMoveCount * itemHeight;
    var height = visibleYearsCount * itemHeight;
    if (this.props.type === 'month') {
      top = -this.props.value * itemHeight;
      height = monthsCount * itemHeight;
    }
    var minPos = this.getMinPos() - top;
    var maxPos = this.getMaxPos() - top - height + itemHeight;
    if (minPos >= pos) {
      pos = minPos;
    }
    if (maxPos <= pos) {
      pos = maxPos;
    }
    var topCapped = pos <= minPos;
    var botCapped = pos >= maxPos;
    this.setState({ pos: pos, top: top, height: height, topCapped: topCapped, botCapped: botCapped });
  };
  DateSelect.prototype.getMinPos = function () {
    if (this.props.type === 'month') {
      return -this.props.value * itemHeight;
    } else
    if (this.props.type === 'year') {
      return ((this.props.minValue || defaultMinYear) - this.props.value) * itemHeight;
    }
    return -Infinity; // Be defensive.
  };
  DateSelect.prototype.getMaxPos = function () {
    if (this.props.type === 'month') {
      return (visibleYearsCount - this.props.value) * itemHeight;
    } else
    if (this.props.type === 'year') {
      return ((this.props.maxValue || defaultMaxYear) - this.props.value) * itemHeight;
    }
    return Infinity; // Be defensive.
  };
  DateSelect.__KONTUR_REACT_UI__ = 'DateSelect';
  DateSelect.propTypes = {
    disabled: PropTypes.bool,
    type: PropTypes.string,
    value: PropTypes.number.isRequired,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    onChange: PropTypes.func,
    minValue: PropTypes.number,
    maxValue: PropTypes.number };

  DateSelect.defaultProps = {
    type: 'year',
    minMonth: 0,
    maxMonth: 11,
    width: 'auto' };

  DateSelect = tslib_1.__decorate([
  decorators_1.locale('DatePicker', locale_1.DatePickerLocaleHelper)],
  DateSelect);
  return DateSelect;
}(React.Component);
exports["default"] = DateSelect;
function preventDefault(e) {
  e.preventDefault();
}