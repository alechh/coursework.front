import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Nullable } from '../../typings/utility-types';
export interface DateSelectProps {
    disabled?: boolean | null;
    onChange: (value: number) => void;
    type?: 'month' | 'year';
    value: number;
    width?: number | string;
    minValue?: number;
    maxValue?: number;
}
export interface DateSelectState {
    botCapped: boolean;
    current: Nullable<number>;
    height: number;
    opened: boolean;
    pos: number;
    top: number;
    topCapped: boolean;
    nodeTop: number;
}
export default class DateSelect extends React.Component<DateSelectProps, DateSelectState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        disabled: PropTypes.Requireable<boolean>;
        type: PropTypes.Requireable<string>;
        value: PropTypes.Validator<number>;
        width: PropTypes.Requireable<string | number>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        minValue: PropTypes.Requireable<number>;
        maxValue: PropTypes.Requireable<number>;
    };
    static defaultProps: {
        type: string;
        minMonth: number;
        maxMonth: number;
        width: string;
    };
    state: {
        botCapped: boolean;
        current: number;
        height: number;
        opened: boolean;
        pos: number;
        top: number;
        topCapped: boolean;
        nodeTop: number;
    };
    private theme;
    private readonly locale;
    private root;
    private itemsContainer;
    private listener;
    private timeout;
    private longClickTimer;
    private setPositionRepeatTimer;
    private yearStep;
    componentWillReceiveProps(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    /**
     * @public
     */
    open: () => void;
    /**
     * @public
     */
    close: () => void;
    render(): JSX.Element;
    private renderMain;
    private refRoot;
    private setNodeTop;
    private disableItems;
    private renderMenu;
    private refItemsContainer;
    private handleLongClickUp;
    private handleLongClickDown;
    private handleLongClickStop;
    private getAnchor;
    private handleWheel;
    private handleItemClick;
    private handleKey;
    private handleUp;
    private handleDown;
    private getItem;
    private setPosition;
    private getMinPos;
    private getMaxPos;
}
