"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Toggle_module_less_1 = tslib_1.__importDefault(require("./Toggle.module.css"));
var Toggle_styles_1 = tslib_1.__importDefault(require("./Toggle.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var Toggle = /** @class */function (_super) {
  tslib_1.__extends(Toggle, _super);
  function Toggle(props) {
    var _this = _super.call(this, props) || this;
    _this.input = null;
    /**
                         * @public
                         */
    _this.focus = function () {
      if (_this.input) {
        tabListener_1["default"].isTabPressed = true;
        _this.input.focus();
      }
    };
    _this.inputRef = function (element) {
      _this.input = element;
    };
    _this.handleChange = function (event) {
      if (_this.props.onChange) {
        _this.props.onChange(event.target.checked);
      }
      if (_this.props.changeEventHandler) {
        _this.props.changeEventHandler(event);
      }
      if (_this.isUncontrolled()) {
        _this.setState({
          checked: event.target.checked });

      }
    };
    _this.handleFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
      if (tabListener_1["default"].isTabPressed) {
        _this.setState({ focusByTab: true });
      }
    };
    _this.handleBlur = function (event) {
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.setState({
        focusByTab: false });

    };
    _this.state = {
      focusByTab: false,
      checked: props.defaultChecked };

    return _this;
  }
  Toggle.prototype.componentDidMount = function () {
    if (this.props.autoFocus) {
      tabListener_1["default"].isTabPressed = true;
      this.focus();
    }
  };
  Toggle.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Toggle.prototype.renderMain = function () {
    var _a, _b;
    var _c = this.props,warning = _c.warning,error = _c.error,loading = _c.loading,color = _c.color;
    var disabled = this.props.disabled || loading;
    var checked = this.isUncontrolled() ? this.state.checked : this.props.checked;
    var containerClassNames = Emotion_1.cx(Toggle_module_less_1["default"].container, Toggle_styles_1["default"].container(this.theme), (_a = {},
    _a[Toggle_module_less_1["default"].isLoading] = !!loading,
    _a[Toggle_styles_1["default"].focused(this.theme)] = !disabled && !!this.state.focusByTab,
    _a[Toggle_styles_1["default"].isLoading(this.theme)] = !!loading,
    _a[Toggle_styles_1["default"].isWarning(this.theme)] = !color && !!warning,
    _a[Toggle_styles_1["default"].isError(this.theme)] = !color && !!error,
    _a));
    return React.createElement("label", { className: Emotion_1.cx(Toggle_module_less_1["default"].wrapper, Toggle_styles_1["default"].wrapper(this.theme), (_b = {},
      _b[Toggle_module_less_1["default"].isDisabled] = !!disabled,
      _b)) },
    React.createElement("input", { type: "checkbox", checked: checked, onChange: this.handleChange, className: Toggle_module_less_1["default"].input, onFocus: this.handleFocus, onBlur: this.handleBlur, ref: this.inputRef, disabled: disabled }),
    React.createElement("div", { className: containerClassNames, style: checked && color ?
      {
        backgroundColor: color,
        borderColor: color } :

      undefined },
    React.createElement("div", { className: Emotion_1.cx(Toggle_module_less_1["default"].activeBackground, Toggle_styles_1["default"].activeBackground(this.theme)), style: checked && color ? { backgroundColor: color } : undefined })),
    React.createElement("div", { className: Emotion_1.cx(Toggle_module_less_1["default"].handle, Toggle_styles_1["default"].handle(this.theme)) }));
  };
  Toggle.prototype.isUncontrolled = function () {
    return this.props.checked === undefined;
  };
  Toggle.__KONTUR_REACT_UI__ = 'Toggle';
  Toggle.propTypes = {
    checked: PropTypes.bool,
    defaultChecked: PropTypes.bool,
    disabled: PropTypes.bool,
    error: PropTypes.bool,
    loading: PropTypes.bool,
    warning: PropTypes.bool,
    onChange: PropTypes.func };

  Toggle.defaultProps = {
    disabled: false,
    loading: false };

  return Toggle;
}(React.Component);
exports["default"] = Toggle;