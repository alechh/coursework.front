import * as React from 'react';
import * as PropTypes from 'prop-types';
export interface ToggleProps {
    checked?: boolean;
    defaultChecked?: boolean;
    disabled?: boolean;
    onChange?: (value: boolean) => void;
    changeEventHandler?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    warning?: boolean;
    error?: boolean;
    loading?: boolean;
    autoFocus?: boolean;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    color?: React.CSSProperties['color'];
}
export interface ToggleState {
    checked?: boolean;
    focusByTab?: boolean;
}
export default class Toggle extends React.Component<ToggleProps, ToggleState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        checked: PropTypes.Requireable<boolean>;
        defaultChecked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        loading: PropTypes.Requireable<boolean>;
        warning: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        disabled: boolean;
        loading: boolean;
    };
    private theme;
    private input;
    constructor(props: ToggleProps);
    componentDidMount(): void;
    /**
     * @public
     */
    focus: () => void;
    render(): JSX.Element;
    private renderMain;
    private inputRef;
    private handleChange;
    private handleFocus;
    private handleBlur;
    private isUncontrolled;
}
