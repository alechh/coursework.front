import * as React from 'react';
import * as PropTypes from 'prop-types';
import ButtonItem from './ButtonItem';
import Divider from './Divider';
import Item from './Item';
import Organizations from './Organizations';
import TopBarDropdown from './TopBarDropdown';
import User from './User';
import '../ensureOldIEClassName';
import Logout from './TopBarLogout';
export interface TopBarProps {
    children?: React.ReactNode;
    color?: string;
    cabinetUrl?: string;
    leftItems?: Array<React.ReactElement<any>>;
    logoComponent?: React.ComponentType<any> | string;
    logoHref?: string;
    maxWidth?: string | number;
    noMargin?: boolean;
    noShadow?: boolean;
    noWidget?: boolean;
    onLogout?: () => void;
    rightItems?: Array<React.ReactElement<any>>;
    suffix?: string;
    userName?: string;
}
export interface TopBarDefaultProps {
    maxWidth: string | number;
    rightItems: Array<React.ReactElement<any>>;
}
/**
 * __DRAFT__
 *
 * Шапка
 *
 * `Item({children: node, iconOnly: bool, onClick: func})` – кликабельный элемент шапки
 *
 * `Divider()` – разделитель
 *
 * `Start({children: node})` – контейнер для элементов в начале шапки
 *
 * `End({children: node})` – контейнер для элементов в конце шапки
 *
 * `Logout({children?: node})` – обёртка над `Item`. По умолчанию выводит локализованный текст
 *
 */
declare class TopBar extends React.Component<TopBarProps> {
    static __KONTUR_REACT_UI__: string;
    static Divider: typeof Divider;
    static Item: typeof ButtonItem;
    static Dropdown: typeof TopBarDropdown;
    static OrganizationsDropdown: typeof Organizations;
    static Start: React.FunctionComponent<{}>;
    static End: React.FunctionComponent<{}>;
    static ItemStatic: typeof Item;
    static User: typeof User;
    static Logout: typeof Logout;
    static defaultProps: TopBarDefaultProps;
    static propTypes: {
        /**
         * URL для кастомизации ссылок в меню пользователя
         */
        cabinetUrl: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Цвет логотипа
         */
        color: PropTypes.Requireable<string>;
        leftItems: PropTypes.Requireable<(PropTypes.ReactElementLike | null | undefined)[]>;
        /**
         * Компонент используемый для рендеринга ссылки.
         * Нужно переопределить если вы хотите подставить ссылку для роутера
         */
        logoComponent: PropTypes.Requireable<any>;
        logoHref: PropTypes.Requireable<string>;
        /**
         * Максимальная ширина контейнера в шапке
         */
        maxWidth: PropTypes.Requireable<string | number>;
        /**
         * Отключает отступ снизу
         */
        noMargin: PropTypes.Requireable<boolean>;
        /**
         * Отключает тень
         */
        noShadow: PropTypes.Requireable<boolean>;
        /**
         * Отключает виджет
         */
        noWidget: PropTypes.Requireable<boolean>;
        rightItems: PropTypes.Requireable<(PropTypes.ReactElementLike | null | undefined)[]>;
        /**
         * Суффикс логотипа
         */
        suffix: PropTypes.Requireable<string>;
        /**
         * Имя пользователя
         */
        userName: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Функция выхода
         */
        onLogout: PropTypes.Requireable<(...args: any[]) => any>;
    };
    private theme;
    render(): JSX.Element;
    private renderMain;
    private _renderItems;
}
export default TopBar;
