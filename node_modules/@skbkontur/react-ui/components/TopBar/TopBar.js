"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var Logotype_1 = tslib_1.__importDefault(require("../Logotype"));
var ButtonItem_1 = tslib_1.__importDefault(require("./ButtonItem"));
var Divider_1 = tslib_1.__importDefault(require("./Divider"));
var Item_1 = tslib_1.__importDefault(require("./Item"));
var Organizations_1 = tslib_1.__importDefault(require("./Organizations"));
var TopBarDropdown_1 = tslib_1.__importDefault(require("./TopBarDropdown"));
var User_1 = tslib_1.__importDefault(require("./User"));
require("../ensureOldIEClassName");
var TopBar_module_less_1 = tslib_1.__importDefault(require("./TopBar.module.css"));
var TopBarEnd_1 = tslib_1.__importDefault(require("./TopBarEnd"));
var TopBarStart_1 = tslib_1.__importDefault(require("./TopBarStart"));
var TopBarLogout_1 = tslib_1.__importDefault(require("./TopBarLogout"));
var Emotion_1 = require("../../lib/theming/Emotion");
var TopBar_styles_1 = tslib_1.__importDefault(require("./TopBar.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
/**
                                                    * __DRAFT__
                                                    *
                                                    * Шапка
                                                    *
                                                    * `Item({children: node, iconOnly: bool, onClick: func})` – кликабельный элемент шапки
                                                    *
                                                    * `Divider()` – разделитель
                                                    *
                                                    * `Start({children: node})` – контейнер для элементов в начале шапки
                                                    *
                                                    * `End({children: node})` – контейнер для элементов в конце шапки
                                                    *
                                                    * `Logout({children?: node})` – обёртка над `Item`. По умолчанию выводит локализованный текст
                                                    *
                                                    */
var TopBar = /** @class */function (_super) {
  tslib_1.__extends(TopBar, _super);
  function TopBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TopBar.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  TopBar.prototype.renderMain = function () {
    var _a;
    var _b = this.props,children = _b.children,leftItems = _b.leftItems,cabinetUrl = _b.cabinetUrl,maxWidth = _b.maxWidth,noShadow = _b.noShadow,noMargin = _b.noMargin,userName = _b.userName,onLogout = _b.onLogout,_c = _b.rightItems,rightItems = _c === void 0 ? TopBar.defaultProps.rightItems : _c;
    var _rightItems = rightItems.slice();
    if (userName) {
      _rightItems.push(React.createElement(User_1["default"], { userName: userName, cabinetUrl: cabinetUrl }), React.createElement(Divider_1["default"], null));
    }
    if (onLogout) {
      _rightItems.push(React.createElement(TopBarLogout_1["default"], { onClick: onLogout }));
    }
    var logoProps = {
      suffix: this.props.suffix,
      color: this.props.color,
      href: this.props.logoHref,
      logoComponent: this.props.logoComponent,
      withWidget: !this.props.noWidget };

    return React.createElement("div", { className: Emotion_1.cx((_a = {},
      _a[TopBar_module_less_1["default"].root] = true,
      _a[TopBar_styles_1["default"].root(this.theme)] = true,
      _a[TopBar_styles_1["default"].noShadow()] = !!noShadow,
      _a[TopBar_module_less_1["default"].noMargin] = !!noMargin,
      _a)) },
    React.createElement("div", { className: TopBar_module_less_1["default"].center, style: { maxWidth: maxWidth } },
    React.createElement("div", { className: TopBar_module_less_1["default"].containerWrap }, children ? React.createElement("div", { className: TopBar_module_less_1["default"].container }, children) : React.createElement("div", { className: TopBar_module_less_1["default"].container },
    React.createElement("div", { className: TopBar_module_less_1["default"].startItems },
    React.createElement(Item_1["default"], null,
    React.createElement(Logotype_1["default"], tslib_1.__assign({}, logoProps))),
    this._renderItems(leftItems)),
    React.createElement("div", { className: TopBar_module_less_1["default"].endItems }, this._renderItems(_rightItems))))));
  };
  TopBar.prototype._renderItems = function (items) {
    if (!items) {
      return null;
    }
    return items.map(function (item, i) {
      if (item && !item.key) {
        return React.cloneElement(item, {
          key: '$topbar_' + i });

      }
      return item;
    });
  };
  TopBar.__KONTUR_REACT_UI__ = 'TopBar';
  TopBar.Divider = Divider_1["default"];
  TopBar.Item = ButtonItem_1["default"];
  TopBar.Dropdown = TopBarDropdown_1["default"];
  TopBar.OrganizationsDropdown = Organizations_1["default"];
  TopBar.Start = TopBarStart_1["default"];
  TopBar.End = TopBarEnd_1["default"];
  TopBar.ItemStatic = Item_1["default"];
  TopBar.User = User_1["default"];
  TopBar.Logout = TopBarLogout_1["default"];
  TopBar.defaultProps = {
    maxWidth: 1166,
    rightItems: [] };

  TopBar.propTypes = {
    /**
                        * URL для кастомизации ссылок в меню пользователя
                        */
    cabinetUrl: PropTypes.string,
    children: PropTypes.node,
    /**
                               * Цвет логотипа
                               */
    color: PropTypes.string,
    leftItems: PropTypes.arrayOf(PropTypes.element),
    /**
                                                      * Компонент используемый для рендеринга ссылки.
                                                      * Нужно переопределить если вы хотите подставить ссылку для роутера
                                                      */
    logoComponent: PropTypes.any,
    logoHref: PropTypes.string,
    /**
                                 * Максимальная ширина контейнера в шапке
                                 */
    maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
                                                                          * Отключает отступ снизу
                                                                          */
    noMargin: PropTypes.bool,
    /**
                               * Отключает тень
                               */
    noShadow: PropTypes.bool,
    /**
                               * Отключает виджет
                               */
    noWidget: PropTypes.bool,
    rightItems: PropTypes.arrayOf(PropTypes.element),
    /**
                                                       * Суффикс логотипа
                                                       */
    suffix: PropTypes.string,
    /**
                               * Имя пользователя
                               */
    userName: PropTypes.node,
    /**
                               * Функция выхода
                               */
    onLogout: PropTypes.func };

  return TopBar;
}(React.Component);
exports["default"] = TopBar;