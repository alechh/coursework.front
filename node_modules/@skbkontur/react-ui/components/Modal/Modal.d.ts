import * as React from 'react';
import { Footer } from './ModalFooter';
import { Header } from './ModalHeader';
import { Body } from './ModalBody';
export interface ModalProps {
    /**
     * Отключает событие onClose, также дизейблит кнопку закрытия модалки
     */
    disableClose?: boolean;
    /**
     * Выравнивание окна по верху страницы.
     */
    alignTop?: boolean;
    /**
     * Не закрывать окно при клике на фон.
     */
    ignoreBackgroundClick?: boolean;
    /**
     * Не показывать крестик для закрытия окна.
     */
    noClose?: boolean;
    width?: number | string;
    /**
     * Вызывается, когда пользователь запросил закрытие окна (нажал на фон, на
     * Escape или на крестик).
     */
    onClose?: () => void;
}
export interface ModalState {
    stackPosition: number;
    horizontalScroll: boolean;
}
/**
 * Модальное окно
 *
 * Содержит в себе три компоненты: **Modal.Header**,
 * **Modal.Body** и **Modal.Footer**
 *
 * Для отображения серой плашки в футере в компонент
 * **Footer** необходимо передать пропс **panel**
 *
 * Для отключения прилипания шапки и футера
 * в соответствующий компонет нужно передать
 * проп **sticky** со значением **false**
 * (по-умолчанию прилипание включено)
 */
export default class Modal extends React.Component<ModalProps, ModalState> {
    static __KONTUR_REACT_UI__: string;
    static Header: typeof Header;
    static Body: typeof Body;
    static Footer: typeof Footer;
    static propTypes: {
        children(props: ModalProps, propName: "width" | "onClose" | "disableClose" | "alignTop" | "ignoreBackgroundClick" | "noClose", componentName: string): Error | undefined;
    };
    state: ModalState;
    private theme;
    private stackSubscription;
    private containerNode;
    private mouseDownTarget;
    private mouseUpTarget;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private requestClose;
    private refContainer;
    private handleStackChange;
    private handleContainerMouseDown;
    private handleContainerMouseUp;
    private handleContainerClick;
    private handleKeyDown;
    private checkHorizontalScrollAppearance;
    private isDisableFocusLock;
    private handleResize;
}
