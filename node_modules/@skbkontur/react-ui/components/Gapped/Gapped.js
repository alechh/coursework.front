"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var prop_types_1 = tslib_1.__importDefault(require("prop-types"));
/**
                                                                    * Контейнер, расстояние между элементами в котором равно `gap`.
                                                                    */
var Gapped = /** @class */function (_super) {
  tslib_1.__extends(Gapped, _super);
  function Gapped() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Gapped.prototype.render = function () {
    if (this.props.vertical) {
      return this.renderVertical();
    }
    return this.renderHorizontal();
  };
  Gapped.prototype.renderVertical = function () {
    var subsequentItemStyle = {
      paddingTop: this.props.gap };

    var isFirst = true;
    var children = react_1["default"].Children.map(this.props.children, function (child) {
      if (!child) {
        return child;
      }
      var style = isFirst ? undefined : subsequentItemStyle;
      isFirst = false;
      return react_1["default"].createElement("div", { style: style }, child);
    });
    return react_1["default"].createElement("div", null, children);
  };
  Gapped.prototype.renderHorizontal = function () {
    var _a = this.props,gap = _a.gap,children = _a.children,verticalAlign = _a.verticalAlign,wrap = _a.wrap;
    var itemStyle = tslib_1.__assign({ display: 'inline-block', verticalAlign: verticalAlign }, wrap ? { marginLeft: gap, marginTop: gap } : {});
    var rootStyle = wrap ? { paddingTop: 1 } : {};
    var contStyle = wrap ? { marginTop: -gap - 1, marginLeft: -gap } : { whiteSpace: 'nowrap' };
    return react_1["default"].createElement("div", { style: rootStyle },
    react_1["default"].createElement("div", { style: contStyle }, react_1["default"].Children.map(children, function (child, index) {
      if (!child) {
        return child;
      }
      var marginLeft = index === 0 ? undefined : gap;
      return react_1["default"].createElement("span", { style: tslib_1.__assign({ marginLeft: marginLeft }, itemStyle) }, child);
    })));
  };
  Gapped.__KONTUR_REACT_UI__ = 'Gapped';
  Gapped.propTypes = {
    /**
                        * Расстояние между элементами.
                        */
    gap: prop_types_1["default"].number,
    /**
                                          * Располагать элементы вертикально.
                                          */
    vertical: prop_types_1["default"].bool,
    /**
                                             * Вертикальное выравнивание элементов.
                                             */
    verticalAlign: prop_types_1["default"].oneOf(['top', 'middle', 'baseline', 'bottom']) };

  Gapped.defaultProps = {
    gap: 10,
    wrap: false,
    vertical: false,
    verticalAlign: 'baseline' };

  return Gapped;
}(react_1["default"].Component);
exports["default"] = Gapped;