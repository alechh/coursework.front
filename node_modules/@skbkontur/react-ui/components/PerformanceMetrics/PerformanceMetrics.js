"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var Button_1 = tslib_1.__importDefault(require("../Button/Button"));
var react_dom_1 = tslib_1.__importDefault(require("react-dom"));
var Spinner_1 = tslib_1.__importDefault(require("../Spinner"));
var PANEL_WRAPPER_STYLES = { width: '45%', display: 'inline-block', verticalAlign: 'top' };
function PerformanceMetrics(props) {
  return react_1["default"].createElement("div", { style: { padding: 10, width: 1200 } },
  react_1["default"].createElement("div", { style: { position: 'absolute' } },
  react_1["default"].createElement(Spinner_1["default"], { type: 'mini', caption: '' })),
  react_1["default"].createElement("div", { style: { padding: 10 } },
  react_1["default"].createElement("div", { style: PANEL_WRAPPER_STYLES },
  react_1["default"].createElement(PerformanceMetricsPanel, { title: 'Case A', component: props.componentsA })),
  react_1["default"].createElement("div", { style: PANEL_WRAPPER_STYLES },
  react_1["default"].createElement(PerformanceMetricsPanel, { title: 'Case B', component: props.componentsB }))));
}
exports.PerformanceMetrics = PerformanceMetrics;
var PerformanceMetricsPanel = /** @class */function (_super) {
  tslib_1.__extends(PerformanceMetricsPanel, _super);
  function PerformanceMetricsPanel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      mounted: false };

    _this.setContainerRef = function (element) {
      _this.container = element;
    };
    _this.toggleMountedState = function () {
      _this.setState({
        mounted: !_this.state.mounted });

    };
    return _this;
  }
  PerformanceMetricsPanel.prototype.render = function () {
    return react_1["default"].createElement("div", null,
    react_1["default"].createElement("h1", { style: { lineHeight: '2em' } }, this.props.title),
    react_1["default"].createElement("div", { style: { marginBottom: 10 } },
    react_1["default"].createElement(Button_1["default"], { onClick: this.toggleMountedState, size: 'small' }, this.state.mounted ? 'Unmount' : 'Mount')),
    react_1["default"].createElement("div", { ref: this.setContainerRef }));
  };
  PerformanceMetricsPanel.prototype.componentDidMount = function () {
    if (this.state.mounted && this.container) {
      react_dom_1["default"].render(this.props.component, this.container);
    }
  };
  PerformanceMetricsPanel.prototype.componentDidUpdate = function () {
    if (!this.container) {
      return;
    }
    if (this.state.mounted) {
      react_dom_1["default"].render(this.props.component, this.container);
    } else
    {
      react_dom_1["default"].unmountComponentAtNode(this.container);
    }
  };
  return PerformanceMetricsPanel;
}(react_1["default"].Component);