"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var createPropsGetter_1 = require("../internal/createPropsGetter");
var tabListener_1 = tslib_1.__importDefault(require("../../lib/events/tabListener"));
var Link_module_less_1 = tslib_1.__importDefault(require("./Link.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Link_styles_1 = tslib_1.__importDefault(require("./Link.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
function getUseClasses(t) {
  return {
    "default": Emotion_1.cx(Link_module_less_1["default"].useDefault, Link_styles_1["default"].useDefault(t)),
    success: Emotion_1.cx(Link_module_less_1["default"].useSuccess),
    danger: Emotion_1.cx(Link_module_less_1["default"].useDanger),
    grayed: Emotion_1.cx(Link_module_less_1["default"].useGrayed, Link_styles_1["default"].useGrayed(t)) };

}
/**
   * Стандартная ссылка.
   * Интерфес пропсов наследуется от `React.AnchorHTMLAttributes<HTMLAnchorElement>`.
   * Все свойства передаются в элемент `<a>`.
   * `className` и `style` не поддерживаются
   */
var Link = /** @class */function (_super) {
  tslib_1.__extends(Link, _super);
  function Link() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      focusedByTab: false };

    _this.getProps = createPropsGetter_1.createPropsGetter(Link.defaultProps);
    _this._handleFocus = function (event) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (tabListener_1["default"].isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
      }
    };
    _this._handleBlur = function () {
      _this.setState({ focusedByTab: false });
    };
    _this._handleClick = function (event) {
      if (_this.props.onClick && !_this.props.disabled) {
        _this.props.onClick(event);
      }
    };
    return _this;
  }
  Link.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Link.prototype.renderMain = function () {
    var _a;
    var _b = this.getProps(),disabled = _b.disabled,href = _b.href,icon = _b.icon,use = _b.use,_button = _b._button,_buttonOpened = _b._buttonOpened,className = _b.className,style = _b.style,rest = tslib_1.__rest(_b, ["disabled", "href", "icon", "use", "_button", "_buttonOpened", "className", "style"]);
    var iconElement = null;
    if (icon) {
      iconElement = React.createElement("span", { className: Link_module_less_1["default"].icon }, icon);
    }
    var arrow = null;
    if (_button) {
      arrow = React.createElement("span", { className: Link_module_less_1["default"].arrow });
    }
    var props = {
      className: Emotion_1.cx((_a = {},
      _a[Link_module_less_1["default"].disabled] = !!disabled,
      _a[Link_styles_1["default"].disabled(this.theme)] = !!disabled,
      _a[Link_module_less_1["default"].button] = !!_button,
      _a[Link_module_less_1["default"].buttonOpened] = !!_buttonOpened,
      _a[Link_styles_1["default"].focus(this.theme)] = !disabled && this.state.focusedByTab,
      _a[getUseClasses(this.theme)[use]] = !!use,
      _a)),
      href: href,
      onClick: this._handleClick,
      onFocus: this._handleFocus,
      onBlur: this._handleBlur,
      tabIndex: this.props.tabIndex };

    if (disabled) {
      props.tabIndex = -1;
    }
    return React.createElement("a", tslib_1.__assign({}, rest, props),
    iconElement,
    this.props.children,
    arrow);
  };
  Link.__KONTUR_REACT_UI__ = 'Link';
  Link.propTypes = {
    disabled: PropTypes.bool,
    href: PropTypes.string,
    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    use: PropTypes.oneOf(['default', 'success', 'danger', 'grayed']) };

  Link.defaultProps = {
    href: 'javascript:',
    use: 'default' };

  return Link;
}(React.Component);
exports["default"] = Link;