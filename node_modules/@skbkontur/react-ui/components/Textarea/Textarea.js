"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var identifiers_1 = require("../../lib/events/keyboard/identifiers");
var polyfillPlaceholder_1 = tslib_1.__importDefault(require("../polyfillPlaceholder"));
require("../ensureOldIEClassName");
var lodash_throttle_1 = tslib_1.__importDefault(require("lodash.throttle"));
var LayoutEvents_1 = tslib_1.__importDefault(require("../../lib/LayoutEvents"));
var TextareaHelpers_1 = require("./TextareaHelpers");
var Emotion_1 = require("../../lib/theming/Emotion");
var Textarea_styles_1 = tslib_1.__importDefault(require("./Textarea.styles"));
var Textarea_module_less_1 = tslib_1.__importDefault(require("./Textarea.module.css"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var DEFAULT_WIDTH = 250;
/**
                          * Компонент для ввода многострочного текста.
                          *
                          * Принимает все атрибуты `React.TextareaHTMLAttributes<HTMLTextAreaElement>`
                          *
                          * ** `className` и `style`  игнорируются**
                          */
var Textarea = /** @class */function (_super) {
  tslib_1.__extends(Textarea, _super);
  function Textarea() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.state = {
      polyfillPlaceholder: polyfillPlaceholder_1["default"],
      rows: 1 };

    /**
                  * @public
                  */
    _this.setSelectionRange = function (start, end) {
      if (!_this.node) {
        throw new Error('Cannot call "setSelectionRange" on unmounted Input');
      }
      if (document.activeElement !== _this.node) {
        _this.focus();
      }
      _this.node.setSelectionRange(start, end);
    };
    /**
        * @public
        */
    _this.selectAll = function () {
      if (_this.node) {
        _this.setSelectionRange(0, _this.node.value.length);
      }
    };
    _this.handleKeyDown = function (e) {
      // Edge bug: textarea maxlength doesn't work after new line
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18833616/
      var value = _this.props.value !== undefined ? _this.props.value.toString() : null;
      var isBlockEnter = identifiers_1.isKeyEnter(e) && value !== null && value.length === _this.props.maxLength;
      if (isBlockEnter) {
        e.preventDefault();
      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };
    _this.handleChange = function (event) {
      if (polyfillPlaceholder_1["default"]) {
        var fieldIsEmpty = event.target.value === '';
        if (_this.state.polyfillPlaceholder !== fieldIsEmpty) {
          _this.setState({ polyfillPlaceholder: fieldIsEmpty });
        }
      }
      if (_this.props.onChange) {
        _this.props.onChange(event, event.target.value);
      }
      if (_this.props.autoResize) {
        _this.autoResize();
      }
    };
    _this.ref = function (element) {
      _this.node = element;
    };
    _this.refFake = function (element) {
      _this.fakeNode = element;
    };
    // tslint:disable-next-line:member-ordering
    _this.autoResize = lodash_throttle_1["default"](function () {
      var fakeNode = _this.fakeNode;
      if (!fakeNode) {
        return;
      }
      var node = _this.node;
      if (!node) {
        return;
      }
      if (_this.props.value === undefined) {
        fakeNode.value = node.value;
      }
      var _a = _this.props,rows = _a.rows,maxRows = _a.maxRows;
      if (rows === undefined || maxRows === undefined) {
        return;
      }
      var _b = TextareaHelpers_1.getTextAreaHeight(fakeNode, typeof rows === 'number' ? rows : parseInt(rows, 10), typeof maxRows === 'number' ? maxRows : parseInt(maxRows, 10)),height = _b.height,exceededMaxHeight = _b.exceededMaxHeight;
      node.style.height = height + 'px';
      node.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';
      fakeNode.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';
    }, 100);
    _this.handleCut = function (event) {
      if (_this.props.autoResize) {
        _this.autoResize();
      }
      if (_this.props.onPaste) {
        _this.props.onPaste(event);
      }
    };
    _this.handlePaste = function (event) {
      if (_this.props.autoResize) {
        _this.autoResize();
      }
      if (_this.props.onCut) {
        _this.props.onCut(event);
      }
    };
    _this.handleFocus = function (event) {
      if (_this.props.selectAllOnFocus) {
        _this.selectAll();
      }
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };
    return _this;
  }
  Textarea.prototype.componentDidMount = function () {
    if (this.props.autoResize) {
      this.autoResize();
      this.layoutEvents = LayoutEvents_1["default"].addListener(this.autoResize);
    }
  };
  Textarea.prototype.componentWillUnmount = function () {
    if (this.layoutEvents) {
      this.layoutEvents.remove();
    }
  };
  Textarea.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.autoResize && this.props.rows > this.state.rows || this.props.value !== prevProps.value) {
      this.autoResize();
    }
  };
  Textarea.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  /**
      * @public
      */
  Textarea.prototype.focus = function () {
    if (this.node) {
      this.node.focus();
    }
  };
  /**
      * @public
      */
  Textarea.prototype.blur = function () {
    if (this.node) {
      this.node.blur();
    }
  };
  Textarea.prototype.renderMain = function () {
    var _a;
    var _b = this.props,_c = _b.width,width = _c === void 0 ? DEFAULT_WIDTH : _c,error = _b.error,warning = _b.warning,autoResize = _b.autoResize,resize = _b.resize,onCut = _b.onCut,onPaste = _b.onPaste,maxRows = _b.maxRows,onFocus = _b.onFocus,selectAllOnFocus = _b.selectAllOnFocus,className = _b.className,style = _b.style,placeholder = _b.placeholder,textareaProps = tslib_1.__rest(_b, ["width", "error", "warning", "autoResize", "resize", "onCut", "onPaste", "maxRows", "onFocus", "selectAllOnFocus", "className", "style", "placeholder"]);
    var rootProps = {
      style: {
        width: width } };


    var textareaClassNames = Emotion_1.cx((_a = {},
    _a[Textarea_module_less_1["default"].textarea] = true,
    _a[Textarea_styles_1["default"].textarea(this.theme)] = true,
    _a[Textarea_styles_1["default"].error(this.theme)] = !!error,
    _a[Textarea_styles_1["default"].warning(this.theme)] = !!warning,
    _a));
    var textAreaStyle = {
      resize: autoResize ? 'none' : resize };

    var placeholderPolyfill = null;
    if (this.state.polyfillPlaceholder && !textareaProps.value) {
      placeholderPolyfill = React.createElement("span", { className: Textarea_module_less_1["default"].placeholder }, placeholder);
    }
    var fakeTextarea = null;
    if (autoResize) {
      var fakeProps = {
        value: this.props.value,
        defaultValue: this.props.defaultValue,
        className: Emotion_1.cx(textareaClassNames, Textarea_module_less_1["default"].fake),
        readOnly: true };

      fakeTextarea = React.createElement("textarea", tslib_1.__assign({}, fakeProps, { ref: this.refFake }));
    }
    return React.createElement("label", tslib_1.__assign({}, rootProps, { className: Emotion_1.cx(Textarea_module_less_1["default"].root, Textarea_styles_1["default"].root(this.theme)) }),
    placeholderPolyfill,
    React.createElement("textarea", tslib_1.__assign({}, textareaProps, { className: textareaClassNames, style: textAreaStyle, placeholder: !placeholderPolyfill ? placeholder : undefined, ref: this.ref, onChange: this.handleChange, onCut: this.handleCut, onPaste: this.handlePaste, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown })),
    fakeTextarea);
  };
  Textarea.__KONTUR_REACT_UI__ = 'Textarea';
  Textarea.propTypes = {
    error: PropTypes.bool,
    warning: PropTypes.bool,
    disabled: PropTypes.bool,
    autoResize: PropTypes.bool,
    maxRows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    resize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    id: PropTypes.string,
    name: PropTypes.string,
    title: PropTypes.string,
    spellCheck: PropTypes.bool,
    role: PropTypes.string,
    maxLength: PropTypes.number,
    tabIndex: PropTypes.number,
    rows: PropTypes.number,
    placeholder: PropTypes.string,
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    onChange: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMouseOver: PropTypes.func,
    onMouseMove: PropTypes.func,
    onMouseOut: PropTypes.func,
    onMouseUp: PropTypes.func,
    onMouseDown: PropTypes.func,
    onClick: PropTypes.func,
    onDoubleClick: PropTypes.func,
    onKeyDown: PropTypes.func,
    onKeyPress: PropTypes.func,
    onKeyUp: PropTypes.func,
    onInput: PropTypes.func,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    onScroll: PropTypes.func,
    onWheel: PropTypes.func,
    onCut: PropTypes.func,
    onPaste: PropTypes.func,
    onCopy: PropTypes.func };

  Textarea.defaultProps = {
    rows: 3,
    maxRows: 15 };

  return Textarea;
}(React.Component);
exports["default"] = Textarea;