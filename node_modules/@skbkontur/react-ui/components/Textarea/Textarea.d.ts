import * as React from 'react';
import * as PropTypes from 'prop-types';
import '../ensureOldIEClassName';
import { TextareaAdapter } from './Textarea.adapter';
import { Override } from '../../typings/utility-types';
export declare type TextareaProps = Override<React.TextareaHTMLAttributes<HTMLTextAreaElement>, {
    /** Ошибка */
    error?: boolean;
    /** Предупреждение */
    warning?: boolean;
    /** Не активное состояние */
    disabled?: boolean;
    /**
     * Атоматический ресайз
     * в зависимости от содержимого
     */
    autoResize?: boolean;
    /**
     * Число строк
     */
    rows: number;
    /**
     * Максимальное число строк при
     * автоматическом ресайзе
     */
    maxRows: string | number;
    /**
     * Стандартный ресайз
     * Попадает в `style`
     */
    resize?: React.CSSProperties['resize'];
    /**
     * Ширина
     */
    width?: React.CSSProperties['width'];
    /**
     * Обработчик события `change`
     */
    onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>, value: string) => void;
    /** Выделение значения при фокусе */
    selectAllOnFocus?: boolean;
}>;
export interface TextareaState {
    polyfillPlaceholder: boolean;
    rows: number | string;
}
/**
 * Компонент для ввода многострочного текста.
 *
 * Принимает все атрибуты `React.TextareaHTMLAttributes<HTMLTextAreaElement>`
 *
 * ** `className` и `style`  игнорируются**
 */
declare class Textarea extends React.Component<TextareaProps, TextareaState> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        error: PropTypes.Requireable<boolean>;
        warning: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        autoResize: PropTypes.Requireable<boolean>;
        maxRows: PropTypes.Requireable<string | number>;
        resize: PropTypes.Requireable<string | number>;
        width: PropTypes.Requireable<string | number>;
        id: PropTypes.Requireable<string>;
        name: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        spellCheck: PropTypes.Requireable<boolean>;
        role: PropTypes.Requireable<string>;
        maxLength: PropTypes.Requireable<number>;
        tabIndex: PropTypes.Requireable<number>;
        rows: PropTypes.Requireable<number>;
        placeholder: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseUp: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyUp: PropTypes.Requireable<(...args: any[]) => any>;
        onInput: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        onWheel: PropTypes.Requireable<(...args: any[]) => any>;
        onCut: PropTypes.Requireable<(...args: any[]) => any>;
        onPaste: PropTypes.Requireable<(...args: any[]) => any>;
        onCopy: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        rows: number;
        maxRows: number;
    };
    static __ADAPTER__: typeof TextareaAdapter;
    state: {
        polyfillPlaceholder: boolean;
        rows: number;
    };
    private theme;
    private node;
    private fakeNode;
    private layoutEvents;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: TextareaProps): void;
    render(): JSX.Element;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    /**
     * @public
     */
    setSelectionRange: (start: number, end: number) => void;
    /**
     * @public
     */
    selectAll: () => void;
    private renderMain;
    private handleKeyDown;
    private handleChange;
    private ref;
    private refFake;
    private autoResize;
    private handleCut;
    private handlePaste;
    private handleFocus;
}
export default Textarea;
