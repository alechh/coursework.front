"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var decorators_1 = require("../LocaleProvider/decorators");
var Popup_1 = tslib_1.__importDefault(require("../Popup/Popup"));
var ComboBoxMenu_1 = tslib_1.__importDefault(require("../CustomComboBox/ComboBoxMenu"));
var MenuItem_1 = tslib_1.__importDefault(require("../MenuItem/MenuItem"));
var locale_1 = require("./locale");
var TokenInputMenu = /** @class */function (_super) {
  tslib_1.__extends(TokenInputMenu, _super);
  function TokenInputMenu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.menu = null;
    _this.getMenuRef = function () {return _this.menu;};
    _this.menuRef = function (node) {return _this.menu = node;};
    _this.renderAddButton = function (value) {
      if (value === void 0) {value = _this.props.inputValue;}
      if (!_this.props.showAddItemHint) {
        return;
      }
      var _a = _this.locale,addButtonComment = _a.addButtonComment,addButtonTitle = _a.addButtonTitle;
      var handleAddItemNoteClick = function handleAddItemNoteClick() {return _this.props.onAddItem(value);};
      return React.createElement(MenuItem_1["default"], { onClick: handleAddItemNoteClick, comment: addButtonComment, key: "renderAddButton" },
      addButtonTitle,
      " ",
      value);
    };
    return _this;
  }
  TokenInputMenu.prototype.render = function () {
    var _a = this.props,loading = _a.loading,maxMenuHeight = _a.maxMenuHeight,renderTotalCount = _a.renderTotalCount,totalCount = _a.totalCount,opened = _a.opened,items = _a.items,renderNotFound = _a.renderNotFound,renderItem = _a.renderItem,onChange = _a.onChange;
    return React.createElement(Popup_1["default"], { opened: opened, positions: ['bottom left'], anchorElement: this.props.anchorElement, margin: 6, popupOffset: 5 },
    React.createElement(ComboBoxMenu_1["default"], { items: items, loading: loading, maxMenuHeight: maxMenuHeight, onChange: onChange, opened: opened, refMenu: this.menuRef, renderTotalCount: renderTotalCount, renderItem: renderItem, renderNotFound: renderNotFound, totalCount: totalCount, renderAddButton: this.renderAddButton }));
  };
  TokenInputMenu.__KONTUR_REACT_UI__ = 'TokenInputMenu';
  TokenInputMenu = tslib_1.__decorate([
  decorators_1.locale('TokenInput', locale_1.TokenInputLocaleHelper)],
  TokenInputMenu);
  return TokenInputMenu;
}(React.Component);
exports["default"] = TokenInputMenu;