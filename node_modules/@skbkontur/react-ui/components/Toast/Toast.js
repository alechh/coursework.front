"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var RenderContainer_1 = tslib_1.__importDefault(require("../RenderContainer"));
var react_transition_group_1 = require("react-transition-group");
var ToastView_1 = tslib_1.__importDefault(require("./ToastView"));
var ToastStatic_1 = tslib_1.__importDefault(require("./ToastStatic"));
require("./Toast.module.css");
/**
                                * Toast manages notifications
                                * method `push` is sending notification,
                                * then automatically hides it after 3 or 7 seconds,
                                * depending on if this notification contains action or not.
                                *
                                * Can be used like `Toast.push('message')` or
                                * `Toast.push('message', {label: 'Cancel', handler: cancelHandler})`
                                */
var Toast = /** @class */function (_super) {
  tslib_1.__extends(Toast, _super);
  function Toast(props) {
    var _this = _super.call(this, props) || this;
    _this._timeout = null;
    /**
                            * @public
                            */
    _this.close = function () {
      safelyCall(_this.props.onClose, _this.state.notification, _this.state.action);
      _this.setState({ notification: null, action: null });
    };
    _this._clearTimer = function () {
      if (_this._timeout) {
        clearTimeout(_this._timeout);
        _this._timeout = null;
      }
    };
    _this._setTimer = function () {
      _this._clearTimer();
      var timeOut = _this.state.action ? 7 : 3;
      _this._timeout = window.setTimeout(_this.close, timeOut * 1000);
    };
    _this._refToast = function (element) {
      _this._toast = element;
    };
    _this.state = {
      notification: null,
      action: null,
      id: 0 };

    return _this;
  }
  Toast.push = function (notification, action) {
    ToastStatic_1["default"].push(notification, action);
  };
  Toast.close = function () {
    ToastStatic_1["default"].close();
  };
  Toast.prototype.componentWillUnmount = function () {
    this._clearTimer();
  };
  Toast.prototype.render = function () {
    return React.createElement(RenderContainer_1["default"], null,
    React.createElement(react_transition_group_1.TransitionGroup, null, this._renderToast()));
  };
  /**
      * Показывает тост с `notification` в качестве сообщения.
      *
      * `action` опциональный параметр формата `{ label: string, handler: function }` добавляет кнопку в виде ссылки при клике на которую вызывается переданный handler
      * @public
      * @param notification
      * @param action
      */
  Toast.prototype.push = function (notification, action) {
    if (this.state.notification) {
      this.close();
    }
    safelyCall(this.props.onPush, notification, action);
    this.setState(function (_a) {
      var id = _a.id;
      return { notification: notification, action: action, id: id + 1 };
    }, this._setTimer);
  };
  Toast.prototype._renderToast = function () {
    var _a = this.state,notification = _a.notification,action = _a.action,id = _a.id;
    if (!notification) {
      return null;
    }
    var toastProps = {
      onMouseEnter: this._clearTimer,
      onMouseLeave: this._setTimer,
      onClose: this.close,
      children: notification,
      action: action };

    return React.createElement(react_transition_group_1.CSSTransition, { key: id, classNames: "slide-and-fade", timeout: {
        enter: 200,
        exit: 150 } },

    React.createElement(ToastView_1["default"], tslib_1.__assign({ ref: this._refToast }, toastProps)));
  };
  Toast.__KONTUR_REACT_UI__ = 'Toast';
  return Toast;
}(React.Component);
exports["default"] = Toast;
function safelyCall(fn) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (fn) {
    fn.apply(void 0, args);
  }
}