import * as React from 'react';
import ToastView from './ToastView';
import './Toast.module.less';
import { Nullable } from '../../typings/utility-types';
export interface Action {
    label: string;
    handler: () => void;
}
export interface ToastState {
    notification: Nullable<string>;
    action: Nullable<Action>;
    id: number;
}
export interface ToastProps {
    onPush?: (notification: string, action?: Action) => void;
    onClose?: (notification: string, action?: Action) => void;
}
/**
 * Toast manages notifications
 * method `push` is sending notification,
 * then automatically hides it after 3 or 7 seconds,
 * depending on if this notification contains action or not.
 *
 * Can be used like `Toast.push('message')` or
 * `Toast.push('message', {label: 'Cancel', handler: cancelHandler})`
 */
declare class Toast extends React.Component<ToastProps, ToastState> {
    static __KONTUR_REACT_UI__: string;
    static push(notification: string, action?: Action): void;
    static close(): void;
    _toast: Nullable<ToastView>;
    private _timeout;
    constructor(props: ToastProps);
    componentWillUnmount(): void;
    render(): JSX.Element;
    /**
     * Показывает тост с `notification` в качестве сообщения.
     *
     * `action` опциональный параметр формата `{ label: string, handler: function }` добавляет кнопку в виде ссылки при клике на которую вызывается переданный handler
     * @public
     * @param notification
     * @param action
     */
    push(notification: string, action?: Action): void;
    /**
     * @public
     */
    close: () => void;
    private _renderToast;
    private _clearTimer;
    private _setTimer;
    private _refToast;
}
export default Toast;
