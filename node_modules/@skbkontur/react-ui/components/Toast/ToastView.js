"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var cross_1 = tslib_1.__importDefault(require("../internal/cross"));
var ZIndex_1 = tslib_1.__importDefault(require("../ZIndex/ZIndex"));
var ToastView_module_less_1 = tslib_1.__importDefault(require("./ToastView.module.css"));
var ToastView_styles_1 = tslib_1.__importDefault(require("./ToastView.styles"));
var Emotion_1 = require("../../lib/theming/Emotion");
var ThemeConsumer_1 = require("../ThemeConsumer");
var ToastView = /** @class */function (_super) {
  tslib_1.__extends(ToastView, _super);
  function ToastView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ToastView.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  ToastView.prototype.renderMain = function () {
    var _a = this.props,children = _a.children,action = _a.action,onClose = _a.onClose,rest = tslib_1.__rest(_a, ["children", "action", "onClose"]);
    var link = action ? React.createElement("span", { className: Emotion_1.cx(ToastView_module_less_1["default"].link, ToastView_styles_1["default"].link(this.theme)), onClick: action.handler }, action.label) : null;
    var close = action ? React.createElement("span", { className: Emotion_1.cx(ToastView_module_less_1["default"].close, ToastView_styles_1["default"].close(this.theme)), onClick: onClose }, cross_1["default"]) : null;
    return React.createElement(ZIndex_1["default"], { priority: "Toast", className: ToastView_module_less_1["default"].wrapper },
    React.createElement("div", tslib_1.__assign({ className: Emotion_1.cx(ToastView_module_less_1["default"].root, ToastView_styles_1["default"].root(this.theme)) }, rest),
    React.createElement("span", null, children),
    link,
    close));
  };
  ToastView.propTypes = {
    /**
                           * Adds action handling and close icon for toast
                           */
    action: PropTypes.shape({
      label: PropTypes.string.isRequired,
      handler: PropTypes.func.isRequired }),

    /**
                                              * Toast content
                                              */
    children: PropTypes.string.isRequired,
    onClose: PropTypes.func };

  return ToastView;
}(React.Component);
exports["default"] = ToastView;