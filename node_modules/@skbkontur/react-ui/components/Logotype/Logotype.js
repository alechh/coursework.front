"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var PropTypes = tslib_1.__importStar(require("prop-types"));
var ArrowChevronDown_1 = tslib_1.__importDefault(require("@skbkontur/react-icons/ArrowChevronDown"));
var stopPropagation_1 = tslib_1.__importDefault(require("../../lib/events/stopPropagation"));
var decorators_1 = require("../LocaleProvider/decorators");
var locale_1 = require("./locale");
var ProductWidget_1 = tslib_1.__importDefault(require("./ProductWidget"));
var Logotype_module_less_1 = tslib_1.__importDefault(require("./Logotype.module.css"));
var Emotion_1 = require("../../lib/theming/Emotion");
var Logotype_styles_1 = tslib_1.__importDefault(require("./Logotype.styles"));
var ThemeConsumer_1 = require("../ThemeConsumer");
var createCloud = function createCloud(size, color) {
  var INITIAL_WIDTH = 23;
  var INITIAL_HEIGHT = 17;
  var INITIAL_VERTICAL_ALIGN = -1;
  var INITIAL_FONT_SIZE = Logotype.defaultProps.size;
  return React.createElement("svg", { viewBox: "0 0 " + INITIAL_WIDTH + " " + INITIAL_HEIGHT, className: Logotype_module_less_1["default"].cloud, style: {
      width: size * (INITIAL_WIDTH / INITIAL_FONT_SIZE),
      height: size * (INITIAL_HEIGHT / INITIAL_FONT_SIZE),
      verticalAlign: size * (INITIAL_VERTICAL_ALIGN / INITIAL_FONT_SIZE) } },

  React.createElement("path", { fill: color, d: "M10.7947842,0 C7.67880353,0 5.01508082,2.01193926 3.95917347,4.8416599 C1.64805866,5.73629303 0,8.0359337 0,10.7178625 C0,14.1880144 2.7403766,17 6.10931511,17 L16.1509748,17 C19.926179,17 23,13.8471079 23,9.9670801 C23,6.23681465 20.163806,3.18047989 16.5974838,2.93810131 C15.2464589,1.11730613 13.1365606,0 10.7947842,0 M10.8198444,2 C12.5405642,2 14.1189689,2.79038796 15.1502918,4.16792125 L15.5920233,4.75130284 L16.3109922,4.80399537 C18.9410506,4.97148234 21,7.20903301 21,9.89635206 C21,12.7059931 18.7525292,15 15.9857004,15 L6.30087549,15 C3.93142023,15 2,13.0315576 2,10.6133468 C2,8.80298205 3.12373541,7.16010423 4.78715953,6.51650261 L5.45807393,6.25868558 L5.71682879,5.57368269 C6.52081712,3.43587145 8.57052529,2 10.8198444,2" }));
};
var Logotype = /** @class */function (_super) {
  tslib_1.__extends(Logotype, _super);
  function Logotype() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.logoWrapper = null;
    _this.isWidgetInited = false;
    _this.refLogoWrapper = function (el) {
      if (_this.logoWrapper) {
        _this.logoWrapper.removeEventListener('click', _this.handleNativeLogoClick);
      }
      if (el) {
        el.addEventListener('click', _this.handleNativeLogoClick);
      }
      _this.logoWrapper = el;
    };
    _this.handleNativeLogoClick = function (event) {
      stopPropagation_1["default"](event);
    };
    _this.initWidget = function () {
      if (!_this.isWidgetInited) {
        ProductWidget_1["default"].init();
        _this.isWidgetInited = true;
      }
    };
    return _this;
  }
  Logotype.prototype.componentDidMount = function () {
    if (this.props.withWidget) {
      this.initWidget();
    }
  };
  Logotype.prototype.componentDidUpdate = function () {
    if (this.props.withWidget) {
      this.initWidget();
    }
  };
  Logotype.prototype.render = function () {
    var _this = this;
    return React.createElement(ThemeConsumer_1.ThemeConsumer, null, function (theme) {
      _this.theme = theme;
      return _this.renderMain();
    });
  };
  Logotype.prototype.renderMain = function () {
    var _a;
    var _b = this.props,color = _b.color,textColor = _b.textColor,Component = _b.component,suffix = _b.suffix,size = _b.size,href = _b.href,withWidget = _b.withWidget,_c = _b.locale,propLocale = _c === void 0 ? this.locale : _c,onArrowClick = _b.onArrowClick;
    var dropdownClassName = Emotion_1.cx(Logotype_module_less_1["default"].dropdown, (_a = {},
    _a[Logotype_module_less_1["default"].inline] = !withWidget,
    _a));
    return React.createElement("div", { id: "spwDropdown", className: dropdownClassName },
    React.createElement("span", { ref: this.refLogoWrapper, className: Logotype_module_less_1["default"].widgetWrapper },
    React.createElement(Component, { href: href, tabIndex: "-1", className: Emotion_1.cx(Logotype_module_less_1["default"].root, Logotype_styles_1["default"].root(this.theme)), style: { fontSize: size + "px" } },
    React.createElement("span", { style: { color: textColor } }, propLocale.prefix),
    React.createElement("span", { style: { color: color } }, createCloud(size, color)),
    React.createElement("span", { style: { color: textColor } },
    propLocale.suffix,
    suffix && '.'),
    suffix && React.createElement("span", { style: { color: color } }, suffix)),
    withWidget && React.createElement("span", { className: Emotion_1.cx(Logotype_module_less_1["default"].divider, Logotype_styles_1["default"].divider(this.theme)) })),
    withWidget && React.createElement("button", { className: Logotype_module_less_1["default"].button, onClick: onArrowClick },
    React.createElement(ArrowChevronDown_1["default"], { color: "#aaa", size: 20 })));
  };
  Logotype.__KONTUR_REACT_UI__ = 'Logotype';
  Logotype.propTypes = {
    color: PropTypes.string,
    href: PropTypes.string,
    suffix: PropTypes.string,
    size: PropTypes.number,
    textColor: PropTypes.string,
    withWidget: PropTypes.bool,
    locale: PropTypes.shape({
      prefix: PropTypes.string,
      suffix: PropTypes.string }) };


  Logotype.defaultProps = {
    color: '#D92932',
    size: 22,
    textColor: '#000',
    component: 'a',
    href: '/' };

  Logotype = tslib_1.__decorate([
  decorators_1.locale('Logotype', locale_1.LogotypeLocaleHelper)],
  Logotype);
  return Logotype;
}(React.Component);
exports["default"] = Logotype;