"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../components/LocaleProvider/constants");
var constants_2 = require("./constants");
var InternalDateCalculator_1 = tslib_1.__importDefault(require("./InternalDateCalculator"));
var InternalDateGetter_1 = tslib_1.__importDefault(require("./InternalDateGetter"));
var InternalDateSetter_1 = tslib_1.__importDefault(require("./InternalDateSetter"));
var InternalDateTransformer_1 = tslib_1.__importDefault(require("./InternalDateTransformer"));
var InternalDateValidator_1 = tslib_1.__importDefault(require("./InternalDateValidator"));
var localeSets_1 = require("./localeSets");
var types_1 = require("./types");
var InternalDate = /** @class */function () {
  function InternalDate(_a) {
    var _b = _a === void 0 ? {} : _a,order = _b.order,separator = _b.separator,_c = _b.langCode,langCode = _c === void 0 ? constants_1.defaultLangCode : _c,value = _b.value;
    this.components = tslib_1.__assign({}, constants_2.emptyDateComponents);
    this.start = null;
    this.end = null;
    this.order = !order ? localeSets_1.internalDateLocale[langCode].order : order;
    this.separator = !separator ? localeSets_1.internalDateLocale[langCode].separator : separator;
    if (value !== undefined) {
      this.parseInternalValue(value);
    }
  }
  InternalDate.prototype.getComponentsRaw = function () {
    return tslib_1.__assign({}, this.components);
  };
  InternalDate.prototype.getComponentsLikeNumber = function () {
    return InternalDateTransformer_1["default"].dateComponentsStringToNumber(this.getComponentsRaw());
  };
  InternalDate.prototype.getSeparator = function () {
    return this.separator;
  };
  InternalDate.prototype.getOrder = function () {
    return this.order;
  };
  InternalDate.prototype.getYear = function () {
    return this.components.year;
  };
  InternalDate.prototype.getMonth = function () {
    return this.components.month;
  };
  InternalDate.prototype.getDate = function () {
    return this.components.date;
  };
  InternalDate.prototype.getRangeStart = function () {
    return this.start;
  };
  InternalDate.prototype.getRangeEnd = function () {
    return this.end;
  };
  InternalDate.prototype.setOrder = function (order) {
    if (order === void 0) {order = constants_2.defaultDateComponentsOrder;}
    this.order = order;
    return this;
  };
  InternalDate.prototype.setSeparator = function (separator) {
    if (separator === void 0) {separator = constants_2.defaultDateComponentsSeparator;}
    this.separator = separator;
    return this;
  };
  InternalDate.prototype.setComponents = function (components, isNativeMonth) {
    if (isNativeMonth === void 0) {isNativeMonth = false;}
    if (components && isNativeMonth) {
      var clone = this.clone().
      setComponents(components).
      shiftMonth(1);
      if (clone.validate({ checks: [types_1.InternalDateValidateCheck.Native] })) {
        this.components = tslib_1.__assign({}, clone.getComponentsLikeNumber());
      }
      return this;
    }
    this.components = components || tslib_1.__assign({}, constants_2.emptyDateComponents);
    return this;
  };
  InternalDate.prototype.setYear = function (year) {
    this.components.year = year;
    return this;
  };
  InternalDate.prototype.setMonth = function (month) {
    this.components.month = month;
    return this;
  };
  InternalDate.prototype.setDate = function (date) {
    this.components.date = date;
    return this;
  };
  InternalDate.prototype.shiftYear = function (step, _a) {
    var _b = _a === void 0 ? {} : _a,isLoop = _b.isLoop,isRange = _b.isRange,isCutFeb = _b.isCutFeb;
    var min = this.getMinValue(types_1.InternalDateComponentType.Year, isRange);
    var max = this.getMaxValue(types_1.InternalDateComponentType.Year, { isRange: isRange, isCutFeb: isCutFeb });
    var year = this.getComponentsLikeNumber().year;
    this.components.year = InternalDateCalculator_1["default"].calcShiftValueDateComponent(step, year, min, max, isLoop);
    return this;
  };
  InternalDate.prototype.shiftMonth = function (step, _a) {
    var _b = _a === void 0 ? {} : _a,isLoop = _b.isLoop,isRange = _b.isRange,isCutFeb = _b.isCutFeb;
    var min = this.getMinValue(types_1.InternalDateComponentType.Month, isRange);
    var max = this.getMaxValue(types_1.InternalDateComponentType.Month, { isRange: isRange, isCutFeb: isCutFeb });
    var month = this.getComponentsLikeNumber().month;
    this.components.month = InternalDateCalculator_1["default"].calcShiftValueDateComponent(step, month, min, max, isLoop);
    return this;
  };
  InternalDate.prototype.shiftDate = function (step, _a) {
    var _b = _a === void 0 ? {} : _a,isLoop = _b.isLoop,isRange = _b.isRange,isCutFeb = _b.isCutFeb;
    var min = this.getMinValue(types_1.InternalDateComponentType.Date, isRange);
    var max = this.getMaxValue(types_1.InternalDateComponentType.Date, { isRange: isRange, isCutFeb: isCutFeb });
    var date = this.getComponentsLikeNumber().date;
    this.components.date = InternalDateCalculator_1["default"].calcShiftValueDateComponent(step, date, min, max, isLoop);
    return this;
  };
  InternalDate.prototype.setRangeStart = function (internalDate) {
    this.start = internalDate;
    return this;
  };
  InternalDate.prototype.setRangeEnd = function (internalDate) {
    this.end = internalDate;
    return this;
  };
  InternalDate.prototype.get = function (type) {
    return type !== null ? InternalDateGetter_1["default"].getValueDateComponent(type, this.getComponentsRaw()) : null;
  };
  InternalDate.prototype.set = function (type, value) {
    return type !== null ? InternalDateSetter_1["default"].setValueDateComponent(this, type, value) : this;
  };
  InternalDate.prototype.shift = function (type, step, settings) {
    return type !== null ? InternalDateSetter_1["default"].shiftValueDateComponent(this, type, step, settings) : this;
  };
  InternalDate.prototype.parseValue = function (value) {
    if (value === void 0) {value = '';}
    var components = InternalDateTransformer_1["default"].parseValueToDate(value, this.order) || tslib_1.__assign({}, constants_2.emptyDateComponents);
    this.setComponents(components);
    return this;
  };
  InternalDate.prototype.parseInternalValue = function (value) {
    if (value === void 0) {value = '';}
    var components = InternalDateTransformer_1["default"].parseValueToDate(value, types_1.InternalDateOrder.DMY) || tslib_1.__assign({}, constants_2.emptyDateComponents);
    this.setComponents(components);
    return this;
  };
  InternalDate.prototype.validate = function (_a) {
    var _b = _a === void 0 ? {} : _a,type = _b.type,nextValue = _b.nextValue,_c = _b.checks,checks = _c === void 0 ? Object.values(types_1.InternalDateValidateCheck) : _c;
    var self = this;
    if (type !== undefined) {
      var clone = this.clone();
      if (nextValue !== undefined) {
        clone.set(type, nextValue);
      }
      self = clone;
    }
    if (checks.includes(types_1.InternalDateValidateCheck.NotNull) &&
    !InternalDateValidator_1["default"].checkForNull(self.getComponentsRaw(), type)) {
      return false;
    }
    if (checks.includes(types_1.InternalDateValidateCheck.Number) &&
    !Object.values(self.getComponentsRaw()).every(InternalDateValidator_1["default"].testParseToNumber)) {
      return false;
    }
    if (checks.includes(types_1.InternalDateValidateCheck.Limits) &&
    !InternalDateValidator_1["default"].checkLimits(self.getComponentsLikeNumber(), type)) {
      return false;
    }
    if (checks.includes(types_1.InternalDateValidateCheck.Native) &&
    !InternalDateValidator_1["default"].compareWithNativeDate(self.getComponentsLikeNumber())) {
      return false;
    }
    if (checks.includes(types_1.InternalDateValidateCheck.Range)) {
      return type !== undefined ?
      InternalDateValidator_1["default"].checkRangePiecemeal(type, self.getComponentsLikeNumber(), self.start && self.start.getComponentsLikeNumber(), self.end && self.end.getComponentsLikeNumber()) :
      InternalDateValidator_1["default"].checkRangeFully(self.toNumber(), self.start && self.start.toNumber(), self.end && self.end.toNumber());
    }
    return true;
  };
  InternalDate.prototype.toFragments = function (settings, components) {
    if (settings === void 0) {settings = {};}
    if (components === void 0) {components = this.getComponentsRaw();}
    return InternalDateTransformer_1["default"].dateToFragments(components, tslib_1.__assign({ order: this.order, separator: this.separator }, settings));
  };
  /**
      * Перевод даты в числовое представление (**НЕ** аналог `timestamp`)
      * Предназначено для быстрого сравнивания дат `<=>`
      */
  InternalDate.prototype.toNumber = function () {
    return Number(this.toFragments({ order: types_1.InternalDateOrder.YMD, withPad: true }).
    map(function (_a) {
      var valueWithPad = _a.valueWithPad;
      return valueWithPad;
    }).
    join(''));
  };
  InternalDate.prototype.toString = function (settings) {
    if (settings === void 0) {settings = {};}
    return this.toFragments(tslib_1.__assign({ withPad: true, withSeparator: true }, settings)).
    filter(function (_a) {
      var value = _a.value;
      return value !== null;
    }).
    map(function (_a) {
      var type = _a.type,valueWithPad = _a.valueWithPad,value = _a.value;
      return settings.withPad && type !== types_1.InternalDateComponentType.Separator ? valueWithPad : value;
    }).
    join('');
  };
  InternalDate.prototype.toInternalString = function () {
    return InternalDateTransformer_1["default"].dateToInternalString(this.getComponentsRaw());
  };
  InternalDate.prototype.toNativeFormat = function () {
    var components = this.getComponentsLikeNumber();
    if (InternalDateValidator_1["default"].compareWithNativeDate(components)) {
      return tslib_1.__assign({}, components, { month: components.month - 1 });
    }
    return null;
  };
  InternalDate.prototype.clone = function () {
    return new InternalDate({ order: this.order, separator: this.separator }).
    setComponents(tslib_1.__assign({}, this.components)).
    setRangeStart(this.start && this.start.clone()).
    setRangeEnd(this.end && this.end.clone());
  };
  InternalDate.prototype.restore = function (type) {
    if (type === void 0) {type = null;}
    var prev = this.getComponentsRaw();
    var today = InternalDateGetter_1["default"].getTodayComponents();
    if (prev.year === null && prev.month === null && prev.date === null) {
      return this;
    }
    var restoreYear = prev.year !== null && InternalDateValidator_1["default"].testParseToNumber(prev.year) ?
    prev.year > 50 && prev.year < 100 ?
    Number(prev.year) + 1900 :
    prev.year > 0 && prev.year < 51 ?
    Number(prev.year) + 2000 :
    prev.year :
    today.year;
    if (type === null && restoreYear !== prev.year || type === types_1.InternalDateComponentType.Year) {
      this.setYear(restoreYear);
    }
    if (type === null && prev.month === null || type === types_1.InternalDateComponentType.Month) {
      this.setMonth(today.month);
    }
    if (type === null && prev.date === null || type === types_1.InternalDateComponentType.Date) {
      this.setDate(today.date);
    }
    return this;
  };
  InternalDate.prototype.cutOffExcess = function (type, _a) {
    if (type === void 0) {type = null;}
    var _b = _a === void 0 ? {} : _a,_c = _b.isLoop,isLoop = _c === void 0 ? false : _c,isRange = _b.isRange,_d = _b.isCutFeb,isCutFeb = _d === void 0 ? false : _d;
    var _e = this.components,year = _e.year,month = _e.month,date = _e.date;
    if ((type === null || type === types_1.InternalDateComponentType.Year) && InternalDateValidator_1["default"].testParseToNumber(year)) {
      this.shiftYear(0, { isLoop: isLoop, isRange: isRange, isCutFeb: isCutFeb });
    }
    if ((type === null || type === types_1.InternalDateComponentType.Month) && InternalDateValidator_1["default"].testParseToNumber(month)) {
      this.shiftMonth(0, { isLoop: isLoop, isRange: isRange, isCutFeb: isCutFeb });
    }
    if ((type === null || type === types_1.InternalDateComponentType.Date) && InternalDateValidator_1["default"].testParseToNumber(date)) {
      this.shiftDate(0, { isLoop: isLoop, isRange: isRange, isCutFeb: isCutFeb });
    }
    return this;
  };
  InternalDate.prototype.isIncomplete = function () {
    return !this.isEmpty() && Object.values(this.components).some(function (component) {return component === null;});
  };
  InternalDate.prototype.isEmpty = function () {
    return Object.values(this.components).every(function (component) {return component === null;});
  };
  InternalDate.prototype.getMinValue = function (type, isRange) {
    if (isRange === true && this.start !== null) {
      return Number(InternalDateCalculator_1["default"].calcRangeStartDateComponent(type, this.getComponentsLikeNumber(), this.start.getComponentsLikeNumber()));
    }
    return InternalDateGetter_1["default"].getDefaultMin(type);
  };
  InternalDate.prototype.getMaxValue = function (type, _a) {
    var _b = _a === void 0 ? {} : _a,isRange = _b.isRange,isCutFeb = _b.isCutFeb;
    if (isRange && this.end !== null) {
      return Number(InternalDateCalculator_1["default"].calcRangeEndDateComponent(type, this.getComponentsLikeNumber(), this.end.getComponentsLikeNumber()));
    }
    if (!isCutFeb) {
      return InternalDateGetter_1["default"].getDefaultMax(type);
    }
    return InternalDateGetter_1["default"].getDefaultMax(type, this.getComponentsLikeNumber());
  };
  return InternalDate;
}();
exports.InternalDate = InternalDate;