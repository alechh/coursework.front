"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var InternalDateGetter_1 = tslib_1.__importDefault(require("./InternalDateGetter"));
var types_1 = require("./types");
var InternalDateValidator = /** @class */function () {
  function InternalDateValidator() {
  }
  InternalDateValidator.checkForNull = function (_a, type) {
    var year = _a.year,month = _a.month,date = _a.date;
    if (type !== undefined) {
      if (type === types_1.InternalDateComponentType.Year) {
        return year !== null;
      } else
      if (type === types_1.InternalDateComponentType.Month) {
        return month !== null;
      } else
      if (type === types_1.InternalDateComponentType.All) {
        return year !== null && month !== null && date !== null;
      }
      return date !== null;
    }
    return !(year === null || month === null || date === null);
  };
  InternalDateValidator.checkLimits = function (_a, type) {
    var year = _a.year,month = _a.month,date = _a.date;
    if (type !== undefined) {
      var value = type === types_1.InternalDateComponentType.Year ? year : type === types_1.InternalDateComponentType.Month ? month : date;
      return value >= InternalDateGetter_1["default"].getDefaultMin(type) && value <= InternalDateGetter_1["default"].getDefaultMax(type);
    }
    return year >= InternalDateGetter_1["default"].getDefaultMin(types_1.InternalDateComponentType.Year) &&
    year <= InternalDateGetter_1["default"].getDefaultMax(types_1.InternalDateComponentType.Year) &&
    month >= InternalDateGetter_1["default"].getDefaultMin(types_1.InternalDateComponentType.Month) &&
    month <= InternalDateGetter_1["default"].getDefaultMax(types_1.InternalDateComponentType.Month) &&
    date >= InternalDateGetter_1["default"].getDefaultMin(types_1.InternalDateComponentType.Date) &&
    date <= InternalDateGetter_1["default"].getDefaultMax(types_1.InternalDateComponentType.Date);
  };
  InternalDateValidator.compareWithNativeDate = function (_a) {
    var year = _a.year,month = _a.month,date = _a.date;
    var nativeDate = new Date(Date.UTC(year, month - 1, date));
    return nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date;
  };
  InternalDateValidator.checkRangeFully = function (date, startDate, endDate) {
    if (startDate === null && endDate === null) {
      return true;
    }
    startDate = startDate || -Infinity;
    endDate = endDate || Infinity;
    return date >= startDate && date <= endDate;
  };
  InternalDateValidator.checkRangePiecemeal = function (type, _a, startComponents, endComponents) {
    var year = _a.year,month = _a.month,date = _a.date;
    if (startComponents === null && endComponents === null) {
      return true;
    }
    var _b = startComponents || {},_c = _b.year,startYear = _c === void 0 ? -Infinity : _c,_d = _b.month,startMonth = _d === void 0 ? -Infinity : _d,_e = _b.date,startDate = _e === void 0 ? -Infinity : _e;
    var _f = endComponents || {},_g = _f.year,endYear = _g === void 0 ? Infinity : _g,_h = _f.month,endMonth = _h === void 0 ? Infinity : _h,_j = _f.date,endDate = _j === void 0 ? Infinity : _j;
    if (type === types_1.InternalDateComponentType.Year) {
      return !(year < startYear || year > endYear);
    } else
    if (type === types_1.InternalDateComponentType.Month) {
      return !(year === startYear && month < startMonth || year === endYear && month > endMonth);
    } else
    if (type === types_1.InternalDateComponentType.Date) {
      return !(year === startYear && month === startMonth && date < startDate ||
      year === endYear && month === endMonth && date > endDate);
    }
    return true;
  };
  InternalDateValidator.testParseToNumber = function (value) {
    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));
  };
  return InternalDateValidator;
}();
exports["default"] = InternalDateValidator;