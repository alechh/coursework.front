"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var variables_module_less_1 = tslib_1.__importDefault(require("../../../components/variables.module.css"));
var ThemeHelpers_1 = require("../ThemeHelpers");
var ColorFunctions_1 = tslib_1.__importDefault(require("../../styles/ColorFunctions"));
var DEFAULT_THEME = ThemeHelpers_1.defineInternalTheme(variables_module_less_1["default"], {
  bgActive: {
    get: function get() {
      return this.blueLight;
    } },

  borderColorFocus: {
    get: function get() {
      return this.blueLight;
    } },

  borderColorError: {
    get: function get() {
      return this.errorMain;
    } },

  borderColorWarning: {
    get: function get() {
      return this.warningMain;
    } },

  btnFontSizeSmall: {
    get: function get() {
      return this.fontSizeSmall;
    } },

  btnFontSizeMedium: {
    get: function get() {
      return this.fontSizeMedium;
    } },

  btnFontSizeLarge: {
    get: function get() {
      return this.fontSizeLarge;
    } },

  btnPaddingYSmall: {
    get: function get() {
      return this.controlPaddingYSmall;
    } },

  btnPaddingYMedium: {
    get: function get() {
      return this.controlPaddingYMedium;
    } },

  btnPaddingYLarge: {
    get: function get() {
      return this.controlPaddingYLarge;
    } },

  btnDisabledBg: {
    get: function get() {
      return this.bgDisabled;
    } },

  controlHeightSmall: {
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYSmall = parseInt(this.controlPaddingYSmall, 10) || 0;
      var lineHeightSmall = parseInt(this.controlLineHeightSmall, 10) || 0;
      return 2 * borderWidth + 2 * paddingYSmall + lineHeightSmall + "px";
    } },

  controlHeightMedium: {
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYMedium = parseInt(this.controlPaddingYMedium, 10) || 0;
      var lineHeightMedium = parseInt(this.controlLineHeightMedium, 10) || 0;
      return 2 * borderWidth + 2 * paddingYMedium + lineHeightMedium + "px";
    } },

  controlHeightLarge: {
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYLarge = parseInt(this.controlPaddingYLarge, 10) || 0;
      var lineHeightLarge = parseInt(this.controlLineHeightLarge, 10) || 0;
      return 2 * borderWidth + 2 * paddingYLarge + lineHeightLarge + "px";
    } },

  linkHoverColor: {
    get: function get() {
      return this.linkColor;
    } },

  linkDisabledColor: {
    get: function get() {
      return this.textColorDisabled;
    } },

  dropdownMenuHoverBg: {
    get: function get() {
      return this.bgActive;
    } },

  btnDisabledShadowColor: {
    get: function get() {
      return this.borderColorGrayLight;
    } },

  btnDisabledShadow: {
    get: function get() {
      return "0 0 0 1px " + this.btnDisabledShadowColor;
    } },

  btnDisabledShadowArrow: {
    get: function get() {
      return "1px -1px 0 0 " + this.btnDisabledShadowColor;
    } },

  tabColorFocus: {
    get: function get() {
      return this.borderColorFocus;
    } },

  tabColorError: {
    get: function get() {
      return this.btnDangerBg;
    } },

  tabColorWarning: {
    get: function get() {
      return this.btnPayBg;
    } },

  tabColorSuccess: {
    get: function get() {
      return this.btnSuccessBg;
    } },

  tabColorPrimary: {
    get: function get() {
      return this.btnPrimaryBg;
    } },

  tabColorHover: {
    get: function get() {
      return this.borderColorFocusLight;
    } },

  tabColorHoverError: {
    get: function get() {
      return ColorFunctions_1["default"].lighten(this.tabColorError, '25%');
    } },

  tabColorHoverWarning: {
    get: function get() {
      return ColorFunctions_1["default"].lighten(this.tabColorWarning, '25%');
    } },

  tabColorHoverSuccess: {
    get: function get() {
      return ColorFunctions_1["default"].lighten(this.tabColorSuccess, '25%');
    } },

  tabColorHoverPrimary: {
    get: function get() {
      return ColorFunctions_1["default"].lighten(this.tabColorPrimary, '25%');
    } },

  calendarCellHoverBgColor: {
    get: function get() {
      return this.bgActive;
    } },

  dateSelectMenuBg: {
    get: function get() {
      return this.bgDefault;
    } },

  dateSelectMenuItemBgActive: {
    get: function get() {
      return this.bgActive;
    } },

  dateSelectMenuItemBgDisabled: {
    get: function get() {
      return this.bgDefault;
    } },

  dateSelectMenuItemFontActive: {
    get: function get() {
      return this.textColorInvert;
    } },

  dateSelectMenuItemFontSelected: {
    get: function get() {
      return this.textColorDefault;
    } },

  dateSelectMenuItemFontDisabled: {
    get: function get() {
      return this.textColorDisabled;
    } },

  pagingForwardLinkColor: {
    get: function get() {
      return this.linkColor;
    } },

  pagingForwardLinkDisabledColor: {
    get: function get() {
      return this.linkDisabledColor;
    } },

  toggleBgActive: {
    get: function get() {
      return this.toggleBgChecked;
    } },

  toggleBgError: {
    get: function get() {
      return this.errorMain;
    } },

  toggleBgWarning: {
    get: function get() {
      return this.warningMain;
    } },

  toggleFocusShadowColor: {
    get: function get() {
      return this.borderColorFocus;
    } },

  inputFontSizeSmall: {
    get: function get() {
      return this.fontSizeSmall;
    } },

  inputFontSizeMedium: {
    get: function get() {
      return this.fontSizeMedium;
    } },

  inputFontSizeLarge: {
    get: function get() {
      return this.fontSizeLarge;
    } },

  inputFocusShadow: {
    get: function get() {
      return "0 0 0 1px " + this.borderColorFocus;
    } },

  inputDisabledBg: {
    get: function get() {
      return this.bgDisabled;
    } },

  inputDisabledBorderColor: {
    get: function get() {
      return this.borderColorGrayLight;
    } },

  inputFocusOutline: {
    get: function get() {
      return this.borderColorFocus;
    } },

  inputBorderWidth: {
    get: function get() {
      return this.controlBorderWidth;
    } },

  inputBorderTopColor: {
    get: function get() {
      return this.borderColorGrayDark;
    } },

  chbBorderColorFocus: {
    get: function get() {
      return this.borderColorFocus;
    } },

  chbBg: {
    get: function get() {
      return "linear-gradient(" + this.chbBgStart + ", " + this.chbBgEnd + ")";
    } },

  chbHoverBg: {
    get: function get() {
      return "linear-gradient(-180deg, " + this.btnDefaultHoverBgStart + " 0, " + this.btnDefaultHoverBgEnd + " 100%)";
    } },

  chbActiveBg: {
    get: function get() {
      return this.btnDefaultActiveBg;
    } },

  chbShadowActive: {
    get: function get() {
      return this.btnDefaultActiveShadow;
    } },

  textareaLineHeight: {
    get: function get() {
      var fontSize = this.fontSizeMedium;
      switch (fontSize) {
        case '14px':
          return '20px';
        case '16px':
          return '25px';
        default:
          return parseInt(fontSize, 10) * 1.5 + "px";}

    } },

  textareaBorderTopColor: {
    get: function get() {
      return this.borderColorGrayDark;
    } },

  textareaDisabledBg: {
    get: function get() {
      return this.bgDisabled;
    } },

  textareaDisabledBorderColor: {
    get: function get() {
      return this.borderColorGrayLight;
    } },

  spinnerBgColor: {
    get: function get() {
      return this.grayXLight;
    } },

  spinnerDimmedColor: {
    get: function get() {
      return this.gray;
    } },

  spinnerCaptionColor: {
    get: function get() {
      return this.gray;
    } },

  popupBackground: {
    get: function get() {
      return this.bgDefault;
    } } });


exports["default"] = DEFAULT_THEME;