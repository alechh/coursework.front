"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../../utils");
var extractCode_1 = tslib_1.__importDefault(require("./extractCode"));
var KeyboardEventCodes_1 = tslib_1.__importDefault(require("./KeyboardEventCodes"));
exports.isShortcutCopy = function (e) {
  return (utils_1.isMac ? e.metaKey : e.ctrlKey) && extractCode_1["default"](e) === KeyboardEventCodes_1["default"].KeyC ||
  !utils_1.isMac && e.ctrlKey && exports.isKeyInsert(e) ||
  e.key === 'Copy';
};
exports.isShortcutPaste = function (e) {
  return (utils_1.isMac ? e.metaKey : e.ctrlKey) && extractCode_1["default"](e) === KeyboardEventCodes_1["default"].KeyV ||
  !utils_1.isMac && e.shiftKey && exports.isKeyInsert(e) ||
  e.key === 'Paste';
};
exports.isShortcutCut = function (e) {
  return (utils_1.isMac ? e.metaKey : e.ctrlKey) && extractCode_1["default"](e) === KeyboardEventCodes_1["default"].KeyX ||
  !utils_1.isMac && e.shiftKey && exports.isKeyDelete(e) ||
  e.key === 'Cut';
};
exports.isShortcutSelectAll = function (e) {return (utils_1.isMac ? e.metaKey : e.ctrlKey) && extractCode_1["default"](e) === KeyboardEventCodes_1["default"].KeyA;};
exports.isKeyEscape = function (e) {return e.key === 'Escape' || e.key === 'Esc';};
exports.isKeyHome = function (e) {return e.key === 'Home';};
exports.isKeyEnd = function (e) {return e.key === 'End';};
exports.isKeyMeta = function (e) {return e.key === 'Meta' || e.key === 'Win';};
exports.isKeyControl = function (e) {return e.key === 'Control';};
exports.isKeyShift = function (e) {return e.key === 'Shift';};
exports.isKeyAlt = function (e) {return e.key === 'Alt';};
exports.isKeyDelete = function (e) {return e.key === 'Delete' || e.key === 'Del';};
exports.isKeyBackspace = function (e) {return e.key === 'Backspace';};
exports.isKeyCapsLock = function (e) {return e.key === 'CapsLock';};
exports.isKeyInsert = function (e) {return e.key === 'Insert';};
exports.isKeyTab = function (e) {return e.key === 'Tab';};
exports.isKeyEnter = function (e) {return e.key === 'Enter';};
exports.isKeyArrowUp = function (e) {return e.key === 'ArrowUp' || e.key === 'Up';};
exports.isKeyArrowRight = function (e) {return e.key === 'ArrowRight' || e.key === 'Right';};
exports.isKeyArrowDown = function (e) {return e.key === 'ArrowDown' || e.key === 'Down';};
exports.isKeyArrowLeft = function (e) {return e.key === 'ArrowLeft' || e.key === 'Left';};
exports.isKeySpace = function (e) {return e.key === ' ' || e.key === 'Spacebar';};
exports.isCodeMinus = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].Minus;};
exports.isCodeNumpadDecimal = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].NumpadDecimal;};
exports.isCodeNumpadDivide = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].NumpadDivide;};
exports.isCodeNumpadSubtract = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].NumpadSubtract;};
exports.isCodeSlash = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].Slash;};
exports.isCodeBackslash = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].Backslash;};
exports.isCodeIntlBackslash = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].IntlBackslash;};
exports.isCodeComma = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].Comma;};
exports.isCodePeriod = function (e) {return extractCode_1["default"](e) === KeyboardEventCodes_1["default"].Period;};
exports.isKeyArrowHorizontal = function (e) {return exports.isKeyArrowRight(e) || exports.isKeyArrowLeft(e);};
exports.isKeyArrowVertical = function (e) {return exports.isKeyArrowUp(e) || exports.isKeyArrowDown(e);};
exports.isKeyArrow = function (e) {return exports.isKeyArrowHorizontal(e) || exports.isKeyArrowVertical(e);};
exports.isKeyNumber = function (e) {return /^\d+$/.test(e.key);};
exports.isKeyChar = function (e) {return e.key.trim().length === 1;};
exports.isKeyFs = function (e) {return /^(?:F[1-9]|F1[0-2]|Soft[1-4])$/.test(e.key);};
exports.isModified = function (is) {return function (e) {return (e.shiftKey || e.metaKey || e.ctrlKey || e.altKey) && (is ? is(e) : true);};};
exports.isUnmodified = function (is) {return function (e) {return !exports.isModified()(e) && (is ? is(e) : true);};};
exports.isModShift = function (is) {return function (e) {return e.shiftKey && (is ? is(e) : true);};};
exports.someKeys = function () {
  var iss = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    iss[_i] = arguments[_i];
  }
  return function (e) {return iss.some(function (is) {return is(e);});};
};