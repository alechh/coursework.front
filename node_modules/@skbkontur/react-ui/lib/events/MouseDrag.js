"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MouseDragEventType;
(function (MouseDragEventType) {
  MouseDragEventType["MouseDragStart"] = "mousedragstart";
  MouseDragEventType["MouseDragMove"] = "mousedragmove";
  MouseDragEventType["MouseDragEnd"] = "mousedragend";
})(MouseDragEventType || (MouseDragEventType = {}));
var MouseDrag = /** @class */function () {
  function MouseDrag(elem) {
    var _this = this;
    this.clicked = false;
    this.dragging = false;
    this.handleMouseDown = function (event) {
      if (!_this.clicked) {
        _this.clicked = true;
        _this.x1 = event.pageX;
        _this.y1 = event.pageY;
        _this.mouseDragEvent = _this.createEvent(MouseDragEventType.MouseDragStart, event);
      }
    };
    this.handleMouseMove = function (event) {
      if (_this.dragging) {
        if (event.target !== null) {
          event.target.dispatchEvent(_this.createEvent(MouseDragEventType.MouseDragMove, event));
        }
      }
      if (_this.clicked && !_this.dragging && _this.getLength(event.pageX, event.pageY) > MouseDrag.RADIUS) {
        _this.dragging = true;
        _this.clicked = false;
        if (event.target !== null && _this.mouseDragEvent) {
          event.target.dispatchEvent(_this.mouseDragEvent);
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      }
    };
    this.handleMouseUp = function (event) {
      _this.clicked = false;
      if (_this.dragging) {
        _this.dragging = false;
        if (event.target !== null) {
          event.target.dispatchEvent(_this.createEvent(MouseDragEventType.MouseDragEnd, event));
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      }
    };
    this.getLength = function (x2, y2) {
      return _this.x1 !== undefined && _this.y1 !== undefined ? Math.sqrt(Math.pow(x2 - _this.x1, 2) + Math.pow(y2 - _this.y1, 2)) : 0;
    };
    this.createEvent = function (type, event) {
      if (typeof MouseEvent === 'function') {
        return new MouseEvent(type, event);
      }
      // <IE11
      var e = document.createEvent('MouseEvent');
      e.initEvent(type, true, true);
      return e;
    };
    elem.removeEventListener('mousedown', this.handleMouseDown);
    elem.removeEventListener('mousemove', this.handleMouseMove);
    elem.removeEventListener('mouseup', this.handleMouseUp);
    elem.addEventListener('mousedown', this.handleMouseDown);
    elem.addEventListener('mousemove', this.handleMouseMove);
    elem.addEventListener('mouseup', this.handleMouseUp);
  }
  // Радиус окружности, который необходимо преодолеть мышью, чтобы вызвалось событие `MouseDragStart`
  MouseDrag.RADIUS = 5; // px
  MouseDrag.listen = function (elem) {return new MouseDrag(elem);};
  return MouseDrag;
}();
exports["default"] = MouseDrag;