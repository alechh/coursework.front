"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ColorHelpers_1 = require("./ColorHelpers");
var ColorKeywords_1 = require("./ColorKeywords");
var ColorObject_1 = require("./ColorObject");
var warning_1 = tslib_1.__importDefault(require("warning"));
var RGB_REGEX = /rgb\(\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*,\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*,\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*\)/;
var RGBA_REGEX = /rgba\(\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*,\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*,\s*(\d{1,3}(?:(?:\.\d+)?%)?)\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*\)/;
var HSL_REGEX = /hsl\(\s*(\d{1,3})\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*\)/;
var HSLA_REGEX = /hsla\(\s*(\d{1,3})\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*,\s*(0|0\.\d+|1|1\.0+|\d{1,3}(?:(?:\.\d+)?%))\s*\)/;
var HEX_REGEX = /^#([0-9a-f]{3}|[0-9a-f]{6})$/;
var ColorFactory = /** @class */function () {
  function ColorFactory() {
  }
  ColorFactory.create = function (input) {
    if (!this.cache[input]) {
      this.cache[input] = this.instantiate(input);
    }
    return this.cache[input];
  };
  ColorFactory.instantiate = function (input) {
    if (typeof input !== 'string') {
      warning_1["default"](false, "Invalid type of input (" + typeof input + "), expected a string. Returning transparent color");
      return new ColorObject_1.ColorObject([0, 0, 0], 1.0, 'transparent');
    }
    input = input.toLowerCase().trim();
    if (input === 'transparent') {
      return new ColorObject_1.ColorObject([0, 0, 0], 0, 'transparent');
    } else
    if (this.isKeyword(input)) {
      return this.fromKeyword(input);
    } else
    if (input.startsWith('rgb')) {
      var parts = ColorHelpers_1.extractColorParts(input, RGB_REGEX, RGBA_REGEX);
      var _a = ColorHelpers_1.parseRGBParts(parts),r = _a.r,g = _a.g,b = _a.b,a = _a.a;
      r = ColorHelpers_1.clamp(r, 255);
      g = ColorHelpers_1.clamp(g, 255);
      b = ColorHelpers_1.clamp(b, 255);
      a = ColorHelpers_1.clamp(a, 1);
      return this.fromRGB(r, g, b, a);
    } else
    if (input.startsWith('hsl')) {
      var parts = ColorHelpers_1.extractColorParts(input, HSL_REGEX, HSLA_REGEX);
      var _b = ColorHelpers_1.parseHSLParts(parts),h = _b.h,s = _b.s,l = _b.l,a = _b.a;
      h = ColorHelpers_1.clamp(h, 360);
      s = ColorHelpers_1.clamp(s, 1);
      l = ColorHelpers_1.clamp(l, 1);
      a = ColorHelpers_1.clamp(a, 1);
      return this.fromHSL(h, s, l, a);
    }
    return this.fromHex(input);
  };
  ColorFactory.isKeyword = function (input) {
    return ColorKeywords_1.ColorKeywords.hasOwnProperty(input);
  };
  ColorFactory.fromKeyword = function (keyword) {
    return this.fromHex(ColorKeywords_1.ColorKeywords[keyword], keyword);
  };
  ColorFactory.fromHex = function (hexString, type) {
    if (type === void 0) {type = 'hex';}
    if (!HEX_REGEX.test(hexString)) {
      throw new Error(hexString + " is not a valid hex color string");
    }
    var colorCode = hexString.substring(1);
    var rgb = [0, 0, 0];
    if (colorCode.length === 6) {
      colorCode.match(/.{2}/g).forEach(function (c, i) {
        rgb[i] = parseInt(c, 16);
      });
    } else
    if (colorCode.length === 3) {
      colorCode.split('').forEach(function (c, i) {
        rgb[i] = parseInt(c + c, 16);
      });
    }
    return new ColorObject_1.ColorObject(rgb, 1.0, type);
  };
  ColorFactory.fromRGB = function (r, g, b, a) {
    if (a === void 0) {a = 1.0;}
    return new ColorObject_1.ColorObject([r, g, b], a, a < 1 ? 'rgba' : 'rgb');
  };
  ColorFactory.fromHSL = function (h, s, l, a) {
    if (a === void 0) {a = 1.0;}
    if (s === 0) {
      var gray = Math.round(l * 255);
      return new ColorObject_1.ColorObject([gray, gray, gray], a, a < 1 ? 'hsla' : 'hsl');
    }
    var hDeg = h / 360;
    var t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var t2 = l * 2 - t1;
    var r = ColorHelpers_1.hue2rgb(hDeg + 1 / 3, t1, t2);
    var g = ColorHelpers_1.hue2rgb(hDeg, t1, t2);
    var b = ColorHelpers_1.hue2rgb(hDeg - 1 / 3, t1, t2);
    var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    return new ColorObject_1.ColorObject(rgb, a, a < 1 ? 'hsla' : 'hsl');
  };
  ColorFactory.cache = Object.create(null);
  return ColorFactory;
}();
exports.ColorFactory = ColorFactory;