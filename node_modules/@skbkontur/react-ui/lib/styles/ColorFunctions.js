"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ColorHelpers_1 = require("./ColorHelpers");
var ColorFactory_1 = require("./ColorFactory");
var DEFAULT_DARK = ColorFactory_1.ColorFactory.create('#000');
var DEFAULT_LIGHT = ColorFactory_1.ColorFactory.create('#fff');
var ColorFunctions = {
  lighten: function lighten(colorString, amount, method) {
    var key = buildCacheKey('lighten', colorString, amount, method);
    if (ColorFunctionsCache[key] === undefined) {
      ColorFunctionsCache[key] = shiftColor(colorString, amount, '+', method);
    }
    return ColorFunctionsCache[key];
  },
  darken: function darken(colorString, amount, method) {
    var key = buildCacheKey('darken', colorString, amount, method);
    if (ColorFunctionsCache[key] === undefined) {
      ColorFunctionsCache[key] = shiftColor(colorString, amount, '-', method);
    }
    return ColorFunctionsCache[key];
  },
  contrast: function contrast(colorString, darkString, lightString, threshold) {
    if (threshold === void 0) {threshold = 0.43;}
    var _a;
    var key = buildCacheKey('contrast', colorString, darkString, lightString, threshold);
    if (!colorString) {
      ColorFunctionsCache[key] = '';
    }
    if (ColorFunctionsCache[key] === undefined) {
      var color = ColorFactory_1.ColorFactory.create(colorString);
      var dark = typeof darkString === 'undefined' ? DEFAULT_DARK : ColorFactory_1.ColorFactory.create(darkString);
      var light = typeof lightString === 'undefined' ? DEFAULT_LIGHT : ColorFactory_1.ColorFactory.create(lightString);
      // Figure out which is actually light and dark:
      if (dark.luma() > light.luma()) {
        _a = [light, dark], dark = _a[0], light = _a[1];
      }
      if (color.luma() < threshold) {
        ColorFunctionsCache[key] = light.alpha < 1 ? light.toRGBString() : light.toHEXString();
      } else
      {
        ColorFunctionsCache[key] = dark.alpha < 1 ? dark.toRGBString() : dark.toHEXString();
      }
    }
    return ColorFunctionsCache[key];
  },
  red: function red(colorString) {
    var color = ColorFactory_1.ColorFactory.create(colorString);
    return color.rgb[0];
  },
  green: function green(colorString) {
    var color = ColorFactory_1.ColorFactory.create(colorString);
    return color.rgb[1];
  },
  blue: function blue(colorString) {
    var color = ColorFactory_1.ColorFactory.create(colorString);
    return color.rgb[2];
  },
  alpha: function alpha(colorString) {
    var color = ColorFactory_1.ColorFactory.create(colorString);
    return color.alpha;
  },
  isValid: function isValid(colorString) {
    try {
      ColorFactory_1.ColorFactory.create(colorString);
      return true;
    }
    catch (e) {
      return false;
    }
  },
  fade: function fade(colorString, alpha) {
    var key = buildCacheKey('fade', colorString, alpha);
    if (ColorFunctionsCache[key] === undefined) {
      var color = ColorFactory_1.ColorFactory.create(colorString);
      color.alpha = alpha;
      ColorFunctionsCache[key] = color.toColorString(color.type === 'hex' ? 'rgba' : color.type);
    }
    return ColorFunctionsCache[key];
  } };

var ColorFunctionsCache = Object.create(null);
function buildCacheKey(name) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  return name + "(" + args.join() + ")";
}
function shiftColor(colorString, a, sign, method) {
  if (!colorString) {
    return '';
  }
  if (colorString.toLowerCase() === 'transparent') {
    return 'transparent';
  }
  var amount;
  if (typeof a === 'string') {
    amount = a.endsWith('%') ? ColorHelpers_1.floatFromPercent(a) : parseFloat(a);
  } else
  {
    amount = a;
  }
  amount = ColorHelpers_1.clamp(amount, 1);
  var color = ColorFactory_1.ColorFactory.create(colorString);
  var hsl = color.toHSL();
  if (sign === '+') {
    hsl.l += method === 'relative' ? hsl.l * amount : amount;
  } else
  {
    hsl.l -= method === 'relative' ? hsl.l * amount : amount;
  }
  hsl.l = ColorHelpers_1.clamp(hsl.l);
  var newColor;
  if (color.alpha < 1) {
    newColor = ColorFactory_1.ColorFactory.create("hsla(" + hsl.h + ", " + hsl.s + ", " + hsl.l + ", " + hsl.a + ")");
  } else
  {
    newColor = ColorFactory_1.ColorFactory.create("hsl(" + hsl.h + ", " + hsl.s + ", " + hsl.l + ")");
  }
  return newColor.toColorString(color.type);
}
exports["default"] = ColorFunctions;