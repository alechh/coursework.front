{"ast":null,"code":"/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n * \r\n * @providesModule EventSubscriptionVendor\r\n * @typechecks\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nvar invariant = require('fbjs/lib/invariant');\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\n\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\n\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    !(subscription.subscriber === this) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : undefined;\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\n\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\n\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @return {?array}\r\n   */\n\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nmodule.exports = EventSubscriptionVendor;","map":{"version":3,"sources":["C:/Users/Sasha/Documents/coursework.front/node_modules/fbemitter/lib/EventSubscriptionVendor.js"],"names":["_classCallCheck","instance","Constructor","TypeError","invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","prototype","addSubscription","eventType","subscription","subscriber","process","env","NODE_ENV","undefined","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;AAEA;;;;;;AAKA,IAAIC,uBAAuB,GAAI,YAAY;AACzC,WAASA,uBAAT,GAAmC;AACjCN,IAAAA,eAAe,CAAC,IAAD,EAAOM,uBAAP,CAAf;;AAEA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;AAED;;;;;;;;AAOAF,EAAAA,uBAAuB,CAACG,SAAxB,CAAkCC,eAAlC,GAAoD,SAASA,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AACpG,MAAEA,YAAY,CAACC,UAAb,KAA4B,IAA9B,IAAsCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,SAAS,CAAC,KAAD,EAAQ,wDAAR,CAAjD,GAAqHA,SAAS,CAAC,KAAD,CAApK,GAA8Ka,SAA9K;;AACA,QAAI,CAAC,KAAKV,qBAAL,CAA2BI,SAA3B,CAAL,EAA4C;AAC1C,WAAKJ,qBAAL,CAA2BI,SAA3B,IAAwC,EAAxC;AACD;;AACD,QAAIO,GAAG,GAAG,KAAKX,qBAAL,CAA2BI,SAA3B,EAAsCQ,MAAhD;;AACA,SAAKZ,qBAAL,CAA2BI,SAA3B,EAAsCS,IAAtC,CAA2CR,YAA3C;;AACAA,IAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,IAAAA,YAAY,CAACM,GAAb,GAAmBA,GAAnB;AACA,WAAON,YAAP;AACD,GAVD;AAYA;;;;;;;;AAOAN,EAAAA,uBAAuB,CAACG,SAAxB,CAAkCY,sBAAlC,GAA2D,SAASA,sBAAT,CAAgCV,SAAhC,EAA2C;AACpG,QAAIA,SAAS,KAAKM,SAAlB,EAA6B;AAC3B,WAAKV,qBAAL,GAA6B,EAA7B;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,qBAAL,CAA2BI,SAA3B,CAAP;AACD;AACF,GAND;AAQA;;;;;;;;AAOAL,EAAAA,uBAAuB,CAACG,SAAxB,CAAkCa,kBAAlC,GAAuD,SAASA,kBAAT,CAA4BV,YAA5B,EAA0C;AAC/F,QAAID,SAAS,GAAGC,YAAY,CAACD,SAA7B;AACA,QAAIO,GAAG,GAAGN,YAAY,CAACM,GAAvB;AAEA,QAAIK,oBAAoB,GAAG,KAAKhB,qBAAL,CAA2BI,SAA3B,CAA3B;;AACA,QAAIY,oBAAJ,EAA0B;AACxB,aAAOA,oBAAoB,CAACL,GAAD,CAA3B;AACD;AACF,GARD;AAUA;;;;;;;;;;;;;;AAaAZ,EAAAA,uBAAuB,CAACG,SAAxB,CAAkCe,uBAAlC,GAA4D,SAASA,uBAAT,CAAiCb,SAAjC,EAA4C;AACtG,WAAO,KAAKJ,qBAAL,CAA2BI,SAA3B,CAAP;AACD,GAFD;;AAIA,SAAOL,uBAAP;AACD,CA7E6B,EAA9B;;AA+EAmB,MAAM,CAACC,OAAP,GAAiBpB,uBAAjB","sourcesContent":["/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n * \r\n * @providesModule EventSubscriptionVendor\r\n * @typechecks\r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\n\r\nvar EventSubscriptionVendor = (function () {\r\n  function EventSubscriptionVendor() {\r\n    _classCallCheck(this, EventSubscriptionVendor);\r\n\r\n    this._subscriptionsForType = {};\r\n    this._currentSubscription = null;\r\n  }\r\n\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n\r\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\r\n    !(subscription.subscriber === this) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : undefined;\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n    var key = this._subscriptionsForType[eventType].length;\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  };\r\n\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n\r\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\r\n    if (eventType === undefined) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n\r\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\r\n    var eventType = subscription.eventType;\r\n    var key = subscription.key;\r\n\r\n    var subscriptionsForType = this._subscriptionsForType[eventType];\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @return {?array}\r\n   */\r\n\r\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\r\n    return this._subscriptionsForType[eventType];\r\n  };\r\n\r\n  return EventSubscriptionVendor;\r\n})();\r\n\r\nmodule.exports = EventSubscriptionVendor;"]},"metadata":{},"sourceType":"script"}