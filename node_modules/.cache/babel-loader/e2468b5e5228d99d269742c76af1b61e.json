{"ast":null,"code":"var _jsxFileName = \"/home/aleksandr/coursework.front/src/Components/MainWindow/MainWindowComponents/Content/CriticSwitcher/CriticSwitcher.tsx\";\nimport React, { Component } from 'react';\nimport './CriticSwitcher.css';\nimport criticItems from '../../../../../TestData/Curator/CriticsContentBar';\n\nclass CriticSwitcher extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeBarItem = event => {\n      const newBarItem = event.currentTarget.value;\n      let arr = this.state.items.map(item => {\n        if (item.section === newBarItem) item.selected = true;else item.selected = false;\n        return item;\n      });\n      this.props.changePage(event);\n      return this.setState({\n        items: arr\n      });\n    };\n\n    this.state = {\n      items: criticItems\n    };\n  }\n\n  isSelected(section) {\n    return section === this.props.page ? 'btnSelected' : ' ';\n  }\n\n  renderContentBar() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contentBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, this.state.items.map(item => /*#__PURE__*/React.createElement(\"button\", {\n      key: item.section,\n      onClick: this.changeBarItem,\n      className: 'button ' + this.isSelected(item.section),\n      value: item.section,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, item.section)));\n  }\n\n  render() {\n    return this.renderContentBar();\n  }\n\n}\n\nexport default CriticSwitcher;","map":{"version":3,"sources":["/home/aleksandr/coursework.front/src/Components/MainWindow/MainWindowComponents/Content/CriticSwitcher/CriticSwitcher.tsx"],"names":["React","Component","criticItems","CriticSwitcher","constructor","props","changeBarItem","event","newBarItem","currentTarget","value","arr","state","items","map","item","section","selected","changePage","setState","isSelected","page","renderContentBar","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sBAAP;AAEA,OAAOC,WAAP,MAAwB,mDAAxB;;AAgBA,MAAMC,cAAN,SAA6BF,SAA7B,CAAmD;AAC/CG,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;;AADsB,SAS1BC,aAT0B,GASTC,KAAD,IAAiD;AAC7D,YAAMC,UAAU,GAAGD,KAAK,CAACE,aAAN,CAAoBC,KAAvC;AACA,UAAIC,GAAG,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AACnC,YAAGA,IAAI,CAACC,OAAL,KAAiBR,UAApB,EACIO,IAAI,CAACE,QAAL,GAAgB,IAAhB,CADJ,KAEKF,IAAI,CAACE,QAAL,GAAgB,KAAhB;AACL,eAAOF,IAAP;AACH,OALS,CAAV;AAMA,WAAKV,KAAL,CAAWa,UAAX,CAAsBX,KAAtB;AACA,aAAO,KAAKY,QAAL,CAAc;AAACN,QAAAA,KAAK,EAACF;AAAP,OAAd,CAAP;AACH,KAnByB;;AAEtB,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAGX;AAAT,KAAb;AACH;;AAEDkB,EAAAA,UAAU,CAACJ,OAAD,EAAiB;AACvB,WAAQA,OAAO,KAAK,KAAKX,KAAL,CAAWgB,IAAxB,GAA+B,aAA/B,GAA+C,GAAtD;AACH;;AAeOC,EAAAA,gBAAR,GAA0B;AACtB,wBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKV,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,iBACtB;AACI,MAAA,GAAG,EAAEA,IAAI,CAACC,OADd;AAEI,MAAA,OAAO,EAAE,KAAKV,aAFlB;AAGI,MAAA,SAAS,EAAE,YAAW,KAAKc,UAAL,CAAgBL,IAAI,CAACC,OAArB,CAH1B;AAII,MAAA,KAAK,EAAED,IAAI,CAACC,OAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKED,IAAI,CAACC,OALP,CADH,CADL,CADJ;AAYH;;AAEDO,EAAAA,MAAM,GAAE;AACJ,WAAO,KAAKD,gBAAL,EAAP;AACH;;AAxC8C;;AA2CnD,eAAenB,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport './CriticSwitcher.css'\n\nimport criticItems from '../../../../../TestData/Curator/CriticsContentBar'\n\ninterface Idata{\n    section?: string,\n    selected?: boolean\n}\n\ninterface Props{\n    page?: string,\n    changePage(event : React.MouseEvent<HTMLButtonElement>) : void\n}\n\ninterface State{\n    items: Idata[]\n}\n\nclass CriticSwitcher extends Component<Props,State>{\n    constructor(props : Props){\n        super(props);\n        this.state = {items : criticItems}\n    }\n\n    isSelected(section?:string){\n        return (section === this.props.page)? 'btnSelected' : ' '\n    }\n\n    changeBarItem = (event : React.MouseEvent<HTMLButtonElement>) => {\n        const newBarItem = event.currentTarget.value\n        let arr = this.state.items.map(item => {\n            if(item.section === newBarItem)\n                item.selected = true\n            else item.selected = false\n            return item\n        })\n        this.props.changePage(event)\n        return(this.setState({items:arr}))\n    }\n\n\n    private renderContentBar(){\n        return(\n            <div className='contentBar'>\n                {this.state.items.map(item => \n                    <button\n                        key={item.section}\n                        onClick={this.changeBarItem} \n                        className={'button '+ this.isSelected(item.section)}\n                        value={item.section}\n                    >{item.section}\n                    </button>)}\n            </div>\n        )\n    }\n\n    render(){\n        return this.renderContentBar();\n    }\n}\n\nexport default CriticSwitcher"]},"metadata":{},"sourceType":"module"}