{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar getComputedStyle_1 = tslib_1.__importDefault(require(\"../../lib/dom/getComputedStyle\"));\n\nfunction getTextAreaHeight(node, minRows, maxRows) {\n  var style = getComputedStyle_1[\"default\"](node);\n  var lineHeight = style.lineHeight ? parseInt(style.lineHeight, 10) : 0;\n  var paddingTop = style.paddingTop ? parseInt(style.paddingTop, 10) : 0;\n  var paddingBottom = style.paddingBottom ? parseInt(style.paddingBottom, 10) : 0;\n  var minHeight = paddingTop + paddingBottom + lineHeight * minRows;\n  var maxHeight = paddingTop + paddingBottom + lineHeight * maxRows;\n  var expectedHeight = node.scrollHeight + lineHeight;\n  return {\n    height: Math.min(Math.max(expectedHeight, minHeight), maxHeight),\n    exceededMaxHeight: expectedHeight > maxHeight + lineHeight\n  };\n}\n\nexports.getTextAreaHeight = getTextAreaHeight;","map":{"version":3,"sources":["C:/Users/Sasha/Documents/coursework.front/node_modules/@skbkontur/react-ui/components/Textarea/TextareaHelpers.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","getComputedStyle_1","__importDefault","getTextAreaHeight","node","minRows","maxRows","style","lineHeight","parseInt","paddingTop","paddingBottom","minHeight","maxHeight","expectedHeight","scrollHeight","height","Math","min","max","exceededMaxHeight"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,kBAAkB,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,gCAAD,CAA/B,CAAzB;;AACA,SAASG,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmD;AACjD,MAAIC,KAAK,GAAGN,kBAAkB,CAAC,SAAD,CAAlB,CAA8BG,IAA9B,CAAZ;AACA,MAAII,UAAU,GAAGD,KAAK,CAACC,UAAN,GAAmBC,QAAQ,CAACF,KAAK,CAACC,UAAP,EAAmB,EAAnB,CAA3B,GAAoD,CAArE;AACA,MAAIE,UAAU,GAAGH,KAAK,CAACG,UAAN,GAAmBD,QAAQ,CAACF,KAAK,CAACG,UAAP,EAAmB,EAAnB,CAA3B,GAAoD,CAArE;AACA,MAAIC,aAAa,GAAGJ,KAAK,CAACI,aAAN,GAAsBF,QAAQ,CAACF,KAAK,CAACI,aAAP,EAAsB,EAAtB,CAA9B,GAA0D,CAA9E;AACA,MAAIC,SAAS,GAAGF,UAAU,GAAGC,aAAb,GAA6BH,UAAU,GAAGH,OAA1D;AACA,MAAIQ,SAAS,GAAGH,UAAU,GAAGC,aAAb,GAA6BH,UAAU,GAAGF,OAA1D;AACA,MAAIQ,cAAc,GAAGV,IAAI,CAACW,YAAL,GAAoBP,UAAzC;AACA,SAAO;AACLQ,IAAAA,MAAM,EAAEC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,cAAT,EAAyBF,SAAzB,CAAT,EAA8CC,SAA9C,CADH;AAELO,IAAAA,iBAAiB,EAAEN,cAAc,GAAGD,SAAS,GAAGL;AAF3C,GAAP;AAID;;AACDX,OAAO,CAACM,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar getComputedStyle_1 = tslib_1.__importDefault(require(\"../../lib/dom/getComputedStyle\"));\r\nfunction getTextAreaHeight(node, minRows, maxRows) {\r\n  var style = getComputedStyle_1[\"default\"](node);\r\n  var lineHeight = style.lineHeight ? parseInt(style.lineHeight, 10) : 0;\r\n  var paddingTop = style.paddingTop ? parseInt(style.paddingTop, 10) : 0;\r\n  var paddingBottom = style.paddingBottom ? parseInt(style.paddingBottom, 10) : 0;\r\n  var minHeight = paddingTop + paddingBottom + lineHeight * minRows;\r\n  var maxHeight = paddingTop + paddingBottom + lineHeight * maxRows;\r\n  var expectedHeight = node.scrollHeight + lineHeight;\r\n  return {\r\n    height: Math.min(Math.max(expectedHeight, minHeight), maxHeight),\r\n    exceededMaxHeight: expectedHeight > maxHeight + lineHeight };\r\n\r\n}\r\nexports.getTextAreaHeight = getTextAreaHeight;"]},"metadata":{},"sourceType":"script"}